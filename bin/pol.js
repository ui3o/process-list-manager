#!/usr/bin/env node

(()=>{"use strict";var e={562:e=>{function t(e){return"number"==typeof e||!!/^0x[0-9a-f]+$/i.test(e)||/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(e)}function n(e,t){return"constructor"===t&&"function"==typeof e[t]||"__proto__"===t}e.exports=function(e,o){o||(o={});var r={bools:{},strings:{},unknownFn:null};"function"==typeof o.unknown&&(r.unknownFn=o.unknown),"boolean"==typeof o.boolean&&o.boolean?r.allBools=!0:[].concat(o.boolean).filter(Boolean).forEach((function(e){r.bools[e]=!0}));var i={};function s(e){return i[e].some((function(e){return r.bools[e]}))}Object.keys(o.alias||{}).forEach((function(e){i[e]=[].concat(o.alias[e]),i[e].forEach((function(t){i[t]=[e].concat(i[e].filter((function(e){return t!==e})))}))})),[].concat(o.string).filter(Boolean).forEach((function(e){r.strings[e]=!0,i[e]&&[].concat(i[e]).forEach((function(e){r.strings[e]=!0}))}));var l=o.default||{},c={_:[]};function a(e,t,o){for(var i=e,s=0;s<t.length-1;s++){var l=t[s];if(n(i,l))return;void 0===i[l]&&(i[l]={}),i[l]!==Object.prototype&&i[l]!==Number.prototype&&i[l]!==String.prototype||(i[l]={}),i[l]===Array.prototype&&(i[l]=[]),i=i[l]}var c=t[t.length-1];n(i,c)||(i!==Object.prototype&&i!==Number.prototype&&i!==String.prototype||(i={}),i===Array.prototype&&(i=[]),void 0===i[c]||r.bools[c]||"boolean"==typeof i[c]?i[c]=o:Array.isArray(i[c])?i[c].push(o):i[c]=[i[c],o])}function p(e,n,o){if(!o||!r.unknownFn||function(e,t){return r.allBools&&/^--[^=]+$/.test(t)||r.strings[e]||r.bools[e]||i[e]}(e,o)||!1!==r.unknownFn(o)){var s=!r.strings[e]&&t(n)?Number(n):n;a(c,e.split("."),s),(i[e]||[]).forEach((function(e){a(c,e.split("."),s)}))}}Object.keys(r.bools).forEach((function(e){p(e,void 0!==l[e]&&l[e])}));var u=[];-1!==e.indexOf("--")&&(u=e.slice(e.indexOf("--")+1),e=e.slice(0,e.indexOf("--")));for(var d=0;d<e.length;d++){var g,m,f=e[d];if(/^--.+=/.test(f)){var v=f.match(/^--([^=]+)=([\s\S]*)$/);g=v[1];var h=v[2];r.bools[g]&&(h="false"!==h),p(g,h,f)}else if(/^--no-.+/.test(f))p(g=f.match(/^--no-(.+)/)[1],!1,f);else if(/^--.+/.test(f))g=f.match(/^--(.+)/)[1],void 0===(m=e[d+1])||/^(-|--)[^-]/.test(m)||r.bools[g]||r.allBools||i[g]&&s(g)?/^(true|false)$/.test(m)?(p(g,"true"===m,f),d+=1):p(g,!r.strings[g]||"",f):(p(g,m,f),d+=1);else if(/^-[^-]+/.test(f)){for(var _=f.slice(1,-1).split(""),b=!1,S=0;S<_.length;S++)if("-"!==(m=f.slice(S+2))){if(/[A-Za-z]/.test(_[S])&&"="===m[0]){p(_[S],m.slice(1),f),b=!0;break}if(/[A-Za-z]/.test(_[S])&&/-?\d+(\.\d*)?(e-?\d+)?$/.test(m)){p(_[S],m,f),b=!0;break}if(_[S+1]&&_[S+1].match(/\W/)){p(_[S],f.slice(S+2),f),b=!0;break}p(_[S],!r.strings[_[S]]||"",f)}else p(_[S],m,f);g=f.slice(-1)[0],b||"-"===g||(!e[d+1]||/^(-|--)[^-]/.test(e[d+1])||r.bools[g]||i[g]&&s(g)?e[d+1]&&/^(true|false)$/.test(e[d+1])?(p(g,"true"===e[d+1],f),d+=1):p(g,!r.strings[g]||"",f):(p(g,e[d+1],f),d+=1))}else if(r.unknownFn&&!1===r.unknownFn(f)||c._.push(r.strings._||!t(f)?f:Number(f)),o.stopEarly){c._.push.apply(c._,e.slice(d+1));break}}return Object.keys(l).forEach((function(e){var t,n,o;t=c,n=e.split("."),o=t,n.slice(0,-1).forEach((function(e){o=o[e]||{}})),n[n.length-1]in o||(a(c,e.split("."),l[e]),(i[e]||[]).forEach((function(t){a(c,t.split("."),l[e])})))})),o["--"]?c["--"]=u.slice():u.forEach((function(e){c._.push(e)})),c}},757:function(e,t,n){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.help=void 0;const r=o(n(562)),i=o(n(147)),s=n(626),l=n(45),c=(0,r.default)(process.argv.slice(2));t.help=()=>{(0,l.printUsage)({name:"pol - Process list manager.",usage:[{name:"pol [options][command]",desc:"Process list (pol) manager accepts command and options."}],options:[{desc:"show help",switch:"-h, --help",type:"boolean"}],commands:[{desc:"boot init system",switch:"boot"},{desc:"start [service|--all]",switch:"start"},{desc:"restart [service|--all]",switch:"restart"},{desc:"stop [service|--all]",switch:"stop"},{desc:"list running [none|--all]",switch:"ps"}],version:i.default.version,copyright:"copyright@2023"}),process.exit(0)},(c.h||c.help)&&(0,t.help)(),(0,s.polDaemon)(c)},685:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pol=void 0;const o=n(473),r=n(522);t.pol=new class{constructor(){this.SERVICE_STATE={READY:{name:"SERVICE_STATE_READY",state:0},UP:{name:"SERVICE_STATE_UP",state:1},DOWN:{name:"SERVICE_STATE_DOWN",state:2},STOP:{name:"SERVICE_STATE_STOP",state:3}},this.defaults={CLI_PRE_INTERVAL:50,CLI_INTERVAL:200},this.running=!1,this.srv={},this.loginService=void 0}init(e,t){return this.srv[e]=this.srv[e]?this.srv[e]:{processes:[],path:t,name:e,state:this.SERVICE_STATE.READY.state,interval:{before_onStart:void 0,after_onStart:void 0,before_onStop:void 0,after_onStop:void 0},cli:{after_onStart:{},before_onStart:{},after_onStop:{},before_onStop:{},after_onLogin:{},before_onLogin:{}},exec:{onStart:void 0,onLogin:void 0}},this.srv[e].processes=[],this.srv[e]}startRunChecker(e,t,n,o="",i,s=void 0){const l=this.srv[e].interval,c=this.srv[e].cli[`${t}_${n}`],a=n.toLowerCase().includes("start")?"start":"stop";"before_onStart"==`${t}_${n}`&&s&&(this.srv[e].startResolver=s);const p=()=>{Object.keys(c).length?(l[`${t}_${n}`]||(l[`${t}_${n}`]=setInterval(p,2e3)),i.write(`         waiting ${t} ${e} ${a} ...`)):(l[`${t}_${n}`]&&(l[`${t}_${n}`]=clearInterval(l[`${t}_${n}`]),i.write(`[${r.term.fc.green}  OK  ${r.term.mc.resetAll}] ${e} is ${o} ...`)),s&&s())};Object.keys(c).length?setTimeout(p,500):s&&s()}stopRunChecker(e,t){var n,o;const r=this.srv[e].interval;(r[`before_on${t}`]||r[`after_on${t}`])&&(r[`before_on${t}`]&&(r[`before_on${t}`]=clearInterval(r[`before_on${t}`]),this.srv[e].startResolver&&(null===(o=(n=this.srv[e]).startResolver)||void 0===o||o.call(n))),r[`after_on${t}`]&&(r[`after_on${t}`]=clearInterval(r[`after_on${t}`])))}setRunning(e){this.srv[e].running=!0}addProcess(e,t,n){this.srv[e].processes.push({procId:t,procName:n})}addCli(e,n,o,r){switch(n){case"onStart":case"onLogin":case"onStop":("onStop"===n?t.pol.isStateStop(e):this.srv[e].exec[n])?this.srv[e].cli[`after_${n}`][`${o}`]=r:this.srv[e].cli[`before_${n}`][`${o}`]=r}}addExec(e,t,n,r){switch(t){case"onStart":case"onLogin":this.srv[e].exec[t]?(0,o.msgToLog)(`not possible to execute to exe in ${t}`,"pol   ",e):this.srv[e].exec[t]=r}}delCli(e,t,n){switch(t){case"onStart":case"onStop":case"onLogin":Object.keys(this.srv[e].cli[`before_${t}`]).forEach((n=>{delete this.srv[e].cli[`before_${t}`][n]})),Object.keys(this.srv[e].cli[`after_${t}`]).forEach((n=>{delete this.srv[e].cli[`after_${t}`][n]}))}}delExec(e,t){switch(t){case"onStart":case"onLogin":this.srv[e].exec[t]=void 0}}setSetup(e,t){this.srv[e].setup=t}setLoginService(e){this.loginService=this.srv[e]}getLoginService(){return this.loginService}stateInit(e){this.srv[e].state=this.SERVICE_STATE.READY.state}get(e){return this.srv[e]}isStateAfterDown(e){return this.srv[e].state>=this.SERVICE_STATE.DOWN.state}isStateStop(e){return this.srv[e].state===this.SERVICE_STATE.STOP.state}setStateReady(e){this.srv[e].state=this.SERVICE_STATE.READY.state,this.srv[e].running=!1}setStateDown(e){this.srv[e].state=this.SERVICE_STATE.DOWN.state}setStateStop(e){this.srv[e].state=this.SERVICE_STATE.STOP.state}getAllRunning(){return this.getServices().filter((e=>e.running))}getAllStopped(){return this.getServices().filter((e=>!e.running))}getServices(){return Object.values(this.srv).sort(((e,t)=>e.name.toUpperCase()<t.name.toUpperCase()?-1:e.name.toUpperCase()>t.name.toUpperCase()?1:0))}getNanoSecTime(){const e=process.hrtime();return 1e9*e[0]+e[1]}}},238:function(e,t,n){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.logFile=t.cliSplitByLine=t.cliSplitByLineSync=t.log=t.TASK_INDENT=void 0;const r=n(81),i=o(n(358)),s=o(n(147)),l=n(685),c=n(473),a=n(522);function p(...e){const t=[...arguments];(0,r.spawnSync)(t.shift(),[...t],{encoding:"utf-8",stdio:"ignore"})}if(t.TASK_INDENT="        ",t.log={write:console.log,log:console.log,warn:console.warn,err:console.error,end:()=>{}},!i.default.existsSync(c.LOG_FILE_PATH)){try{i.default.accessSync(c.LOG_FILE_ROOT,i.default.constants.R_OK|i.default.constants.W_OK|i.default.constants.X_OK)}catch(e){t.log.log(`[${a.term.fc.red}REQUIRED${a.term.mc.resetAll}] Please create '/var/log/pol' folder with 'rw' access for the running user!`),process.exit(1)}p("touch",c.LOG_FILE_PATH)}const u=`${process.env.ZSH}/custom/plugins/pol`,d=`${u}/pol.plugin.${s.default.version}.version`;process.env.ZSH&&process.env.ZSH.endsWith(".oh-my-zsh")&&!i.default.existsSync(d)&&(p("mkdir","-p",`${u}`),p("touch",d),p("cp",`${__dirname}/../zsh-plugin/pol.plugin.zsh`,`${u}/pol.plugin.zsh`),p("cp",`${__dirname}/../zsh-plugin/plugin.js`,`${u}/plugin.js`),t.log.log(`[${a.term.fc.green}  INFO  ${a.term.mc.resetAll}] .oh-my-zsh custom plugin installed. Please add 'pol' to enabled plugin list in '~/.zshrc' file.`)),process.env.TZ=process.env.TZ?process.env.TZ:i.default.readFileSync("/etc/timezone").toString().split("\n")[0];const g=(e,t,n)=>{Object.defineProperty(e.cli,"noErr",{get:function(){return globalThis.service.__prop__.noErr=!0,e.cli}}),Object.defineProperty(e.cli,"splitByLine",{get:function(){return globalThis.service.__prop__.splitByLine=!0,e.cli}}),Object.defineProperty(e.cli,"splitAll",{get:function(){return globalThis.service.__prop__.splitAll=!0,e.cli}}),e.cli.gid=(t="")=>(globalThis.service.__prop__.gid=t,e.cli),e.cli.uid=(t="")=>(globalThis.service.__prop__.uid=t,e.cli),e.cli.wd=(t="")=>(globalThis.service.__prop__.cwd=t,e.cli),e.cli.eol=(t="")=>(globalThis.service.__prop__.eol=t,e.cli),e.cli.do=function(){return v([...arguments],this.serviceName)},e.toLog=function(e){(0,c.msgToLog)(e)},e.toLog=e.toLog.bind(Object.assign(Object.assign({},t),{type:n,controller:e})),e.cli.do=e.cli.do.bind(Object.assign(Object.assign({},t),{type:n,controller:e}))},m=(e,t,n)=>{Object.defineProperty(e.exec,"it",{get:function(){return globalThis.service.__prop__.it=!0,e.exec}}),e.exec.gid=(t="")=>(globalThis.service.__prop__.gid=t,e.exec),e.exec.uid=(t="")=>(globalThis.service.__prop__.uid=t,e.exec),e.exec.wd=(t="")=>(globalThis.service.__prop__.cwd=t,e.exec),e.exec.do=function(){return f([...arguments],this.serviceName)},e.exec.do=e.exec.do.bind(Object.assign(Object.assign({},t),{type:n,controller:e}))},f=(e,n)=>{var o;const i=e.shift(),s=[...e],a=l.pol.getNanoSecTime(),p=null===(o=(new Error).stack)||void 0===o?void 0:o.split("at ")[3].split(" ")[0].split(".")[1];let u=Object.assign({},globalThis.service.__prop__);globalThis.service.__prop__={};const d=Object.assign(Object.assign({},process.env),{POL_CL_ENV:`__POL_CL__${i}__${a}__EXEC__POL_CL__`});if(l.pol.isStateAfterDown(n)||l.pol.get(n).exec[p])return Promise.resolve();if(u.gid){const e=(0,t.cliSplitByLineSync)("id","-g",`${u.gid}`);u.gid=e.c?void 0:Number(e.o[0])}if(u.uid){const e=(0,t.cliSplitByLineSync)("id","-u",`${u.uid}`);u.uid=e.c?void 0:Number(e.o[0])}const g=(0,r.spawn)(i,s,{cwd:u.cwd,env:d,stdio:u.it?"inherit":void 0,gid:u.gid,uid:u.uid}),m=new Promise((e=>{var t,o;u.it||(null===(t=g.stdout)||void 0===t||t.on("data",(e=>{(0,c.msgToLog)(e.toString(),"outexe")})),null===(o=g.stderr)||void 0===o||o.on("data",(e=>{(0,c.msgToLog)(e.toString(),"errexe")}))),g.on("close",(t=>{l.pol.delExec(n,p),e(t)}))}));return l.pol.addExec(n,p,a,{prog:i,params:s,promise:m,options:u,timestamp:a}),m},v=(e,n)=>{var o;const i=[],s=e.shift(),c=[...e],a=l.pol.getNanoSecTime(),p=null===(o=(new Error).stack)||void 0===o?void 0:o.split("at ")[3].split(" ")[0].split(".")[1];let u=Object.assign({},globalThis.service.__prop__);globalThis.service.__prop__={};const d=Object.assign(Object.assign({},process.env),{POL_CL_ENV:`__POL_CL__${s}__${a}__CLI__POL_CL__`});if(l.pol.isStateAfterDown(n)&&"onStop"!=p)return Promise.resolve();if(u.gid){const e=(0,t.cliSplitByLineSync)("id","-g",`${u.gid}`);u.gid=e.c?void 0:Number(e.o[0])}if(u.uid){const e=(0,t.cliSplitByLineSync)("id","-u",`${u.uid}`);u.uid=e.c?void 0:Number(e.o[0])}const g=(0,r.spawn)(s,c,{cwd:u.cwd,env:d,gid:u.gid,uid:u.uid});return l.pol.addCli(n,p,a,{prog:s,params:c}),new Promise((e=>{let t="";g.stdout.on("data",(e=>{t+=e})),g.stderr.on("data",(e=>{u.noErr||(t+=e)})),g.on("close",(o=>{if(l.pol.delCli(n,p,a),u.splitAll||u.splitByLine){const n=t.split(u.eol?u.eol:"\n").filter((e=>e));u.splitByLine?e({o:n,c:o}):(n.forEach((e=>i.push(e.split(/[ \t]/)))),e({o:i,c:o}))}else e({o:t,c:o})}))}))};globalThis.service={set setup(e){var t,n;const o=Object.assign(Object.assign({},e),{serviceName:null===(n=null===(t=(new Error).stack)||void 0===t?void 0:t.split("at ")[2])||void 0===n?void 0:n.trim().split(".js:")[0].replace(/.*\//,""),ssOnStart:{cli:{},exec:{}},ssOnStop:{cli:{}},ssOnLogin:{cli:{},exec:{}}});g(o.ssOnStart,o,"start"),g(o.ssOnStop,o,"stop"),g(o.ssOnLogin,o,"login"),m(o.ssOnStart,o,"start"),m(o.ssOnLogin,o,"login"),l.pol.stateInit(o.serviceName),l.pol.setSetup(o.serviceName,o)},__prop__:{}},t.cliSplitByLineSync=function(...e){const t=[...arguments],n=(0,r.spawnSync)(t.shift(),[...t]);return{o:n.stdout.toString().split("\n").filter((e=>e)),c:n.status}},t.cliSplitByLine=function(...e){const t=[...arguments],n=(0,r.spawn)(t.shift(),[...t]);return new Promise((e=>{let t="";n.stdout.on("data",(e=>{t+=e})),n.stderr.on("data",(e=>{t+=e})),n.on("close",(n=>{const o=t.split("\n").filter((e=>e));e({o,c:n})}))}))},t.logFile={write:c.msgToLog,log:()=>{},warn:()=>{},err:()=>{},end:()=>{}},console.log=console.log.bind(global.console,t.TASK_INDENT),console.warn=console.warn.bind(global.console,t.TASK_INDENT),console.error=console.error.bind(global.console,t.TASK_INDENT),Date.prototype.ISOStrings=function(){const e=-this.getTimezoneOffset(),t=function(e){return(e<10?"0":"")+e},n=(e>=0?"+":"-")+t(Math.floor(Math.abs(e)/60))+":"+t(Math.abs(e)%60);return this.setTime(this.getTime()+60*e*1e3),this.toISOString().replace("Z",n)}},473:function(e,t,n){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.msgToLog=t.LOG_FILE_PATH=t.LOG_FILE_ROOT=void 0;const r=o(n(358));t.LOG_FILE_ROOT="/var/log/pol",t.LOG_FILE_PATH=`${t.LOG_FILE_ROOT}/pol.log`;const i=r.default.createWriteStream(t.LOG_FILE_PATH,{flags:"a"});t.msgToLog=(e,t="outlog",n)=>{const o={time:(new Date).ISOStrings(),level:t,service:n,message:e};i.write(`${JSON.stringify(o)}\n`)}},626:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{c(o.next(e))}catch(e){i(e)}}function l(e){try{c(o.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,l)}c((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.polDaemon=void 0;const i=r(n(358)),s=r(n(37)),l=n(757),c=n(685),a=n(238),p=n(302),u=n(522),d="possible options: [--all|service_name.service]",g=process.env.POL_CONFIG_FOLDER?[process.env.POL_CONFIG_FOLDER]:["/etc/pol"];g.push(`${s.default.homedir()}/.config/pol`);const m=Object.assign({},process.env);t.polDaemon=e=>o(void 0,void 0,void 0,(function*(){var t,n,r,s,f,v,h;const _=()=>o(void 0,void 0,void 0,(function*(){const e=yield(0,a.cliSplitByLine)("find",...g,"-name","*.service.js"),t=yield(0,a.cliSplitByLine)("readlink","-e",...g.map((e=>`${e}/login.service.target.js`))),n=yield(0,a.cliSplitByLine)("sh","-c",'ps aux | grep ".*node.*pol.*boot$"');c.pol.running=!(n.o.length<2),e.o.filter((e=>!e.includes("No such file or directory"))).map((e=>{var t,n;const o=null===(n=null===(t=null==e?void 0:e.split("/"))||void 0===t?void 0:t.pop())||void 0===n?void 0:n.replace(".js","");c.pol.init(o,e)}));const o=(yield(0,a.cliSplitByLine)("find","/proc","-maxdepth","2","-name","environ")).o.filter((e=>{try{return i.default.accessSync(e,i.default.constants.R_OK),!0}catch(e){return!1}}));for(const e of o)try{const t=i.default.readFileSync(e).toString();if(t.includes("__POL__")){const n=t.split("__POL_CL__")[1].split("__"),o=t.split("__POL__")[1].split("__");c.pol.setRunning(o[0]),c.pol.addProcess(o[0],e.split("/")[2],n[0])}}catch(e){}const r=require;for(const e of c.pol.getServices())r(e.path);t.o.forEach((e=>{var t,n;c.pol.setLoginService(null===(n=null===(t=null==e?void 0:e.split("/"))||void 0===t?void 0:t.pop())||void 0===n?void 0:n.replace(".js",""))}))}));yield _();const b=(e,t)=>o(void 0,void 0,void 0,(function*(){if(!e)return;if(!c.pol.getServices().some((t=>t.name===e||"--all"===e)))return void t.write(d);const n=[];return new Promise((o=>{var r,i,s;for(const o of c.pol.getServices()){if("--all"!==e&&o.name!==e)continue;let l=()=>{};const p=c.pol.get(o.name);n.push(new Promise((e=>l=e))),c.pol.stateInit(o.name);try{if(c.pol.getAllRunning().some((e=>e.name===o.name))){t.write(`[${u.term.fc.yellow} WARN ${u.term.mc.resetAll}] ${o.name} is already running ...`),l();continue}(null===(r=p.setup)||void 0===r?void 0:r.onStart)?(process.env=Object.assign(Object.assign({},m),{POL:`__POL__${o.name}__${c.pol.getNanoSecTime()}__POL__`}),t.write(`[${u.term.fc.green}  OK  ${u.term.mc.resetAll}] start ${o.name} ...`),p.setup.onStart(p.setup.ssOnStart).then((()=>{c.pol.startRunChecker(o.name,"after","onStart","started",a.logFile)})),c.pol.startRunChecker(o.name,"before","onStart","started",t,l)):l()}catch(e){t.write(`[${u.term.fc.red}FAILED${u.term.mc.resetAll}] start ${o.name} ...`),t.write(`        ${e.stack}`),null===(s=null===(i=c.pol.get(o.name))||void 0===i?void 0:i.startResolver)||void 0===s||s.call(i)}}Promise.all(n).then((()=>{o(!0)}))}))})),S=(e,t,n)=>o(void 0,void 0,void 0,(function*(){if(!c.pol.getServices().some((t=>t.name===e||"--all"===e)))return void t.write(d);if(!c.pol.getAllRunning().some((t=>t.name===e))&&"--all"!==e)return void t.write(`[${u.term.fc.yellow} WARN ${u.term.mc.resetAll}] ${e} is already stopped ...`);if("--all"===e)for(const e of c.pol.getServices())c.pol.setStateDown(e.name);else c.pol.setStateDown(e);const r=[];return new Promise((i=>o(void 0,void 0,void 0,(function*(){var s;for(const i of c.pol.getAllRunning())if("--all"===e||e===i.name){let e=()=>{},l=()=>{},p=()=>{};const d=[new Promise((e=>l=e)),new Promise((e=>p=e))],g=e=>o(void 0,void 0,void 0,(function*(){let o="";c.pol.stopRunChecker(e.name,"Start");for(const r of e.processes){let i=a.TASK_INDENT;o!==e.name&&(o=e.name,i=`[${u.term.fc.green} STOP ${u.term.mc.resetAll}]`);const s=n?["kill","-9",r.procId]:["kill",r.procId],{c:l}=yield(0,a.cliSplitByLine)(...s);0==l&&t.write(`${i} ${e.name} service with proc/pid[${r.procName}/${r.procId}] ...`)}}));r.push(new Promise((t=>e=t)));try{(null===(s=i.setup)||void 0===s?void 0:s.onStop)?(i.setup.ssOnStop.stopAll=()=>o(void 0,void 0,void 0,(function*(){yield g(i),c.pol.setStateStop(i.name),c.pol.startRunChecker(i.name,"after","onStop","stopped",t,p)})),i.setup.onStop(i.setup.ssOnStop),c.pol.startRunChecker(i.name,"before","onStop","stopped",t,l)):(l(),p(),yield g(i)),Promise.all(d).then((()=>{e(),setTimeout((()=>{c.pol.setStateReady(i.name),c.pol.delExec(i.name,"onLogin"),c.pol.delExec(i.name,"onStart")}))}))}catch(n){t.write(`[${u.term.fc.red}FAILED${u.term.mc.resetAll}] stop ${i.name} ...`),e()}}if("--all"===e)for(const e of c.pol.getAllStopped())t.write(`[${u.term.fc.yellow} WARN ${u.term.mc.resetAll}] ${e.name} is already stopped ...`);Promise.all(r).then((()=>{i()}))}))))}));switch(e._[0]){case"boot":if(c.pol.running&&(a.log.log("Another pol daemon is running!"),process.exit(1)),yield(0,p.serverCreate)(((e,t)=>o(void 0,void 0,void 0,(function*(){switch(e._[0]){case"stop":!e._.length||e._.length<2&&!e.all?(t.write(d),t.end()):(yield _(),yield S(e._[1]?e._[1]:e.all?"--all":null,t,e.force),t.end());break;case"start":!e._.length||e._.length<2&&!e.all?(t.write(d),t.end()):(yield _(),yield b(e._[1]?e._[1]:e.all?"--all":null,t),t.end());break;case"restart":!e._.length||e._.length<2&&!e.all?(t.write(d),t.end()):(yield _(),yield S(e._[1]?e._[1]:e.all?"--all":null,t,e.force),setTimeout((()=>o(void 0,void 0,void 0,(function*(){yield b(e._[1]?e._[1]:e.all?"--all":null,t),t.end()})))))}})))),yield b("--all",a.log),c.pol.getLoginService()){const e=()=>o(void 0,void 0,void 0,(function*(){yield _(),yield S("--all",a.log),(0,p.serverCleanup)()}));c.pol.isStateAfterDown(null===(t=c.pol.getLoginService())||void 0===t?void 0:t.name)?yield e():(process.env=Object.assign(Object.assign({},m),{POL:`__POL__${null===(n=c.pol.getLoginService())||void 0===n?void 0:n.name}__${c.pol.getNanoSecTime()}__POL__`}),null===(f=null===(s=null===(r=c.pol.getLoginService())||void 0===r?void 0:r.setup)||void 0===s?void 0:s.onLogin)||void 0===f||f.call(s,null===(h=null===(v=c.pol.getLoginService())||void 0===v?void 0:v.setup)||void 0===h?void 0:h.ssOnLogin).then((()=>o(void 0,void 0,void 0,(function*(){var t,n,r,i,s;(null===(t=c.pol.getLoginService())||void 0===t?void 0:t.exec.onLogin)?null===(s=null===(i=null===(r=null===(n=c.pol.getLoginService())||void 0===n?void 0:n.exec)||void 0===r?void 0:r.onLogin)||void 0===i?void 0:i.promise)||void 0===s||s.then((()=>o(void 0,void 0,void 0,(function*(){yield e()})))):yield e()})))))}break;case"completion":if("zsh"===e._[1]&&process.env.ZSH&&process.env.ZSH.endsWith(".oh-my-zsh")){const e=`${process.env.ZSH}/custom/plugins/pol`;yield(0,a.cliSplitByLine)("mkdir","-p",`${e}`),yield(0,a.cliSplitByLine)("cp",`${__dirname}/../zsh-plugin/pol.plugin.zsh`,`${e}/pol.plugin.zsh`),yield(0,a.cliSplitByLine)("cp",`${__dirname}/../zsh-plugin/plugin.js`,`${e}/plugin.js`),a.log.log(`[${u.term.fc.green}  INFO  ${u.term.mc.resetAll}] .oh-my-zsh custom plugin installed. Please add 'pol' to enabled plugin list in '~/.zshrc' file.`)}break;case"ps":let i="";for(const e of c.pol.getAllRunning())for(const t of e.processes){let n=a.TASK_INDENT;i!==e.name&&(i=e.name,n=`[${u.term.fc.green} RUN ${u.term.mc.resetAll}] `),a.log.log(n,e.name,`service with proc/pid[${t.procName}/${t.procId}] ...`)}if(e.all)for(const e of c.pol.getAllStopped())a.log.log(`[${u.term.fc.yellow} STOP ${u.term.mc.resetAll}]`,e.name,"service ...");break;case"stop":case"start":case"restart":(yield(0,p.clientCreate)()).write(JSON.stringify(e));break;default:(0,l.help)()}}))},302:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{c(o.next(e))}catch(e){i(e)}}function l(e){try{c(o.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,l)}c((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.clientCreate=t.clientCleanup=t.serverCreate=t.serverCleanup=void 0;const i=r(n(358)),s=r(n(808)),l=n(238),c=n(473),a={},p=e=>{(0,c.msgToLog)(e,"pol   ")};var u,d,g=!1;const m="/tmp/pol.sock";t.serverCleanup=()=>{if(!g&&u){if(g=!0,p("Socket server: terminating"),Object.keys(a).length){let e=Object.keys(a);for(;e.length;){let t=e.pop();a[t].end()}}u.close()}},t.serverCreate=(e=((e,t)=>o(void 0,void 0,void 0,(function*(){}))))=>o(void 0,void 0,void 0,(function*(){return p("Socket server: checking for leftover socket"),i.default.existsSync(m)?(p("Socket server: removing leftover socket."),i.default.unlinkSync(m)):p("Socket server: no leftover socket found."),process.on("exit",t.serverCleanup),function(e,t=((e,t)=>o(this,void 0,void 0,(function*(){})))){let n;return p("Socket server: creating"),new Promise((r=>{u=s.default.createServer((function(e){p("Socket server: connection acknowledged");var n=Date.now().toString();a[n]=e,e.on("end",(function(){p("Socket server: client disconnected"),delete a[n]})),e.on("data",(e=>o(this,void 0,void 0,(function*(){const o=JSON.parse(e.toString());t(o,a[n])})))),e.on("error",(e=>o(this,void 0,void 0,(function*(){delete a[n]}))))})).listen(e).on("connection",(function(e){p("Socket server: client connected"),n=e})),r()}))}(m,e)})),t.clientCleanup=()=>{!g&&d&&(g=!0,d.end())},t.clientCreate=()=>(process.on("exit",t.clientCleanup),new Promise((e=>{d=s.default.createConnection(m).on("connect",(()=>{e(d)})).on("data",(function(e){const t=e.toString();l.log.log(t)})).on("error",(function(e){l.log.log("pol daemon not running. run `pol boot` first!"),process.exit(1)})).on("close",(function(e){}))})))},522:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.term=void 0;const n={stdout:process.stdout,print:function(e=""){return n.stdout.write(e),n},bold:function(e,t=""){return n.print(n.mc.bold+t+e+n.mc.resetAll)},italic:function(e,t=""){return n.print(n.mc.italic+t+e+n.mc.resetAll)},underline:function(e,t=""){return n.print(n.mc.underline+t+e+n.mc.resetAll)},inverse:function(e,t=""){return n.print(n.mc.inverse+t+e+n.mc.resetAll)},strike:function(e,t=""){return n.print(n.mc.strike+t+e+n.mc.resetAll)},defaultColor:function(e){return n.print(n.fc.defaultColor+e+n.mc.resetAll)},black:function(e){return n.print(n.fc.black+e+n.mc.resetAll)},red:function(e){return n.print(n.fc.red+e+n.mc.resetAll)},green:function(e){return n.print(n.fc.green+e+n.mc.resetAll)},yellow:function(e){return n.print(n.fc.yellow+e+n.mc.resetAll)},blue:function(e){return n.print(n.fc.blue+e+n.mc.resetAll)},magenta:function(e){return n.print(n.fc.magenta+e+n.mc.resetAll)},cyan:function(e){return n.print(n.fc.cyan+e+n.mc.resetAll)},white:function(e){return n.print(n.fc.white+e+n.mc.resetAll)},brightBlack:function(e){return n.print(n.fc.brightBlack+e+n.mc.resetAll)},brightRed:function(e){return n.print(n.fc.brightRed+e+n.mc.resetAll)},brightGreen:function(e){return n.print(n.fc.brightGreen+e+n.mc.resetAll)},brightYellow:function(e){return n.print(n.fc.brightYellow+e+n.mc.resetAll)},brightBlue:function(e){return n.print(n.fc.brightBlue+e+n.mc.resetAll)},brightMagenta:function(e){return n.print(n.fc.brightMagenta+e+n.mc.resetAll)},brightCyan:function(e){return n.print(n.fc.brightCyan+e+n.mc.resetAll)},brightWhite:function(e){return n.print(n.fc.brightWhite+e+n.mc.resetAll)},customColor:function(e,t){const o=isNaN(e)?e:`[38;5;${e}m`;return n.print(o+t+n.mc.resetAll)},bgDefaultColor:function(e,t=""){return n.print(n.fc.brightWhite+t+e+n.mc.resetAll)},bgBlack:function(e,t=""){return n.print(n.bc.black+t+e+n.mc.resetAll)},bgRed:function(e,t=""){return n.print(n.bc.red+t+e+n.mc.resetAll)},bgGreen:function(e,t=""){return n.print(n.bc.green+t+e+n.mc.resetAll)},bgYellow:function(e,t=""){return n.print(n.bc.yellow+t+e+n.mc.resetAll)},bgBlue:function(e,t=""){return n.print(n.bc.blue+t+e+n.mc.resetAll)},bgMagenta:function(e,t=""){return n.print(n.bc.magenta+t+e+n.mc.resetAll)},bgCyan:function(e,t=""){return n.print(n.bc.cyan+t+e+n.mc.resetAll)},bgWhite:function(e,t=""){return n.print(n.bc.white+t+e+n.mc.resetAll)},bgBrightBlack:function(e,t=""){return n.print(n.bc.brightBlack+t+e+n.mc.resetAll)},bgBrightRed:function(e,t=""){return n.print(n.bc.brightRed+t+e+n.mc.resetAll)},bgBrightGreen:function(e,t=""){return n.print(n.bc.brightGreen+t+e+n.mc.resetAll)},bgBrightYellow:function(e,t=""){return n.print(n.bc.brightYellow+t+e+n.mc.resetAll)},bgBrightBlue:function(e,t=""){return n.print(n.bc.brightBlue+t+e+n.mc.resetAll)},bgBrightMagenta:function(e,t=""){return n.print(n.bc.brightMagenta+t+e+n.mc.resetAll)},bgBrightCyan:function(e,t=""){return n.print(n.bc.brightCyan+t+e+n.mc.resetAll)},bgBrightWhite:function(e,t=""){return n.print(n.bc.brightWhite+t+e+n.mc.resetAll)},customBgColor:function(e,t,o=""){const r=isNaN(e)?e.toString():`[48;5;${e}m`,i=isNaN(e)?e.toString():`[38;5;${e}m`;return n.print(r+i+t+n.mc.resetAll)},mc:{resetAll:"[0m[39m[49m",clearLineCursorRight:"[K",clearLine:"[2K",styleReset:"[0m",bold:"[1m",italic:"[3m",underline:"[4m",inverse:"[7m",strike:"[9m",cursorHide:"[?25l",cursorShow:"[?25h"},fc:{defaultColor:"[39m",black:"[30m",red:"[31m",green:"[32m",yellow:"[33m",blue:"[34m",magenta:"[35m",cyan:"[36m",white:"[37m",brightBlack:"[90m",brightRed:"[91m",brightGreen:"[92m",brightYellow:"[93m",brightBlue:"[94m",brightMagenta:"[95m",brightCyan:"[96m",brightWhite:"[97m",customColor:function(e){return`[38;5;${e}m`}},bc:{defaultColor:"[49m",black:"[40m",red:"[41m",green:"[42m",yellow:"[43m",blue:"[44m",magenta:"[45m",cyan:"[46m",white:"[47m",brightBlack:"[100m",brightRed:"[101m",brightGreen:"[102m",brightYellow:"[103m",brightBlue:"[104m",brightMagenta:"[105m",brightCyan:"[106m",brightWhite:"[107m",customBgColor:function(e){return`[48;5;${e}m`}}};t.term=n},45:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.printUsage=void 0;const o=n(522),r="    ",i="\n",s=(e="")=>void 0!==e&&e.length?e:void 0,l=(e,t=[],n)=>{t.length&&s(t[0].name)&&(o.term.print(o.term.mc.bold+i+e),t.forEach((e=>{o.term.print(o.term.mc.resetAll),n&&o.term.print(o.term.fc.brightWhite+o.term.mc.bold),o.term.print(`${r+e.name}`);const t=s(e.desc);t&&(o.term.print(o.term.mc.resetAll).print("\n"),o.term.print(`${r}${r}${t}`)),o.term.print(o.term.mc.resetAll).print("\n")})))};t.printUsage=(e={name:"",usage:[{name:"",desc:""}],options:[{switch:"",desc:"",type:""}],commands:[{switch:"",desc:""}],copyright:"copyright@2020",version:"0.0.1"})=>{if(l("NAME\n",[{name:e.name}]),l("USAGE\n",e.usage,!0),e.options&&e.options.length){let t=!1;e.options.forEach((e=>{e.switch.length&&(t||(t=!0,o.term.print(o.term.mc.bold+i+"OPTIONS\n"+o.term.mc.resetAll)),o.term.print(`${o.term.fc.brightWhite+o.term.mc.bold}${r+e.switch}\n`),o.term.print(`${o.term.mc.resetAll}${r}${r}${e.desc}`),e.type&&o.term.print(`${o.term.fc.cyan} [${e.type}]`),o.term.print("\n"))}))}if(e.commands&&e.commands.length){let t=!1;e.commands.forEach((e=>{e.switch.length&&(t||(t=!0,o.term.print(o.term.mc.bold+i+"COMMANDS\n"+o.term.mc.resetAll)),o.term.print(`${o.term.fc.brightWhite+o.term.mc.bold}${r+e.switch}\n`),o.term.print(`${o.term.mc.resetAll}${r}${r}${e.desc}`),o.term.print("\n"))}))}o.term.print(i),(e.version&&e.version.length||e.copyright&&e.copyright.length)&&o.term.print("== "),e.version&&e.version.length&&o.term.print(`v${e.version}`),e.copyright&&e.copyright.length&&(e.version&&e.version.length&&o.term.print(" - "),o.term.print(e.copyright)),(e.version&&e.version.length||e.copyright&&e.copyright.length)&&o.term.print(" ==\n\n")}},81:e=>{e.exports=require("child_process")},358:e=>{e.exports=require("fs")},808:e=>{e.exports=require("net")},37:e=>{e.exports=require("os")},147:e=>{e.exports=JSON.parse('{"name":"process-list-manager","version":"1.1.2","description":"Nodejs based init system called process list manager - pol","bin":{"pol":"./bin/pol.js"},"scripts":{"build":"webpack --mode production","test":"echo test missing!"},"author":"ui3o.com","license":"ISC","dependencies":{"minimist":"^1.2.8"},"devDependencies":{"@types/minimist":"^1.2.3","@types/node":"^20.7.0","ts-loader":"^9.4.4","ts-node":"^10.9.1","typescript":"^5.2.2","webpack":"^5.88.2","webpack-cli":"^5.1.4","webpack-shebang-plugin":"^1.1.8"}}')}},t={};!function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={exports:{}};return e[o].call(i.exports,i,i.exports,n),i.exports}(757)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,