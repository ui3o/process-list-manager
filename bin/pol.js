#!/usr/bin/env node

(()=>{"use strict";var e={562:e=>{function t(e){return"number"==typeof e||!!/^0x[0-9a-f]+$/i.test(e)||/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(e)}function n(e,t){return"constructor"===t&&"function"==typeof e[t]||"__proto__"===t}e.exports=function(e,o){o||(o={});var r={bools:{},strings:{},unknownFn:null};"function"==typeof o.unknown&&(r.unknownFn=o.unknown),"boolean"==typeof o.boolean&&o.boolean?r.allBools=!0:[].concat(o.boolean).filter(Boolean).forEach((function(e){r.bools[e]=!0}));var i={};function s(e){return i[e].some((function(e){return r.bools[e]}))}Object.keys(o.alias||{}).forEach((function(e){i[e]=[].concat(o.alias[e]),i[e].forEach((function(t){i[t]=[e].concat(i[e].filter((function(e){return t!==e})))}))})),[].concat(o.string).filter(Boolean).forEach((function(e){r.strings[e]=!0,i[e]&&[].concat(i[e]).forEach((function(e){r.strings[e]=!0}))}));var l=o.default||{},c={_:[]};function a(e,t,o){for(var i=e,s=0;s<t.length-1;s++){var l=t[s];if(n(i,l))return;void 0===i[l]&&(i[l]={}),i[l]!==Object.prototype&&i[l]!==Number.prototype&&i[l]!==String.prototype||(i[l]={}),i[l]===Array.prototype&&(i[l]=[]),i=i[l]}var c=t[t.length-1];n(i,c)||(i!==Object.prototype&&i!==Number.prototype&&i!==String.prototype||(i={}),i===Array.prototype&&(i=[]),void 0===i[c]||r.bools[c]||"boolean"==typeof i[c]?i[c]=o:Array.isArray(i[c])?i[c].push(o):i[c]=[i[c],o])}function p(e,n,o){if(!o||!r.unknownFn||function(e,t){return r.allBools&&/^--[^=]+$/.test(t)||r.strings[e]||r.bools[e]||i[e]}(e,o)||!1!==r.unknownFn(o)){var s=!r.strings[e]&&t(n)?Number(n):n;a(c,e.split("."),s),(i[e]||[]).forEach((function(e){a(c,e.split("."),s)}))}}Object.keys(r.bools).forEach((function(e){p(e,void 0!==l[e]&&l[e])}));var u=[];-1!==e.indexOf("--")&&(u=e.slice(e.indexOf("--")+1),e=e.slice(0,e.indexOf("--")));for(var d=0;d<e.length;d++){var g,m,f=e[d];if(/^--.+=/.test(f)){var v=f.match(/^--([^=]+)=([\s\S]*)$/);g=v[1];var h=v[2];r.bools[g]&&(h="false"!==h),p(g,h,f)}else if(/^--no-.+/.test(f))p(g=f.match(/^--no-(.+)/)[1],!1,f);else if(/^--.+/.test(f))g=f.match(/^--(.+)/)[1],void 0===(m=e[d+1])||/^(-|--)[^-]/.test(m)||r.bools[g]||r.allBools||i[g]&&s(g)?/^(true|false)$/.test(m)?(p(g,"true"===m,f),d+=1):p(g,!r.strings[g]||"",f):(p(g,m,f),d+=1);else if(/^-[^-]+/.test(f)){for(var _=f.slice(1,-1).split(""),b=!1,S=0;S<_.length;S++)if("-"!==(m=f.slice(S+2))){if(/[A-Za-z]/.test(_[S])&&"="===m[0]){p(_[S],m.slice(1),f),b=!0;break}if(/[A-Za-z]/.test(_[S])&&/-?\d+(\.\d*)?(e-?\d+)?$/.test(m)){p(_[S],m,f),b=!0;break}if(_[S+1]&&_[S+1].match(/\W/)){p(_[S],f.slice(S+2),f),b=!0;break}p(_[S],!r.strings[_[S]]||"",f)}else p(_[S],m,f);g=f.slice(-1)[0],b||"-"===g||(!e[d+1]||/^(-|--)[^-]/.test(e[d+1])||r.bools[g]||i[g]&&s(g)?e[d+1]&&/^(true|false)$/.test(e[d+1])?(p(g,"true"===e[d+1],f),d+=1):p(g,!r.strings[g]||"",f):(p(g,e[d+1],f),d+=1))}else if(r.unknownFn&&!1===r.unknownFn(f)||c._.push(r.strings._||!t(f)?f:Number(f)),o.stopEarly){c._.push.apply(c._,e.slice(d+1));break}}return Object.keys(l).forEach((function(e){var t,n,o;t=c,n=e.split("."),o=t,n.slice(0,-1).forEach((function(e){o=o[e]||{}})),n[n.length-1]in o||(a(c,e.split("."),l[e]),(i[e]||[]).forEach((function(t){a(c,t.split("."),l[e])})))})),o["--"]?c["--"]=u.slice():u.forEach((function(e){c._.push(e)})),c}},757:function(e,t,n){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.help=void 0;const r=o(n(562)),i=o(n(147)),s=n(626),l=n(45),c=(0,r.default)(process.argv.slice(2));t.help=()=>{(0,l.printUsage)({name:"pol - Process list manager.",usage:[{name:"pol [options][command]",desc:"Process list (pol) manager accepts command and options."}],options:[{desc:"show help",switch:"-h, --help",type:"boolean"}],commands:[{desc:"boot init system",switch:"boot"},{desc:"start [service|--all]",switch:"start"},{desc:"restart [service|--all]",switch:"restart"},{desc:"stop [service|--all]",switch:"stop"},{desc:"list running [none|--all]",switch:"ps"}],version:i.default.version,copyright:"copyright@2023"}),process.exit(0)},(c.h||c.help)&&(0,t.help)(),(0,s.polDaemon)(c)},685:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pol=void 0;const o=n(473),r=n(522);t.pol=new class{constructor(){this.SERVICE_STATE={READY:{name:"SERVICE_STATE_READY",state:0},UP:{name:"SERVICE_STATE_UP",state:1},DOWN:{name:"SERVICE_STATE_DOWN",state:2},STOP:{name:"SERVICE_STATE_STOP",state:3}},this.defaults={CLI_PRE_INTERVAL:50,CLI_INTERVAL:200},this.running=!1,this.srv={},this.loginService=void 0}init(e,t){return this.srv[e]=this.srv[e]?this.srv[e]:{processes:[],path:t,name:e,state:this.SERVICE_STATE.READY.state,interval:{before_onStart:void 0,after_onStart:void 0,before_onStop:void 0,after_onStop:void 0},cli:{after_onStart:{},before_onStart:{},after_onStop:{},before_onStop:{},after_onLogin:{},before_onLogin:{}},exec:{onStart:void 0,onLogin:void 0}},this.srv[e].processes=[],this.srv[e]}startRunChecker(e,t,n,o="",i,s=void 0){const l=this.srv[e].interval,c=this.srv[e].cli[`${t}_${n}`],a=n.toLowerCase().includes("start")?"start":"stop";"before_onStart"==`${t}_${n}`&&s&&(this.srv[e].startResolver=s);const p=()=>{Object.keys(c).length?(l[`${t}_${n}`]||(l[`${t}_${n}`]=setInterval(p,2e3)),i.write(`         waiting ${t} ${e} ${a} ...`)):(l[`${t}_${n}`]&&(l[`${t}_${n}`]=clearInterval(l[`${t}_${n}`]),i.write(`[${r.term.fc.green}  OK  ${r.term.mc.resetAll}] ${e} is ${o} ...`)),s&&s())};Object.keys(c).length?setTimeout(p,500):s&&s()}stopRunChecker(e,t){var n,o;const r=this.srv[e].interval;(r[`before_on${t}`]||r[`after_on${t}`])&&(r[`before_on${t}`]&&(r[`before_on${t}`]=clearInterval(r[`before_on${t}`]),this.srv[e].startResolver&&(null===(o=(n=this.srv[e]).startResolver)||void 0===o||o.call(n))),r[`after_on${t}`]&&(r[`after_on${t}`]=clearInterval(r[`after_on${t}`])))}setRunning(e){this.srv[e].running=!0}addProcess(e,t,n){this.srv[e].processes.push({procId:t,procName:n})}addCli(e,n,o,r){switch(n){case"onStart":case"onLogin":case"onStop":("onStop"===n?t.pol.isStateStop(e):this.srv[e].exec[n])?this.srv[e].cli[`after_${n}`][`${o}`]=r:this.srv[e].cli[`before_${n}`][`${o}`]=r}}addExec(e,t,n,r){switch(t){case"onStart":case"onLogin":this.srv[e].exec[t]?(0,o.msgToLog)(`not possible to execute to exe in ${t}`,"pol   ",e):this.srv[e].exec[t]=r}}delCli(e,t,n){switch(t){case"onStart":case"onStop":case"onLogin":Object.keys(this.srv[e].cli[`before_${t}`]).forEach((n=>{delete this.srv[e].cli[`before_${t}`][n]})),Object.keys(this.srv[e].cli[`after_${t}`]).forEach((n=>{delete this.srv[e].cli[`after_${t}`][n]}))}}delExec(e,t,n){switch(t){case"onStart":case"onLogin":this.srv[e].exec[t]=void 0}}setSetup(e,t){this.srv[e].setup=t}setLoginService(e){this.loginService=this.srv[e]}getLoginService(){return this.loginService}stateInit(e){this.srv[e].state=this.SERVICE_STATE.READY.state}get(e){return this.srv[e]}isStateAfterDown(e){return this.srv[e].state>=this.SERVICE_STATE.DOWN.state}isStateStop(e){return this.srv[e].state===this.SERVICE_STATE.STOP.state}setStateReady(e){this.srv[e].state=this.SERVICE_STATE.READY.state,this.srv[e].running=!1}setStateDown(e){this.srv[e].state=this.SERVICE_STATE.DOWN.state}setStateStop(e){this.srv[e].state=this.SERVICE_STATE.STOP.state}getAllRunning(){return this.getServices().filter((e=>e.running))}getAllStopped(){return this.getServices().filter((e=>!e.running))}getServices(){return Object.values(this.srv).sort(((e,t)=>e.name.toUpperCase()<t.name.toUpperCase()?-1:e.name.toUpperCase()>t.name.toUpperCase()?1:0))}getNanoSecTime(){const e=process.hrtime();return 1e9*e[0]+e[1]}}},238:function(e,t,n){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.logFile=t.cliSplitByLine=t.cliSplitByLineSync=t.log=t.TASK_INDENT=void 0;const r=n(81),i=o(n(358)),s=o(n(147)),l=n(685),c=n(473),a=n(522);function p(...e){const t=[...arguments];(0,r.spawnSync)(t.shift(),[...t],{encoding:"utf-8",stdio:"ignore"})}if(t.TASK_INDENT="        ",t.log={write:console.log,log:console.log,warn:console.warn,err:console.error,end:()=>{}},!i.default.existsSync(c.LOG_FILE_PATH)){try{i.default.accessSync(c.LOG_FILE_ROOT,i.default.constants.R_OK|i.default.constants.W_OK|i.default.constants.X_OK)}catch(e){t.log.log(`[${a.term.fc.red}REQUIRED${a.term.mc.resetAll}] Please create '/var/log/pol' folder with 'rw' access for the running user!`),process.exit(1)}p("touch",c.LOG_FILE_PATH)}const u=`${process.env.ZSH}/custom/plugins/pol`,d=`${u}/pol.plugin.${s.default.version}.version`;process.env.ZSH&&process.env.ZSH.endsWith(".oh-my-zsh")&&!i.default.existsSync(d)&&(p("mkdir","-p",`${u}`),p("touch",d),p("cp",`${__dirname}/../zsh-plugin/pol.plugin.zsh`,`${u}/pol.plugin.zsh`),p("cp",`${__dirname}/../zsh-plugin/plugin.js`,`${u}/plugin.js`),t.log.log(`[${a.term.fc.green}  INFO  ${a.term.mc.resetAll}] .oh-my-zsh custom plugin installed. Please add 'pol' to enabled plugin list in '~/.zshrc' file.`)),process.env.TZ=process.env.TZ?process.env.TZ:i.default.readFileSync("/etc/timezone").toString().split("\n")[0];const g=(e,t,n)=>{Object.defineProperty(e.cli,"noErr",{get:function(){return globalThis.service.__prop__.noErr=!0,e.cli}}),Object.defineProperty(e.cli,"splitByLine",{get:function(){return globalThis.service.__prop__.splitByLine=!0,e.cli}}),Object.defineProperty(e.cli,"splitAll",{get:function(){return globalThis.service.__prop__.splitAll=!0,e.cli}}),e.cli.gid=(t="")=>(globalThis.service.__prop__.gid=t,e.cli),e.cli.uid=(t="")=>(globalThis.service.__prop__.uid=t,e.cli),e.cli.wd=(t="")=>(globalThis.service.__prop__.cwd=t,e.cli),e.cli.eol=(t="")=>(globalThis.service.__prop__.eol=t,e.cli),e.cli.do=function(){return v([...arguments],this.serviceName)},e.toLog=function(e){(0,c.msgToLog)(e)},e.toLog=e.toLog.bind(Object.assign(Object.assign({},t),{type:n,controller:e})),e.cli.do=e.cli.do.bind(Object.assign(Object.assign({},t),{type:n,controller:e}))},m=(e,t,n)=>{Object.defineProperty(e.exec,"it",{get:function(){return globalThis.service.__prop__.it=!0,e.exec}}),e.exec.gid=(t="")=>(globalThis.service.__prop__.gid=t,e.exec),e.exec.uid=(t="")=>(globalThis.service.__prop__.uid=t,e.exec),e.exec.wd=(t="")=>(globalThis.service.__prop__.cwd=t,e.exec),e.exec.do=function(){return f([...arguments],this.serviceName)},e.exec.do=e.exec.do.bind(Object.assign(Object.assign({},t),{type:n,controller:e}))},f=(e,n)=>{var o;const i=e.shift(),s=[...e],a=l.pol.getNanoSecTime(),p=null===(o=(new Error).stack)||void 0===o?void 0:o.split("at ")[3].split(" ")[0].split(".")[1];let u=Object.assign({},globalThis.service.__prop__);globalThis.service.__prop__={};const d=Object.assign(Object.assign({},process.env),{POL_CL_ENV:`__POL_CL__${i}__${a}__EXEC__POL_CL__`});if(l.pol.isStateAfterDown(n)||l.pol.get(n).exec[p])return Promise.resolve();if(u.gid){const e=(0,t.cliSplitByLineSync)("id","-g",`${u.gid}`);u.gid=e.c?void 0:Number(e.o[0])}if(u.uid){const e=(0,t.cliSplitByLineSync)("id","-u",`${u.uid}`);u.uid=e.c?void 0:Number(e.o[0])}const g=(0,r.spawn)(i,s,{cwd:u.cwd,env:d,stdio:u.it?"inherit":void 0,gid:u.gid,uid:u.uid}),m=new Promise((e=>{var t,o;u.it||(null===(t=g.stdout)||void 0===t||t.on("data",(e=>{(0,c.msgToLog)(e,"outexe")})),null===(o=g.stderr)||void 0===o||o.on("data",(e=>{(0,c.msgToLog)(e,"errexe")}))),g.on("close",(t=>{l.pol.delExec(n,p,a),e(t)}))}));return l.pol.addExec(n,p,a,{prog:i,params:s,promise:m,options:u,timestamp:a}),m},v=(e,n)=>{var o;const i=[],s=e.shift(),c=[...e],a=l.pol.getNanoSecTime(),p=null===(o=(new Error).stack)||void 0===o?void 0:o.split("at ")[3].split(" ")[0].split(".")[1];let u=Object.assign({},globalThis.service.__prop__);globalThis.service.__prop__={};const d=Object.assign(Object.assign({},process.env),{POL_CL_ENV:`__POL_CL__${s}__${a}__CLI__POL_CL__`});if(l.pol.isStateAfterDown(n)&&"onStop"!=p)return Promise.resolve();if(u.gid){const e=(0,t.cliSplitByLineSync)("id","-g",`${u.gid}`);u.gid=e.c?void 0:Number(e.o[0])}if(u.uid){const e=(0,t.cliSplitByLineSync)("id","-u",`${u.uid}`);u.uid=e.c?void 0:Number(e.o[0])}const g=(0,r.spawn)(s,c,{cwd:u.cwd,env:d,gid:u.gid,uid:u.uid});return l.pol.addCli(n,p,a,{prog:s,params:c}),new Promise((e=>{let t="";g.stdout.on("data",(e=>{t+=e})),g.stderr.on("data",(e=>{u.noErr||(t+=e)})),g.on("close",(o=>{if(l.pol.delCli(n,p,a),u.splitAll||u.splitByLine){const n=t.split(u.eol?u.eol:"\n").filter((e=>e));u.splitByLine?e({o:n,c:o}):(n.forEach((e=>i.push(e.split(/[ \t]/)))),e({o:i,c:o}))}else e({o:t,c:o})}))}))};globalThis.service={set setup(e){var t,n;const o=Object.assign(Object.assign({},e),{serviceName:null===(n=null===(t=(new Error).stack)||void 0===t?void 0:t.split("at ")[2])||void 0===n?void 0:n.trim().split(".js:")[0].replace(/.*\//,""),ssOnStart:{cli:{},exec:{}},ssOnStop:{cli:{}},ssOnLogin:{cli:{},exec:{}}});g(o.ssOnStart,o,"start"),g(o.ssOnStop,o,"stop"),g(o.ssOnLogin,o,"login"),m(o.ssOnStart,o,"start"),m(o.ssOnLogin,o,"login"),l.pol.stateInit(o.serviceName),l.pol.setSetup(o.serviceName,o)},__prop__:{}},t.cliSplitByLineSync=function(...e){const t=[...arguments],n=(0,r.spawnSync)(t.shift(),[...t]);return{o:n.stdout.toString().split("\n").filter((e=>e)),c:n.status}},t.cliSplitByLine=function(...e){const t=[...arguments],n=(0,r.spawn)(t.shift(),[...t]);return new Promise((e=>{let t="";n.stdout.on("data",(e=>{t+=e})),n.stderr.on("data",(e=>{t+=e})),n.on("close",(n=>{const o=t.split("\n").filter((e=>e));e({o,c:n})}))}))},t.logFile={write:c.msgToLog,log:()=>{},warn:()=>{},err:()=>{},end:()=>{}},console.log=console.log.bind(global.console,t.TASK_INDENT),console.warn=console.warn.bind(global.console,t.TASK_INDENT),console.error=console.error.bind(global.console,t.TASK_INDENT),Date.prototype.ISOStrings=function(){const e=-this.getTimezoneOffset(),t=function(e){return(e<10?"0":"")+e},n=(e>=0?"+":"-")+t(Math.floor(Math.abs(e)/60))+":"+t(Math.abs(e)%60);return this.setTime(this.getTime()+60*e*1e3),this.toISOString().replace("Z",n)}},473:function(e,t,n){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.msgToLog=t.LOG_FILE_PATH=t.LOG_FILE_ROOT=void 0;const r=o(n(358));t.LOG_FILE_ROOT="/var/log/pol",t.LOG_FILE_PATH=`${t.LOG_FILE_ROOT}/pol.log`;const i=r.default.createWriteStream(t.LOG_FILE_PATH,{flags:"a"});t.msgToLog=(e,t="outlog",n)=>{const o={time:(new Date).ISOStrings(),level:t,service:n,message:e};i.write(`${JSON.stringify(o)}\n`)}},626:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{c(o.next(e))}catch(e){i(e)}}function l(e){try{c(o.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,l)}c((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.polDaemon=void 0;const i=r(n(358)),s=r(n(37)),l=n(757),c=n(685),a=n(238),p=n(302),u=n(522),d="possible options: [--all|service_name.service]",g=process.env.POL_CONFIG_FOLDER?[process.env.POL_CONFIG_FOLDER]:["/etc/pol"];g.push(`${s.default.homedir()}/.config/pol`);const m=Object.assign({},process.env);t.polDaemon=e=>o(void 0,void 0,void 0,(function*(){var t,n,r,s,f,v,h;const _=()=>o(void 0,void 0,void 0,(function*(){const e=yield(0,a.cliSplitByLine)("find",...g,"-name","*.service.js"),t=yield(0,a.cliSplitByLine)("readlink","-e",...g.map((e=>`${e}/login.service.target.js`))),n=yield(0,a.cliSplitByLine)("sh","-c",'ps aux | grep ".*node.*pol.*boot$"');c.pol.running=!(n.o.length<2),e.o.filter((e=>!e.includes("No such file or directory"))).map((e=>{var t,n;const o=null===(n=null===(t=null==e?void 0:e.split("/"))||void 0===t?void 0:t.pop())||void 0===n?void 0:n.replace(".js","");c.pol.init(o,e)}));const o=(yield(0,a.cliSplitByLine)("find","/proc","-maxdepth","2","-name","environ")).o.filter((e=>{try{return i.default.accessSync(e,i.default.constants.R_OK),!0}catch(e){return!1}}));for(const e of o)try{const t=i.default.readFileSync(e).toString();if(t.includes("__POL__")){const n=t.split("__POL_CL__")[1].split("__"),o=t.split("__POL__")[1].split("__");c.pol.setRunning(o[0]),c.pol.addProcess(o[0],e.split("/")[2],n[0])}}catch(e){}const r=require;for(const e of c.pol.getServices())r(e.path);t.o.forEach((e=>{var t,n;c.pol.setLoginService(null===(n=null===(t=null==e?void 0:e.split("/"))||void 0===t?void 0:t.pop())||void 0===n?void 0:n.replace(".js",""))}))}));yield _();const b=(e,t)=>o(void 0,void 0,void 0,(function*(){if(!e)return;if(!c.pol.getServices().some((t=>t.name===e||"--all"===e)))return void t.write(d);const n=[];return new Promise((o=>{var r,i,s;for(const o of c.pol.getServices()){if("--all"!==e&&o.name!==e)continue;let l=()=>{};const p=c.pol.get(o.name);n.push(new Promise((e=>l=e))),c.pol.stateInit(o.name);try{if(c.pol.getAllRunning().some((e=>e.name===o.name))){t.write(`[${u.term.fc.yellow} WARN ${u.term.mc.resetAll}] ${o.name} is already running ...`),l();continue}(null===(r=p.setup)||void 0===r?void 0:r.onStart)?(process.env=Object.assign(Object.assign({},m),{POL:`__POL__${o.name}__${c.pol.getNanoSecTime()}__POL__`}),t.write(`[${u.term.fc.green}  OK  ${u.term.mc.resetAll}] start ${o.name} ...`),p.setup.onStart(p.setup.ssOnStart).then((()=>{c.pol.startRunChecker(o.name,"after","onStart","started",a.logFile)})),c.pol.startRunChecker(o.name,"before","onStart","started",t,l)):l()}catch(e){t.write(`[${u.term.fc.red}FAILED${u.term.mc.resetAll}] start ${o.name} ...`),t.write(`        ${e.stack}`),null===(s=null===(i=c.pol.get(o.name))||void 0===i?void 0:i.startResolver)||void 0===s||s.call(i)}}Promise.all(n).then((()=>{o(!0)}))}))})),S=(e,t,n)=>o(void 0,void 0,void 0,(function*(){if(!c.pol.getServices().some((t=>t.name===e||"--all"===e)))return void t.write(d);if(!c.pol.getAllRunning().some((t=>t.name===e))&&"--all"!==e)return void t.write(`[${u.term.fc.yellow} WARN ${u.term.mc.resetAll}] ${e} is already stopped ...`);if("--all"===e)for(const e of c.pol.getServices())c.pol.setStateDown(e.name);else c.pol.setStateDown(e);const r=[];return new Promise((i=>o(void 0,void 0,void 0,(function*(){var s;for(const i of c.pol.getAllRunning())if("--all"===e||e===i.name){let e=()=>{},l=()=>{},p=()=>{};const d=[new Promise((e=>l=e)),new Promise((e=>p=e))],g=e=>o(void 0,void 0,void 0,(function*(){let o="";c.pol.stopRunChecker(e.name,"Start");for(const r of e.processes){let i=a.TASK_INDENT;o!==e.name&&(o=e.name,i=`[${u.term.fc.green} STOP ${u.term.mc.resetAll}]`);const s=n?["kill","-9",r.procId]:["kill",r.procId],{c:l}=yield(0,a.cliSplitByLine)(...s);0==l&&t.write(`${i} ${e.name} service with proc/pid[${r.procName}/${r.procId}] ...`)}}));r.push(new Promise((t=>e=t)));try{(null===(s=i.setup)||void 0===s?void 0:s.onStop)?(i.setup.ssOnStop.stopAll=()=>o(void 0,void 0,void 0,(function*(){yield g(i),c.pol.setStateStop(i.name),c.pol.startRunChecker(i.name,"after","onStop","stopped",t,p)})),i.setup.onStop(i.setup.ssOnStop),c.pol.startRunChecker(i.name,"before","onStop","stopped",t,l)):(l(),p(),yield g(i)),Promise.all(d).then((()=>{e(),setTimeout((()=>{c.pol.setStateReady(i.name)}))}))}catch(n){t.write(`[${u.term.fc.red}FAILED${u.term.mc.resetAll}] stop ${i.name} ...`),e()}}if("--all"===e)for(const e of c.pol.getAllStopped())t.write(`[${u.term.fc.yellow} WARN ${u.term.mc.resetAll}] ${e.name} is already stopped ...`);Promise.all(r).then((()=>{i()}))}))))}));switch(e._[0]){case"boot":if(c.pol.running&&(a.log.log("Another pol daemon is running!"),process.exit(1)),yield(0,p.serverCreate)(((e,t)=>o(void 0,void 0,void 0,(function*(){switch(e._[0]){case"stop":!e._.length||e._.length<2&&!e.all?(t.write(d),t.end()):(yield _(),yield S(e._[1]?e._[1]:e.all?"--all":null,t,e.force),t.end());break;case"start":!e._.length||e._.length<2&&!e.all?(t.write(d),t.end()):(yield _(),yield b(e._[1]?e._[1]:e.all?"--all":null,t),t.end());break;case"restart":!e._.length||e._.length<2&&!e.all?(t.write(d),t.end()):(yield _(),(yield S(e._[1]?e._[1]:e.all?"--all":null,t,e.force))&&(yield b(e._[1]?e._[1]:e.all?"--all":null,t)),t.end())}})))),yield b("--all",a.log),c.pol.getLoginService()){const e=()=>o(void 0,void 0,void 0,(function*(){yield _(),yield S("--all",a.log),(0,p.serverCleanup)()}));c.pol.isStateAfterDown(null===(t=c.pol.getLoginService())||void 0===t?void 0:t.name)?yield e():(process.env=Object.assign(Object.assign({},m),{POL:`__POL__${null===(n=c.pol.getLoginService())||void 0===n?void 0:n.name}__${c.pol.getNanoSecTime()}__POL__`}),null===(f=null===(s=null===(r=c.pol.getLoginService())||void 0===r?void 0:r.setup)||void 0===s?void 0:s.onLogin)||void 0===f||f.call(s,null===(h=null===(v=c.pol.getLoginService())||void 0===v?void 0:v.setup)||void 0===h?void 0:h.ssOnLogin).then((()=>o(void 0,void 0,void 0,(function*(){var t,n,r,i,s;(null===(t=c.pol.getLoginService())||void 0===t?void 0:t.exec.onLogin)?null===(s=null===(i=null===(r=null===(n=c.pol.getLoginService())||void 0===n?void 0:n.exec)||void 0===r?void 0:r.onLogin)||void 0===i?void 0:i.promise)||void 0===s||s.then((()=>o(void 0,void 0,void 0,(function*(){yield e()})))):yield e()})))))}break;case"completion":if("zsh"===e._[1]&&process.env.ZSH&&process.env.ZSH.endsWith(".oh-my-zsh")){const e=`${process.env.ZSH}/custom/plugins/pol`;yield(0,a.cliSplitByLine)("mkdir","-p",`${e}`),yield(0,a.cliSplitByLine)("cp",`${__dirname}/../zsh-plugin/pol.plugin.zsh`,`${e}/pol.plugin.zsh`),yield(0,a.cliSplitByLine)("cp",`${__dirname}/../zsh-plugin/plugin.js`,`${e}/plugin.js`),a.log.log(`[${u.term.fc.green}  INFO  ${u.term.mc.resetAll}] .oh-my-zsh custom plugin installed. Please add 'pol' to enabled plugin list in '~/.zshrc' file.`)}break;case"ps":let i="";for(const e of c.pol.getAllRunning())for(const t of e.processes){let n=a.TASK_INDENT;i!==e.name&&(i=e.name,n=`[${u.term.fc.green} RUN ${u.term.mc.resetAll}] `),a.log.log(n,e.name,`service with proc/pid[${t.procName}/${t.procId}] ...`)}if(e.all)for(const e of c.pol.getAllStopped())a.log.log(`[${u.term.fc.yellow} STOP ${u.term.mc.resetAll}]`,e.name,"service ...");break;case"stop":case"start":case"restart":(yield(0,p.clientCreate)()).write(JSON.stringify(e));break;default:(0,l.help)()}}))},302:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{c(o.next(e))}catch(e){i(e)}}function l(e){try{c(o.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,l)}c((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.clientCreate=t.clientCleanup=t.serverCreate=t.serverCleanup=void 0;const i=r(n(358)),s=r(n(808)),l=n(238),c=n(473),a={},p=e=>{(0,c.msgToLog)(e,"pol   ")};var u,d,g=!1;const m="/tmp/pol.sock";t.serverCleanup=()=>{if(!g&&u){if(g=!0,p("Socket server: terminating"),Object.keys(a).length){let e=Object.keys(a);for(;e.length;){let t=e.pop();a[t].end()}}u.close()}},t.serverCreate=(e=((e,t)=>o(void 0,void 0,void 0,(function*(){}))))=>o(void 0,void 0,void 0,(function*(){return p("Socket server: checking for leftover socket"),i.default.existsSync(m)?(p("Socket server: removing leftover socket."),i.default.unlinkSync(m)):p("Socket sestringrver: no leftover socket found."),process.on("exit",t.serverCleanup),function(e,t=((e,t)=>o(this,void 0,void 0,(function*(){})))){let n;return p("Socket server: creating"),new Promise((r=>{u=s.default.createServer((function(e){p("Socket server: connection acknowledged");var n=Date.now().toString();a[n]=e,e.on("end",(function(){p("Socket server: client disconnected"),delete a[n]})),e.on("data",(e=>o(this,void 0,void 0,(function*(){const o=JSON.parse(e.toString());t(o,a[n])}))))})).listen(e).on("connection",(function(e){p("Socket server: client connected"),n=e})),r()}))}(m,e)})),t.clientCleanup=()=>{!g&&d&&(g=!0,p("Socket client: Terminating."),d.end())},t.clientCreate=()=>(process.on("exit",t.clientCleanup),new Promise((e=>{d=s.default.createConnection(m).on("connect",(()=>{e(d)})).on("data",(function(e){const t=e.toString();l.log.log(t)})).on("error",(function(e){l.log.log("pol daemon not running. run `pol boot` first!"),process.exit(1)})).on("close",(function(e){}))})))},522:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.term=void 0;const n={stdout:process.stdout,print:function(e=""){return n.stdout.write(e),n},bold:function(e,t=""){return n.print(n.mc.bold+t+e+n.mc.resetAll)},italic:function(e,t=""){return n.print(n.mc.italic+t+e+n.mc.resetAll)},underline:function(e,t=""){return n.print(n.mc.underline+t+e+n.mc.resetAll)},inverse:function(e,t=""){return n.print(n.mc.inverse+t+e+n.mc.resetAll)},strike:function(e,t=""){return n.print(n.mc.strike+t+e+n.mc.resetAll)},defaultColor:function(e){return n.print(n.fc.defaultColor+e+n.mc.resetAll)},black:function(e){return n.print(n.fc.black+e+n.mc.resetAll)},red:function(e){return n.print(n.fc.red+e+n.mc.resetAll)},green:function(e){return n.print(n.fc.green+e+n.mc.resetAll)},yellow:function(e){return n.print(n.fc.yellow+e+n.mc.resetAll)},blue:function(e){return n.print(n.fc.blue+e+n.mc.resetAll)},magenta:function(e){return n.print(n.fc.magenta+e+n.mc.resetAll)},cyan:function(e){return n.print(n.fc.cyan+e+n.mc.resetAll)},white:function(e){return n.print(n.fc.white+e+n.mc.resetAll)},brightBlack:function(e){return n.print(n.fc.brightBlack+e+n.mc.resetAll)},brightRed:function(e){return n.print(n.fc.brightRed+e+n.mc.resetAll)},brightGreen:function(e){return n.print(n.fc.brightGreen+e+n.mc.resetAll)},brightYellow:function(e){return n.print(n.fc.brightYellow+e+n.mc.resetAll)},brightBlue:function(e){return n.print(n.fc.brightBlue+e+n.mc.resetAll)},brightMagenta:function(e){return n.print(n.fc.brightMagenta+e+n.mc.resetAll)},brightCyan:function(e){return n.print(n.fc.brightCyan+e+n.mc.resetAll)},brightWhite:function(e){return n.print(n.fc.brightWhite+e+n.mc.resetAll)},customColor:function(e,t){const o=isNaN(e)?e:`[38;5;${e}m`;return n.print(o+t+n.mc.resetAll)},bgDefaultColor:function(e,t=""){return n.print(n.fc.brightWhite+t+e+n.mc.resetAll)},bgBlack:function(e,t=""){return n.print(n.bc.black+t+e+n.mc.resetAll)},bgRed:function(e,t=""){return n.print(n.bc.red+t+e+n.mc.resetAll)},bgGreen:function(e,t=""){return n.print(n.bc.green+t+e+n.mc.resetAll)},bgYellow:function(e,t=""){return n.print(n.bc.yellow+t+e+n.mc.resetAll)},bgBlue:function(e,t=""){return n.print(n.bc.blue+t+e+n.mc.resetAll)},bgMagenta:function(e,t=""){return n.print(n.bc.magenta+t+e+n.mc.resetAll)},bgCyan:function(e,t=""){return n.print(n.bc.cyan+t+e+n.mc.resetAll)},bgWhite:function(e,t=""){return n.print(n.bc.white+t+e+n.mc.resetAll)},bgBrightBlack:function(e,t=""){return n.print(n.bc.brightBlack+t+e+n.mc.resetAll)},bgBrightRed:function(e,t=""){return n.print(n.bc.brightRed+t+e+n.mc.resetAll)},bgBrightGreen:function(e,t=""){return n.print(n.bc.brightGreen+t+e+n.mc.resetAll)},bgBrightYellow:function(e,t=""){return n.print(n.bc.brightYellow+t+e+n.mc.resetAll)},bgBrightBlue:function(e,t=""){return n.print(n.bc.brightBlue+t+e+n.mc.resetAll)},bgBrightMagenta:function(e,t=""){return n.print(n.bc.brightMagenta+t+e+n.mc.resetAll)},bgBrightCyan:function(e,t=""){return n.print(n.bc.brightCyan+t+e+n.mc.resetAll)},bgBrightWhite:function(e,t=""){return n.print(n.bc.brightWhite+t+e+n.mc.resetAll)},customBgColor:function(e,t,o=""){const r=isNaN(e)?e.toString():`[48;5;${e}m`,i=isNaN(e)?e.toString():`[38;5;${e}m`;return n.print(r+i+t+n.mc.resetAll)},mc:{resetAll:"[0m[39m[49m",clearLineCursorRight:"[K",clearLine:"[2K",styleReset:"[0m",bold:"[1m",italic:"[3m",underline:"[4m",inverse:"[7m",strike:"[9m",cursorHide:"[?25l",cursorShow:"[?25h"},fc:{defaultColor:"[39m",black:"[30m",red:"[31m",green:"[32m",yellow:"[33m",blue:"[34m",magenta:"[35m",cyan:"[36m",white:"[37m",brightBlack:"[90m",brightRed:"[91m",brightGreen:"[92m",brightYellow:"[93m",brightBlue:"[94m",brightMagenta:"[95m",brightCyan:"[96m",brightWhite:"[97m",customColor:function(e){return`[38;5;${e}m`}},bc:{defaultColor:"[49m",black:"[40m",red:"[41m",green:"[42m",yellow:"[43m",blue:"[44m",magenta:"[45m",cyan:"[46m",white:"[47m",brightBlack:"[100m",brightRed:"[101m",brightGreen:"[102m",brightYellow:"[103m",brightBlue:"[104m",brightMagenta:"[105m",brightCyan:"[106m",brightWhite:"[107m",customBgColor:function(e){return`[48;5;${e}m`}}};t.term=n},45:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.printUsage=void 0;const o=n(522),r="    ",i="\n",s=(e="")=>void 0!==e&&e.length?e:void 0,l=(e,t=[],n)=>{t.length&&s(t[0].name)&&(o.term.print(o.term.mc.bold+i+e),t.forEach((e=>{o.term.print(o.term.mc.resetAll),n&&o.term.print(o.term.fc.brightWhite+o.term.mc.bold),o.term.print(`${r+e.name}`);const t=s(e.desc);t&&(o.term.print(o.term.mc.resetAll).print("\n"),o.term.print(`${r}${r}${t}`)),o.term.print(o.term.mc.resetAll).print("\n")})))};t.printUsage=(e={name:"",usage:[{name:"",desc:""}],options:[{switch:"",desc:"",type:""}],commands:[{switch:"",desc:""}],copyright:"copyright@2020",version:"0.0.1"})=>{if(l("NAME\n",[{name:e.name}]),l("USAGE\n",e.usage,!0),e.options&&e.options.length){let t=!1;e.options.forEach((e=>{e.switch.length&&(t||(t=!0,o.term.print(o.term.mc.bold+i+"OPTIONS\n"+o.term.mc.resetAll)),o.term.print(`${o.term.fc.brightWhite+o.term.mc.bold}${r+e.switch}\n`),o.term.print(`${o.term.mc.resetAll}${r}${r}${e.desc}`),e.type&&o.term.print(`${o.term.fc.cyan} [${e.type}]`),o.term.print("\n"))}))}if(e.commands&&e.commands.length){let t=!1;e.commands.forEach((e=>{e.switch.length&&(t||(t=!0,o.term.print(o.term.mc.bold+i+"COMMANDS\n"+o.term.mc.resetAll)),o.term.print(`${o.term.fc.brightWhite+o.term.mc.bold}${r+e.switch}\n`),o.term.print(`${o.term.mc.resetAll}${r}${r}${e.desc}`),o.term.print("\n"))}))}o.term.print(i),(e.version&&e.version.length||e.copyright&&e.copyright.length)&&o.term.print("== "),e.version&&e.version.length&&o.term.print(`v${e.version}`),e.copyright&&e.copyright.length&&(e.version&&e.version.length&&o.term.print(" - "),o.term.print(e.copyright)),(e.version&&e.version.length||e.copyright&&e.copyright.length)&&o.term.print(" ==\n\n")}},81:e=>{e.exports=require("child_process")},358:e=>{e.exports=require("fs")},808:e=>{e.exports=require("net")},37:e=>{e.exports=require("os")},147:e=>{e.exports=JSON.parse('{"name":"process-list-manager","version":"1.1.0","description":"Nodejs based init system called process list manager - pol","bin":{"pol":"./bin/pol.js"},"scripts":{"build":"webpack --mode production","test":"echo test missing!"},"author":"ui3o.com","license":"ISC","dependencies":{"minimist":"^1.2.8"},"devDependencies":{"@types/minimist":"^1.2.3","@types/node":"^20.7.0","ts-loader":"^9.4.4","ts-node":"^10.9.1","typescript":"^5.2.2","webpack":"^5.88.2","webpack-cli":"^5.1.4","webpack-shebang-plugin":"^1.1.8"}}')}},t={};!function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={exports:{}};return e[o].call(i.exports,i,i.exports,n),i.exports}(757)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9sLmpzIiwibWFwcGluZ3MiOiJrQ0FZQSxTQUFTQSxFQUFTQyxHQUNqQixNQUFpQixpQkFBTkEsS0FDUCxpQkFBbUJDLEtBQUtELElBQ3JCLDZDQUErQ0MsS0FBS0QsRUFDNUQsQ0FFQSxTQUFTRSxFQUFxQkMsRUFBS0MsR0FDbEMsTUFBZ0IsZ0JBQVJBLEdBQTZDLG1CQUFiRCxFQUFJQyxJQUFnQyxjQUFSQSxDQUNyRSxDQUVBQyxFQUFPQyxRQUFVLFNBQVVDLEVBQU1DLEdBQzNCQSxJQUFRQSxFQUFPLENBQUMsR0FFckIsSUFBSUMsRUFBUSxDQUNYQyxNQUFPLENBQUMsRUFDUkMsUUFBUyxDQUFDLEVBQ1ZDLFVBQVcsTUFHZ0IsbUJBQWpCSixFQUFLSyxVQUNmSixFQUFNRyxVQUFZSixFQUFLSyxTQUdJLGtCQUFqQkwsRUFBS00sU0FBeUJOLEVBQUtNLFFBQzdDTCxFQUFNTSxVQUFXLEVBRWpCLEdBQUdDLE9BQU9SLEVBQUtNLFNBQVNHLE9BQU9DLFNBQVNDLFNBQVEsU0FBVWYsR0FDekRLLEVBQU1DLE1BQU1OLElBQU8sQ0FDcEIsSUFHRCxJQUFJZ0IsRUFBVSxDQUFDLEVBRWYsU0FBU0MsRUFBZWpCLEdBQ3ZCLE9BQU9nQixFQUFRaEIsR0FBS2tCLE1BQUssU0FBVXRCLEdBQ2xDLE9BQU9TLEVBQU1DLE1BQU1WLEVBQ3BCLEdBQ0QsQ0FFQXVCLE9BQU9DLEtBQUtoQixFQUFLaUIsT0FBUyxDQUFDLEdBQUdOLFNBQVEsU0FBVWYsR0FDL0NnQixFQUFRaEIsR0FBTyxHQUFHWSxPQUFPUixFQUFLaUIsTUFBTXJCLElBQ3BDZ0IsRUFBUWhCLEdBQUtlLFNBQVEsU0FBVW5CLEdBQzlCb0IsRUFBUXBCLEdBQUssQ0FBQ0ksR0FBS1ksT0FBT0ksRUFBUWhCLEdBQUthLFFBQU8sU0FBVVMsR0FDdkQsT0FBTzFCLElBQU0wQixDQUNkLElBQ0QsR0FDRCxJQUVBLEdBQUdWLE9BQU9SLEVBQUttQixRQUFRVixPQUFPQyxTQUFTQyxTQUFRLFNBQVVmLEdBQ3hESyxFQUFNRSxRQUFRUCxJQUFPLEVBQ2pCZ0IsRUFBUWhCLElBQ1gsR0FBR1ksT0FBT0ksRUFBUWhCLElBQU1lLFNBQVEsU0FBVVMsR0FDekNuQixFQUFNRSxRQUFRaUIsSUFBSyxDQUNwQixHQUVGLElBRUEsSUFBSUMsRUFBV3JCLEVBQUtzQixTQUFXLENBQUMsRUFFNUJDLEVBQU8sQ0FBRUMsRUFBRyxJQVNoQixTQUFTQyxFQUFPOUIsRUFBS3FCLEVBQU1VLEdBRTFCLElBREEsSUFBSUMsRUFBSWhDLEVBQ0NpQyxFQUFJLEVBQUdBLEVBQUlaLEVBQUthLE9BQVMsRUFBR0QsSUFBSyxDQUN6QyxJQUFJaEMsRUFBTW9CLEVBQUtZLEdBQ2YsR0FBSWxDLEVBQXFCaUMsRUFBRy9CLEdBQVEsWUFDckJrQyxJQUFYSCxFQUFFL0IsS0FBc0IrQixFQUFFL0IsR0FBTyxDQUFDLEdBRXJDK0IsRUFBRS9CLEtBQVNtQixPQUFPZ0IsV0FDZkosRUFBRS9CLEtBQVNvQyxPQUFPRCxXQUNsQkosRUFBRS9CLEtBQVNxQyxPQUFPRixZQUVyQkosRUFBRS9CLEdBQU8sQ0FBQyxHQUVQK0IsRUFBRS9CLEtBQVNzQyxNQUFNSCxZQUFhSixFQUFFL0IsR0FBTyxJQUMzQytCLEVBQUlBLEVBQUUvQixFQUNQLENBRUEsSUFBSXVDLEVBQVVuQixFQUFLQSxFQUFLYSxPQUFTLEdBQzdCbkMsRUFBcUJpQyxFQUFHUSxLQUUzQlIsSUFBTVosT0FBT2dCLFdBQ1ZKLElBQU1LLE9BQU9ELFdBQ2JKLElBQU1NLE9BQU9GLFlBRWhCSixFQUFJLENBQUMsR0FFRkEsSUFBTU8sTUFBTUgsWUFBYUosRUFBSSxTQUNkRyxJQUFmSCxFQUFFUSxJQUEwQmxDLEVBQU1DLE1BQU1pQyxJQUFrQyxrQkFBZlIsRUFBRVEsR0FDaEVSLEVBQUVRLEdBQVdULEVBQ0hRLE1BQU1FLFFBQVFULEVBQUVRLElBQzFCUixFQUFFUSxHQUFTRSxLQUFLWCxHQUVoQkMsRUFBRVEsR0FBVyxDQUFDUixFQUFFUSxHQUFVVCxHQUU1QixDQUVBLFNBQVNZLEVBQU8xQyxFQUFLMkMsRUFBS0MsR0FDekIsSUFBSUEsSUFBT3ZDLEVBQU1HLFdBNUNsQixTQUFvQlIsRUFBSzRDLEdBQ3hCLE9BQVF2QyxFQUFNTSxVQUFZLFlBQWNkLEtBQUsrQyxJQUN6Q3ZDLEVBQU1FLFFBQVFQLElBQ2RLLEVBQU1DLE1BQU1OLElBQ1pnQixFQUFRaEIsRUFDYixDQXVDZ0M2QyxDQUFXN0MsRUFBSzRDLEtBQ2pCLElBQXpCdkMsRUFBTUcsVUFBVW9DLEdBRHJCLENBSUEsSUFBSWQsR0FBU3pCLEVBQU1FLFFBQVFQLElBQVFMLEVBQVNnRCxHQUN6Q1AsT0FBT08sR0FDUEEsRUFDSGQsRUFBT0YsRUFBTTNCLEVBQUk4QyxNQUFNLEtBQU1oQixJQUU1QmQsRUFBUWhCLElBQVEsSUFBSWUsU0FBUSxTQUFVbkIsR0FDdENpQyxFQUFPRixFQUFNL0IsRUFBRWtELE1BQU0sS0FBTWhCLEVBQzVCLEdBVEEsQ0FVRCxDQUVBWCxPQUFPQyxLQUFLZixFQUFNQyxPQUFPUyxTQUFRLFNBQVVmLEdBQzFDMEMsRUFBTzFDLE9BQXVCa0MsSUFBbEJULEVBQVN6QixJQUE2QnlCLEVBQVN6QixHQUM1RCxJQUVBLElBQUkrQyxFQUFXLElBRWEsSUFBeEI1QyxFQUFLNkMsUUFBUSxRQUNoQkQsRUFBVzVDLEVBQUs4QyxNQUFNOUMsRUFBSzZDLFFBQVEsTUFBUSxHQUMzQzdDLEVBQU9BLEVBQUs4QyxNQUFNLEVBQUc5QyxFQUFLNkMsUUFBUSxRQUduQyxJQUFLLElBQUloQixFQUFJLEVBQUdBLEVBQUk3QixFQUFLOEIsT0FBUUQsSUFBSyxDQUNyQyxJQUNJaEMsRUFDQWtELEVBRkFOLEVBQU16QyxFQUFLNkIsR0FJZixHQUFJLFNBQVduQyxLQUFLK0MsR0FBTSxDQUl6QixJQUFJTyxFQUFJUCxFQUFJUSxNQUFNLHlCQUNsQnBELEVBQU1tRCxFQUFFLEdBQ1IsSUFBSXJCLEVBQVFxQixFQUFFLEdBQ1Y5QyxFQUFNQyxNQUFNTixLQUNmOEIsRUFBa0IsVUFBVkEsR0FFVFksRUFBTzFDLEVBQUs4QixFQUFPYyxFQUNwQixNQUFPLEdBQUksV0FBYS9DLEtBQUsrQyxHQUU1QkYsRUFEQTFDLEVBQU00QyxFQUFJUSxNQUFNLGNBQWMsSUFDbEIsRUFBT1IsUUFDYixHQUFJLFFBQVUvQyxLQUFLK0MsR0FDekI1QyxFQUFNNEMsRUFBSVEsTUFBTSxXQUFXLFFBR2pCbEIsS0FGVmdCLEVBQU8vQyxFQUFLNkIsRUFBSSxLQUdYLGNBQWdCbkMsS0FBS3FELElBQ3JCN0MsRUFBTUMsTUFBTU4sSUFDWkssRUFBTU0sVUFDTkssRUFBUWhCLElBQVFpQixFQUFlakIsR0FJekIsaUJBQW1CSCxLQUFLcUQsSUFDbENSLEVBQU8xQyxFQUFjLFNBQVRrRCxFQUFpQk4sR0FDN0JaLEdBQUssR0FFTFUsRUFBTzFDLEdBQUtLLEVBQU1FLFFBQVFQLElBQU8sR0FBVzRDLElBTjVDRixFQUFPMUMsRUFBS2tELEVBQU1OLEdBQ2xCWixHQUFLLFFBT0EsR0FBSSxVQUFZbkMsS0FBSytDLEdBQU0sQ0FJakMsSUFIQSxJQUFJUyxFQUFVVCxFQUFJSyxNQUFNLEdBQUksR0FBR0gsTUFBTSxJQUVqQ1EsR0FBUyxFQUNKQyxFQUFJLEVBQUdBLEVBQUlGLEVBQVFwQixPQUFRc0IsSUFHbkMsR0FBYSxPQUZiTCxFQUFPTixFQUFJSyxNQUFNTSxFQUFJLElBRXJCLENBS0EsR0FBSSxXQUFhMUQsS0FBS3dELEVBQVFFLEtBQW1CLE1BQVpMLEVBQUssR0FBWSxDQUNyRFIsRUFBT1csRUFBUUUsR0FBSUwsRUFBS0QsTUFBTSxHQUFJTCxHQUNsQ1UsR0FBUyxFQUNULEtBQ0QsQ0FFQSxHQUNDLFdBQWF6RCxLQUFLd0QsRUFBUUUsS0FDdkIsMEJBQTRCMUQsS0FBS3FELEdBQ25DLENBQ0RSLEVBQU9XLEVBQVFFLEdBQUlMLEVBQU1OLEdBQ3pCVSxHQUFTLEVBQ1QsS0FDRCxDQUVBLEdBQUlELEVBQVFFLEVBQUksSUFBTUYsRUFBUUUsRUFBSSxHQUFHSCxNQUFNLE1BQU8sQ0FDakRWLEVBQU9XLEVBQVFFLEdBQUlYLEVBQUlLLE1BQU1NLEVBQUksR0FBSVgsR0FDckNVLEdBQVMsRUFDVCxLQUNELENBQ0NaLEVBQU9XLEVBQVFFLElBQUlsRCxFQUFNRSxRQUFROEMsRUFBUUUsS0FBTSxHQUFXWCxFQXRCM0QsTUFGQ0YsRUFBT1csRUFBUUUsR0FBSUwsRUFBTU4sR0E0QjNCNUMsRUFBTTRDLEVBQUlLLE9BQU8sR0FBRyxHQUNmSyxHQUFrQixNQUFSdEQsS0FFYkcsRUFBSzZCLEVBQUksSUFDTCxjQUFnQm5DLEtBQUtNLEVBQUs2QixFQUFJLEtBQzlCM0IsRUFBTUMsTUFBTU4sSUFDWmdCLEVBQVFoQixJQUFRaUIsRUFBZWpCLEdBSXpCRyxFQUFLNkIsRUFBSSxJQUFNLGlCQUFtQm5DLEtBQUtNLEVBQUs2QixFQUFJLEtBQzFEVSxFQUFPMUMsRUFBcUIsU0FBaEJHLEVBQUs2QixFQUFJLEdBQWVZLEdBQ3BDWixHQUFLLEdBRUxVLEVBQU8xQyxHQUFLSyxFQUFNRSxRQUFRUCxJQUFPLEdBQVc0QyxJQU41Q0YsRUFBTzFDLEVBQUtHLEVBQUs2QixFQUFJLEdBQUlZLEdBQ3pCWixHQUFLLEdBUVIsTUFJQyxHQUhLM0IsRUFBTUcsWUFBc0MsSUFBekJILEVBQU1HLFVBQVVvQyxJQUN2Q2pCLEVBQUtDLEVBQUVhLEtBQUtwQyxFQUFNRSxRQUFRcUIsSUFBTWpDLEVBQVNpRCxHQUFPQSxFQUFNUixPQUFPUSxJQUUxRHhDLEVBQUtvRCxVQUFXLENBQ25CN0IsRUFBS0MsRUFBRWEsS0FBS2dCLE1BQU05QixFQUFLQyxFQUFHekIsRUFBSzhDLE1BQU1qQixFQUFJLElBQ3pDLEtBQ0QsQ0FFRixDQW9CQSxPQWxCQWIsT0FBT0MsS0FBS0ssR0FBVVYsU0FBUSxTQUFVUyxHQWpQekMsSUFBZ0J6QixFQUFLcUIsRUFDaEJXLEVBRFdoQyxFQWtQRjRCLEVBbFBPUCxFQWtQREksRUFBRXNCLE1BQU0sS0FqUHZCZixFQUFJaEMsRUFDUnFCLEVBQUs2QixNQUFNLEdBQUksR0FBR2xDLFNBQVEsU0FBVWYsR0FDbkMrQixFQUFJQSxFQUFFL0IsSUFBUSxDQUFDLENBQ2hCLElBRVVvQixFQUFLQSxFQUFLYSxPQUFTLEtBQ2ZGLElBNE9aRixFQUFPRixFQUFNSCxFQUFFc0IsTUFBTSxLQUFNckIsRUFBU0QsS0FFbkNSLEVBQVFRLElBQU0sSUFBSVQsU0FBUSxTQUFVbkIsR0FDcENpQyxFQUFPRixFQUFNL0IsRUFBRWtELE1BQU0sS0FBTXJCLEVBQVNELEdBQ3JDLElBRUYsSUFFSXBCLEVBQUssTUFDUnVCLEVBQUssTUFBUW9CLEVBQVNFLFFBRXRCRixFQUFTaEMsU0FBUSxTQUFVUyxHQUMxQkcsRUFBS0MsRUFBRWEsS0FBS2pCLEVBQ2IsSUFHTUcsQ0FDUixDLHlLQ3JRQSxrQkFDQSxZQUNBLFNBQ0EsUUFDTUEsR0FBTSxhQUFTK0IsUUFBUS9CLEtBQUtzQixNQUFNLElBRTNCLEVBQUFVLEtBQU8sTUFDaEIsSUFBQUMsWUFBVyxDQUNQQyxLQUFNLDhCQUNOQyxNQUFPLENBQ0gsQ0FBRUQsS0FBTSx5QkFBMEJFLEtBQU0sNERBRTVDQyxRQUFTLENBQ0wsQ0FBRUQsS0FBTSxZQUFhRSxPQUFRLGFBQWNDLEtBQU0sWUFFckRDLFNBQVUsQ0FDTixDQUFFSixLQUFNLG1CQUFvQkUsT0FBUSxRQUNwQyxDQUFFRixLQUFNLHdCQUF5QkUsT0FBUSxTQUN6QyxDQUFFRixLQUFNLDBCQUEyQkUsT0FBUSxXQUMzQyxDQUFFRixLQUFNLHVCQUF3QkUsT0FBUSxRQUN4QyxDQUFFRixLQUFNLDRCQUE2QkUsT0FBUSxPQUVqREcsUUFBUyxVQUFZQSxRQUNyQkMsVUFBVyxtQkFFZlgsUUFBUVksS0FBSyxFQUFFLEdBRWYzQyxFQUFLNEMsR0FBSzVDLEVBQUtnQyxRQUNmLElBQUFBLFNBR0osSUFBQWEsV0FBVTdDLEUsOEVDL0JWLGVBQ0EsU0FxVmEsRUFBQThDLElBQU0sSUFoT25CLE1BbUJJLFdBQUFDLEdBakJRLEtBQUFDLGNBQWdCLENBQ3BCQyxNQUFPLENBQUVmLEtBQU0sc0JBQXVCZ0IsTUFBTyxHQUM3Q0MsR0FBSSxDQUFFakIsS0FBTSxtQkFBb0JnQixNQUFPLEdBQ3ZDRSxLQUFNLENBQUVsQixLQUFNLHFCQUFzQmdCLE1BQU8sR0FDM0NHLEtBQU0sQ0FBRW5CLEtBQU0scUJBQXNCZ0IsTUFBTyxJQUd2QyxLQUFBcEQsU0FBVyxDQUNmd0QsaUJBQWtCLEdBQ2xCQyxhQUFjLEtBSVgsS0FBQUMsU0FBVSxFQUNULEtBQUFDLElBQW9CLENBQUMsRUFDckIsS0FBQUMsa0JBQXdDbkQsQ0FFaEMsQ0FFVCxJQUFBb0QsQ0FBS0MsRUFBcUJDLEdBMEI3QixPQXpCQUMsS0FBS0wsSUFBSUcsR0FBZUUsS0FBS0wsSUFBSUcsR0FBZUUsS0FBS0wsSUFBSUcsR0FBZSxDQUNwRUcsVUFBVyxHQUNYRixPQUNBM0IsS0FBTTBCLEVBQ05WLE1BQU9ZLEtBQUtkLGNBQWNDLE1BQU1DLE1BQ2hDYyxTQUFVLENBQ05DLG9CQUFnQjFELEVBQ2hCMkQsbUJBQWUzRCxFQUNmNEQsbUJBQWU1RCxFQUNmNkQsa0JBQWM3RCxHQUVsQjhELElBQUssQ0FDREgsY0FBZSxDQUFDLEVBQ2hCRCxlQUFnQixDQUFDLEVBQ2pCRyxhQUFjLENBQUMsRUFDZkQsY0FBZSxDQUFDLEVBQ2hCRyxjQUFlLENBQUMsRUFDaEJDLGVBQWdCLENBQUMsR0FFckJDLEtBQU0sQ0FDRkMsYUFBU2xFLEVBQ1RtRSxhQUFTbkUsSUFHakJ1RCxLQUFLTCxJQUFJRyxHQUFhRyxVQUFZLEdBQzNCRCxLQUFLTCxJQUFJRyxFQUNwQixDQUdBLGVBQUFlLENBQWdCZixFQUFxQmdCLEVBQWtDMUIsRUFBNkIyQixFQUFNLEdBQUlDLEVBQWlDQyxPQUF1Q3hFLEdBQ2xMLE1BQU15RCxFQUFXRixLQUFLTCxJQUFJRyxHQUFhSSxTQUNqQ0ssRUFBTVAsS0FBS0wsSUFBSUcsR0FBYVMsSUFBSSxHQUFHTyxLQUFnQjFCLEtBQ25EOEIsRUFBVzlCLEVBQU0rQixjQUFjQyxTQUFTLFNBQVcsUUFBVSxPQUVoQyxrQkFBL0IsR0FBR04sS0FBZ0IxQixLQUFnQzZCLElBQ25EakIsS0FBS0wsSUFBSUcsR0FBYXVCLGNBQWdCSixHQUUxQyxNQUFNSyxFQUFhLEtBQ1g1RixPQUFPQyxLQUFLNEUsR0FBSy9ELFFBQ1owRCxFQUFTLEdBQUdZLEtBQWdCMUIsT0FDN0JjLEVBQVMsR0FBR1ksS0FBZ0IxQixLQUFXbUMsWUFBWUQsRUFBWSxNQUVuRU4sRUFBT1EsTUFBTSxvQkFBb0JWLEtBQWdCaEIsS0FBZW9CLFdBRTVEaEIsRUFBUyxHQUFHWSxLQUFnQjFCLE9BQzVCYyxFQUFTLEdBQUdZLEtBQWdCMUIsS0FBV3FDLGNBQWN2QixFQUFTLEdBQUdZLEtBQWdCMUIsTUFDakY0QixFQUFPUSxNQUFNLElBQUksRUFBQUUsS0FBS0MsR0FBR0MsY0FBYyxFQUFBRixLQUFLRyxHQUFHQyxhQUFhaEMsUUFBa0JpQixVQUU5RUUsR0FBVUEsSSxFQUlsQnZGLE9BQU9DLEtBQUs0RSxHQUFLL0QsT0FDakJ1RixXQUFXVCxFQUFZLEtBRW5CTCxHQUFVQSxHQUV0QixDQUVBLGNBQUFlLENBQWVsQyxFQUFxQm1DLEcsUUFDaEMsTUFBTS9CLEVBQVdGLEtBQUtMLElBQUlHLEdBQWFJLFVBRW5DQSxFQUFTLFlBQVkrQixNQUFZL0IsRUFBUyxXQUFXK0IsUUFFakQvQixFQUFTLFlBQVkrQixPQUNyQi9CLEVBQVMsWUFBWStCLEtBQVdSLGNBQWN2QixFQUFTLFlBQVkrQixNQUMvRGpDLEtBQUtMLElBQUlHLEdBQWF1QixnQkFBa0QsUUFBbkMsS0FBQXJCLEtBQUtMLElBQUlHLElBQWF1QixxQkFBYSxtQkFFNUVuQixFQUFTLFdBQVcrQixPQUNwQi9CLEVBQVMsV0FBVytCLEtBQVdSLGNBQWN2QixFQUFTLFdBQVcrQixPQUc3RSxDQUVBLFVBQUFDLENBQVdwQyxHQUNQRSxLQUFLTCxJQUFJRyxHQUFhSixTQUFVLENBQ3BDLENBR0EsVUFBQXlDLENBQVdyQyxFQUFxQnNDLEVBQWdCQyxHQUM1Q3JDLEtBQUtMLElBQUlHLEdBQWFHLFVBQVVqRCxLQUFLLENBQUVvRixTQUFRQyxZQUNuRCxDQUVBLE1BQUFDLENBQU94QyxFQUFxQnlDLEVBQWtCQyxFQUFtQkMsR0FDN0QsT0FBUUYsR0FDSixJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDMEIsV0FBYkEsRUFBd0IsRUFBQXZELElBQUkwRCxZQUFZNUMsR0FBZUUsS0FBS0wsSUFBSUcsR0FBYVksS0FBSzZCLElBRTVGdkMsS0FBS0wsSUFBSUcsR0FBYVMsSUFBSSxTQUFTZ0MsS0FBWSxHQUFHQyxLQUFlQyxFQUVqRXpDLEtBQUtMLElBQUlHLEdBQWFTLElBQUksVUFBVWdDLEtBQVksR0FBR0MsS0FBZUMsRUFJbEYsQ0FFQSxPQUFBRSxDQUFRN0MsRUFBcUJ5QyxFQUFrQkMsRUFBbUJDLEdBQzlELE9BQVFGLEdBQ0osSUFBSyxVQUNMLElBQUssVUFDR3ZDLEtBQUtMLElBQUlHLEdBQWFZLEtBQUs2QixJQUMzQixJQUFBSyxVQUFTLHFDQUFxQ0wsSUFBWSxTQUFVekMsR0FFcEVFLEtBQUtMLElBQUlHLEdBQWFZLEtBQUs2QixHQUFZRSxFQUd2RCxDQUVBLE1BQUFJLENBQU8vQyxFQUFxQnlDLEVBQWtCQyxHQUMxQyxPQUFRRCxHQUNKLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxVQUNEN0csT0FBT0MsS0FBS3FFLEtBQUtMLElBQUlHLEdBQWFTLElBQUksVUFBVWdDLE1BQWFqSCxTQUFRUyxXQUMxRGlFLEtBQUtMLElBQUlHLEdBQWFTLElBQUksVUFBVWdDLEtBQVl4RyxFQUFFLElBRTdETCxPQUFPQyxLQUFLcUUsS0FBS0wsSUFBSUcsR0FBYVMsSUFBSSxTQUFTZ0MsTUFBYWpILFNBQVFTLFdBQ3pEaUUsS0FBS0wsSUFBSUcsR0FBYVMsSUFBSSxTQUFTZ0MsS0FBWXhHLEVBQUUsSUFJeEUsQ0FFQSxPQUFBK0csQ0FBUWhELEVBQXFCeUMsRUFBa0JDLEdBQzNDLE9BQVFELEdBQ0osSUFBSyxVQUNMLElBQUssVUFDRHZDLEtBQUtMLElBQUlHLEdBQWFZLEtBQUs2QixRQUFZOUYsRUFHbkQsQ0FFQSxRQUFBc0csQ0FBU2pELEVBQXFCa0QsR0FDMUJoRCxLQUFLTCxJQUFJRyxHQUFha0QsTUFBUUEsQ0FDbEMsQ0FFQSxlQUFBQyxDQUFnQm5ELEdBQ1pFLEtBQUtKLGFBQWVJLEtBQUtMLElBQUlHLEVBQ2pDLENBRUEsZUFBQW9ELEdBQ0ksT0FBT2xELEtBQUtKLFlBQ2hCLENBRUEsU0FBQXVELENBQVVyRCxHQUNORSxLQUFLTCxJQUFJRyxHQUFhVixNQUFRWSxLQUFLZCxjQUFjQyxNQUFNQyxLQUMzRCxDQUVBLEdBQUFnRSxDQUFJdEQsR0FDQSxPQUFPRSxLQUFLTCxJQUFJRyxFQUNwQixDQUVBLGdCQUFBdUQsQ0FBaUJ2RCxHQUNiLE9BQU9FLEtBQUtMLElBQUlHLEdBQWFWLE9BQVNZLEtBQUtkLGNBQWNJLEtBQUtGLEtBQ2xFLENBRUEsV0FBQXNELENBQVk1QyxHQUNSLE9BQU9FLEtBQUtMLElBQUlHLEdBQWFWLFFBQVVZLEtBQUtkLGNBQWNLLEtBQUtILEtBQ25FLENBR0EsYUFBQWtFLENBQWN4RCxHQUNWRSxLQUFLTCxJQUFJRyxHQUFhVixNQUFRWSxLQUFLZCxjQUFjQyxNQUFNQyxNQUN2RFksS0FBS0wsSUFBSUcsR0FBYUosU0FBVSxDQUVwQyxDQUdBLFlBQUE2RCxDQUFhekQsR0FDVEUsS0FBS0wsSUFBSUcsR0FBYVYsTUFBUVksS0FBS2QsY0FBY0ksS0FBS0YsS0FDMUQsQ0FFQSxZQUFBb0UsQ0FBYTFELEdBQ1RFLEtBQUtMLElBQUlHLEdBQWFWLE1BQVFZLEtBQUtkLGNBQWNLLEtBQUtILEtBQzFELENBRUEsYUFBQXFFLEdBQ0ksT0FBT3pELEtBQUswRCxjQUFjdEksUUFBT3VJLEdBQUtBLEVBQUVqRSxTQUM1QyxDQUVBLGFBQUFrRSxHQUNJLE9BQU81RCxLQUFLMEQsY0FBY3RJLFFBQU91SSxJQUFNQSxFQUFFakUsU0FDN0MsQ0FFQSxXQUFBZ0UsR0FDSSxPQUFPaEksT0FBT21JLE9BQU83RCxLQUFLTCxLQUFLbUUsTUFBSyxDQUFDQyxFQUFHQyxJQUNoQ0QsRUFBRTNGLEtBQUs2RixjQUFnQkQsRUFBRTVGLEtBQUs2RixlQUF1QixFQUNyREYsRUFBRTNGLEtBQUs2RixjQUFnQkQsRUFBRTVGLEtBQUs2RixjQUFzQixFQUNqRCxHQUVmLENBRUEsY0FBQUMsR0FDSSxNQUFNQyxFQUFTbEcsUUFBUW1HLFNBQ3ZCLE9BQW1CLElBQVpELEVBQU8sR0FBa0JBLEVBQU8sRUFDM0MsRSxzT0NsVkosY0FDQSxZQUNBLFlBQ0EsU0FDQSxTQUNBLFNBZUEsU0FBUzVELEtBQU83RixHQUNaLE1BQU0ySixFQUFNLElBQUlDLFlBQ2hCLElBQUFDLFdBQVVGLEVBQUlHLFFBQVMsSUFBSUgsR0FBTSxDQUFFSSxTQUFVLFFBQVNDLE1BQU8sVUFDakUsQ0FDQSxHQWZhLEVBQUFDLFlBQWMsV0FDZCxFQUFBQyxJQUFrQixDQUMzQnBELE1BQU9xRCxRQUFRRCxJQUNmQSxJQUFLQyxRQUFRRCxJQUNiRSxLQUFNRCxRQUFRQyxLQUNkQyxJQUFLRixRQUFRRyxNQUNiQyxJQUFLLFNBU0osVUFBR0MsV0FBVyxFQUFBQyxlQUFnQixDQUMvQixJQUNJLFVBQUdDLFdBQVcsRUFBQUMsY0FBZSxVQUFHQyxVQUFVQyxLQUFPLFVBQUdELFVBQVVFLEtBQU8sVUFBR0YsVUFBVUcsSyxDQUNwRixNQUFPVCxHQUNMLEVBQUFKLElBQUlBLElBQUksSUFBSSxFQUFBbEQsS0FBS0MsR0FBRytELGNBQWMsRUFBQWhFLEtBQUtHLEdBQUdDLHdGQUMxQzdELFFBQVFZLEtBQUssRSxDQUVqQjBCLEVBQUksUUFBUyxFQUFBNEUsYyxDQUlqQixNQUFNUSxFQUFrQixHQUFHMUgsUUFBUTJILElBQUlDLHlCQUNqQ0MsRUFBbUIsR0FBR0gsZ0JBQThCLFVBQVloSCxrQkFDbEVWLFFBQVEySCxJQUFJQyxLQUFPNUgsUUFBUTJILElBQUlDLElBQUlFLFNBQVMsZ0JBQWtCLFVBQUdiLFdBQVdZLEtBQzVFdkYsRUFBSSxRQUFTLEtBQU0sR0FBR29GLEtBQ3RCcEYsRUFBSSxRQUFTdUYsR0FDYnZGLEVBQUksS0FBTSxHQUFHeUYseUNBQTBDLEdBQUdMLG9CQUMxRHBGLEVBQUksS0FBTSxHQUFHeUYsb0NBQXFDLEdBQUdMLGVBQ3JELEVBQUFmLElBQUlBLElBQUksSUFBSSxFQUFBbEQsS0FBS0MsR0FBR0MsZ0JBQWdCLEVBQUFGLEtBQUtHLEdBQUdDLDhHQUloRDdELFFBQVEySCxJQUFJSyxHQUFLaEksUUFBUTJILElBQUlLLEdBQUtoSSxRQUFRMkgsSUFBSUssR0FBSyxVQUFHQyxhQUFhLGlCQUFpQkMsV0FBVzlJLE1BQU0sTUFBTSxHQUkzRyxNQUFNK0ksRUFBZSxDQUFDQyxFQUE4Q0MsRUFBaUI3SCxLQUNqRi9DLE9BQU82SyxlQUFlRixFQUFXOUYsSUFBSyxRQUFTLENBQzNDNkMsSUFBSyxXQUF3RCxPQUExQ29ELFdBQVdDLFFBQVFDLFNBQVNDLE9BQVEsRUFBYU4sRUFBVzlGLEdBQUssSUFFeEY3RSxPQUFPNkssZUFBZUYsRUFBVzlGLElBQUssY0FBZSxDQUNqRDZDLElBQUssV0FBOEQsT0FBaERvRCxXQUFXQyxRQUFRQyxTQUFTRSxhQUFjLEVBQWFQLEVBQVc5RixHQUFLLElBRTlGN0UsT0FBTzZLLGVBQWVGLEVBQVc5RixJQUFLLFdBQVksQ0FDOUM2QyxJQUFLLFdBQTJELE9BQTdDb0QsV0FBV0MsUUFBUUMsU0FBU0csVUFBVyxFQUFhUixFQUFXOUYsR0FBSyxJQUUzRjhGLEVBQVc5RixJQUFJdUcsSUFBTSxDQUFDQSxFQUFNLE1BQVNOLFdBQVdDLFFBQVFDLFNBQVNJLElBQU1BLEVBQVlULEVBQVc5RixLQUM5RjhGLEVBQVc5RixJQUFJd0csSUFBTSxDQUFDQSxFQUFNLE1BQVNQLFdBQVdDLFFBQVFDLFNBQVNLLElBQU1BLEVBQVlWLEVBQVc5RixLQUM5RjhGLEVBQVc5RixJQUFJeUcsR0FBSyxDQUFDQSxFQUFLLE1BQVNSLFdBQVdDLFFBQVFDLFNBQVNPLElBQU1ELEVBQVdYLEVBQVc5RixLQUMzRjhGLEVBQVc5RixJQUFJMkcsSUFBTSxDQUFDQSxFQUFNLE1BQVNWLFdBQVdDLFFBQVFDLFNBQVNRLElBQU1BLEVBQVliLEVBQVc5RixLQUM5RjhGLEVBQVc5RixJQUFJNEcsR0FBSyxXQUNoQixPQUFPQyxFQUFNLElBQUk5QyxXQUFhdEUsS0FBbUJGLFlBQ3JELEVBQ0F1RyxFQUFXZ0IsTUFBUSxTQUFVQyxJQUN6QixJQUFBMUUsVUFBUzBFLEVBQ2IsRUFFQWpCLEVBQVdnQixNQUFRaEIsRUFBV2dCLE1BQU1FLEtBQUssT0FBRCx3QkFBTWpCLEdBQVUsQ0FBRTdILE9BQU00SCxnQkFDaEVBLEVBQVc5RixJQUFJNEcsR0FBS2QsRUFBVzlGLElBQUk0RyxHQUFHSSxLQUFLLE9BQUQsd0JBQU1qQixHQUFVLENBQUU3SCxPQUFNNEgsZUFBYSxFQUk3RW1CLEVBQWdCLENBQUNuQixFQUE2QkMsRUFBaUI3SCxLQUNqRS9DLE9BQU82SyxlQUFlRixFQUFXM0YsS0FBTSxLQUFNLENBQ3pDMEMsSUFBSyxXQUFxRCxPQUF2Q29ELFdBQVdDLFFBQVFDLFNBQVNlLElBQUssRUFBYXBCLEVBQVczRixJQUFNLElBR3RGMkYsRUFBVzNGLEtBQUtvRyxJQUFNLENBQUNBLEVBQU0sTUFBU04sV0FBV0MsUUFBUUMsU0FBU0ksSUFBTUEsRUFBWVQsRUFBVzNGLE1BQy9GMkYsRUFBVzNGLEtBQUtxRyxJQUFNLENBQUNBLEVBQU0sTUFBU1AsV0FBV0MsUUFBUUMsU0FBU0ssSUFBTUEsRUFBWVYsRUFBVzNGLE1BQy9GMkYsRUFBVzNGLEtBQUtzRyxHQUFLLENBQUNBLEVBQUssTUFBU1IsV0FBV0MsUUFBUUMsU0FBU08sSUFBTUQsRUFBV1gsRUFBVzNGLE1BQzVGMkYsRUFBVzNGLEtBQUt5RyxHQUFLLFdBQ2pCLE9BQU9PLEVBQU8sSUFBSXBELFdBQWF0RSxLQUFtQkYsWUFDdEQsRUFFQXVHLEVBQVczRixLQUFLeUcsR0FBS2QsRUFBVzNGLEtBQUt5RyxHQUFHSSxLQUFLLE9BQUQsd0JBQU1qQixHQUFVLENBQUU3SCxPQUFNNEgsZUFBYSxFQUcvRXFCLEVBQVMsQ0FBQ3JELEVBQWV2RSxLLE1BQzNCLE1BQU02SCxFQUFPdEQsRUFBSUcsUUFDWG9ELEVBQVMsSUFBSXZELEdBQ2I3QixFQUFZLEVBQUF4RCxJQUFJa0YsaUJBQ2hCM0IsRUFBNEIsUUFBakIsT0FBSXNGLE9BQVFDLGFBQUssZUFBRXpLLE1BQU0sT0FBTyxHQUFHQSxNQUFNLEtBQUssR0FBR0EsTUFBTSxLQUFLLEdBQzdFLElBQUlrQixFQUFVLE9BQUgsVUFBUWlJLFdBQVdDLFFBQVFDLFVBQ3RDRixXQUFXQyxRQUFRQyxTQUFXLENBQUMsRUFDL0IsTUFBTWQsRUFBTSxPQUFILHdCQUNGM0gsUUFBUTJILEtBQUcsQ0FDZG1DLFdBQVksYUFBYUosTUFBU25GLHNCQUl0QyxHQUFJLEVBQUF4RCxJQUFJcUUsaUJBQWlCdkQsSUFBZ0IsRUFBQWQsSUFBSW9FLElBQUl0RCxHQUFhWSxLQUFLNkIsR0FDL0QsT0FBT3lGLFFBQVFDLFVBRW5CLEdBQUkxSixFQUFRdUksSUFBSyxDQUNiLE1BQU1BLEdBQU0sSUFBQW9CLG9CQUFtQixLQUFNLEtBQU0sR0FBRzNKLEVBQVF1SSxPQUN0RHZJLEVBQVF1SSxJQUFPQSxFQUFJcUIsT0FBdUIxTCxFQUFuQkUsT0FBT21LLEVBQUl4SyxFQUFFLEcsQ0FHeEMsR0FBSWlDLEVBQVF3SSxJQUFLLENBQ2IsTUFBTUEsR0FBTSxJQUFBbUIsb0JBQW1CLEtBQU0sS0FBTSxHQUFHM0osRUFBUXdJLE9BQ3REeEksRUFBUXdJLElBQU9BLEVBQUlvQixPQUF1QjFMLEVBQW5CRSxPQUFPb0ssRUFBSXpLLEVBQUUsRyxDQUd4QyxNQUFNOEwsR0FBVyxJQUFBM0YsT0FBTWtGLEVBQU9DLEVBQVEsQ0FBRVgsSUFBSzFJLEVBQVEwSSxJQUFLckIsTUFBS2xCLE1BQU9uRyxFQUFRa0osR0FBSyxlQUFZaEwsRUFBV3FLLElBQUt2SSxFQUFRdUksSUFBS0MsSUFBS3hJLEVBQVF3SSxNQUNuSXNCLEVBQVUsSUFBSUwsU0FBUU0sSSxRQUNuQi9KLEVBQVFrSixLQUNNLFFBQWYsRUFBQVcsRUFBU0csY0FBTSxTQUFFQyxHQUFHLFFBQVFDLEtBQ3hCLElBQUE3RixVQUFTNkYsRUFBTSxTQUFTLElBRWIsUUFBZixFQUFBTCxFQUFTTSxjQUFNLFNBQUVGLEdBQUcsUUFBUUMsS0FDeEIsSUFBQTdGLFVBQVM2RixFQUFNLFNBQVMsS0FHaENMLEVBQVNJLEdBQUcsU0FBVUwsSUFDbEIsRUFBQW5KLElBQUk4RCxRQUFRaEQsRUFBYXlDLEVBQVdDLEdBQ3BDOEYsRUFBSUgsRUFBRSxHQUNSLElBR04sT0FEQSxFQUFBbkosSUFBSTJELFFBQVE3QyxFQUFheUMsRUFBV0MsRUFBVyxDQUFFbUYsT0FBTUMsU0FBUVMsVUFBUzlKLFVBQVNpRSxjQUMxRTZGLENBQU8sRUFHWmpCLEVBQVEsQ0FBQy9DLEVBQWV2RSxLLE1BQzFCLE1BQU02SSxFQUFvQixHQUNwQmhCLEVBQU90RCxFQUFJRyxRQUNYb0QsRUFBUyxJQUFJdkQsR0FDYjdCLEVBQVksRUFBQXhELElBQUlrRixpQkFDaEIzQixFQUE0QixRQUFqQixPQUFJc0YsT0FBUUMsYUFBSyxlQUFFekssTUFBTSxPQUFPLEdBQUdBLE1BQU0sS0FBSyxHQUFHQSxNQUFNLEtBQUssR0FDN0UsSUFBSWtCLEVBQVUsT0FBSCxVQUFRaUksV0FBV0MsUUFBUUMsVUFDdENGLFdBQVdDLFFBQVFDLFNBQVcsQ0FBQyxFQUMvQixNQUFNZCxFQUFNLE9BQUgsd0JBQ0YzSCxRQUFRMkgsS0FBRyxDQUNkbUMsV0FBWSxhQUFhSixNQUFTbkYscUJBRXRDLEdBQUksRUFBQXhELElBQUlxRSxpQkFBaUJ2RCxJQUE0QixVQUFaeUMsRUFDckMsT0FBT3lGLFFBQVFDLFVBRW5CLEdBQUkxSixFQUFRdUksSUFBSyxDQUNiLE1BQU1BLEdBQU0sSUFBQW9CLG9CQUFtQixLQUFNLEtBQU0sR0FBRzNKLEVBQVF1SSxPQUN0RHZJLEVBQVF1SSxJQUFPQSxFQUFJcUIsT0FBdUIxTCxFQUFuQkUsT0FBT21LLEVBQUl4SyxFQUFFLEcsQ0FHeEMsR0FBSWlDLEVBQVF3SSxJQUFLLENBQ2IsTUFBTUEsR0FBTSxJQUFBbUIsb0JBQW1CLEtBQU0sS0FBTSxHQUFHM0osRUFBUXdJLE9BQ3REeEksRUFBUXdJLElBQU9BLEVBQUlvQixPQUF1QjFMLEVBQW5CRSxPQUFPb0ssRUFBSXpLLEVBQUUsRyxDQUd4QyxNQUFNOEwsR0FBVyxJQUFBM0YsT0FBTWtGLEVBQU9DLEVBQVEsQ0FBRVgsSUFBSzFJLEVBQVEwSSxJQUFLckIsTUFBS2tCLElBQUt2SSxFQUFRdUksSUFBS0MsSUFBS3hJLEVBQVF3SSxNQUc5RixPQURBLEVBQUEvSCxJQUFJc0QsT0FBT3hDLEVBQWF5QyxFQUFXQyxFQUFXLENBQUVtRixPQUFNQyxXQUMvQyxJQUFJSSxTQUFRTSxJQUNmLElBQUlNLEVBQU8sR0FDWFIsRUFBU0csT0FBT0MsR0FBRyxRQUFRQyxJQUN2QkcsR0FBUUgsQ0FBSSxJQUVoQkwsRUFBU00sT0FBT0YsR0FBRyxRQUFRQyxJQUNsQmxLLEVBQVFvSSxRQUFPaUMsR0FBUUgsRUFBSSxJQUdwQ0wsRUFBU0ksR0FBRyxTQUFVTCxJQUdsQixHQURBLEVBQUFuSixJQUFJNkQsT0FBTy9DLEVBQWF5QyxFQUFXQyxHQUMvQmpFLEVBQVFzSSxVQUFZdEksRUFBUXFJLFlBQWEsQ0FDekMsTUFBTWlDLEVBQVNELEVBQUt2TCxNQUFNa0IsRUFBUTJJLElBQU0zSSxFQUFRMkksSUFBTSxNQUFNOUwsUUFBTzBOLEdBQUtBLElBQ3BFdkssRUFBUXFJLFlBQWEwQixFQUFJLENBQUVoTSxFQUFHdU0sRUFBUVYsT0FFdENVLEVBQU92TixTQUFRd04sR0FBS0gsRUFBTTNMLEtBQUs4TCxFQUFFekwsTUFBTSxZQUN2Q2lMLEVBQUksQ0FBRWhNLEVBQUdxTSxFQUFPUixNLE1BSXBCRyxFQUFJLENBQUVoTSxFQUFHc00sRUFBTVQsS0FBSSxHQUN6QixHQUNKLEVBWU4zQixXQUFXQyxRQUFVLENBQ2pCLFNBQUl6RCxDQUFNQSxHLFFBQ04sTUFBTStGLEVBQU0sK0JBQ0wvRixHQUFLLENBQ1JsRCxZQUFpRCxRQUFuQyxFQUFpQixRQUFqQixPQUFJK0gsT0FBUUMsYUFBSyxlQUFFekssTUFBTSxPQUFPLFVBQUcsZUFBRTJMLE9BQU8zTCxNQUFNLFFBQVEsR0FBRzRMLFFBQVEsT0FBUSxJQUMzRkMsVUFBVyxDQUNQM0ksSUFBSyxDQUFDLEVBQ05HLEtBQU0sQ0FBQyxHQUVYeUksU0FBVSxDQUNONUksSUFBSyxDQUFDLEdBRVY2SSxVQUFXLENBQ1A3SSxJQUFLLENBQUMsRUFDTkcsS0FBTSxDQUFDLEtBSWYwRixFQUFhMkMsRUFBT0csVUFBV0gsRUFBUSxTQUN2QzNDLEVBQWEyQyxFQUFPSSxTQUFVSixFQUFRLFFBQ3RDM0MsRUFBYTJDLEVBQU9LLFVBQVdMLEVBQVEsU0FDdkN2QixFQUFjdUIsRUFBT0csVUFBV0gsRUFBUSxTQUN4Q3ZCLEVBQWN1QixFQUFPSyxVQUFXTCxFQUFRLFNBQ3hDLEVBQUEvSixJQUFJbUUsVUFBVTRGLEVBQU9qSixhQUNyQixFQUFBZCxJQUFJK0QsU0FBU2dHLEVBQU9qSixZQUFjaUosRUFDdEMsRUFDQXJDLFNBQVUsQ0FBQyxHQUdGLEVBQUF3QixtQkFBcUIsWUFBYXhOLEdBQzNDLE1BQU0yTyxFQUFPLElBQUkvRSxXQUVYOEQsR0FBVyxJQUFBN0QsV0FBVThFLEVBQUs3RSxRQUFTLElBQUk2RSxJQUc3QyxNQUFPLENBQUUvTSxFQUZNOEwsRUFBU0csT0FBT3BDLFdBQVc5SSxNQUFNLE1BQU1qQyxRQUFPME4sR0FBS0EsSUFFOUNYLEVBQUdDLEVBQVNrQixPQUNwQyxFQUVhLEVBQUFDLGVBQWlCLFlBQWE3TyxHQUN2QyxNQUFNMk8sRUFBTyxJQUFJL0UsV0FFWDhELEdBQVcsSUFBQTNGLE9BQU00RyxFQUFLN0UsUUFBUyxJQUFJNkUsSUFDekMsT0FBTyxJQUFJckIsU0FBb0NNLElBQzNDLElBQUlNLEVBQU8sR0FDWFIsRUFBU0csT0FBT0MsR0FBRyxRQUFRQyxJQUN2QkcsR0FBUUgsQ0FBSSxJQUVoQkwsRUFBU00sT0FBT0YsR0FBRyxRQUFRQyxJQUN2QkcsR0FBUUgsQ0FBSSxJQUVoQkwsRUFBU0ksR0FBRyxTQUFVTCxJQUNsQixNQUFNVSxFQUFTRCxFQUFLdkwsTUFBTSxNQUFNakMsUUFBTzBOLEdBQUtBLElBQzVDUixFQUFJLENBQUVoTSxFQUFXNkwsS0FBSSxHQUN2QixHQUVWLEVBRWEsRUFBQXFCLFFBQXNCLENBQy9CaEksTUFBTyxFQUFBb0IsU0FDUGdDLElBQUssT0FDTEUsS0FBTSxPQUNOQyxJQUFLLE9BQ0xFLElBQUssUUFHVEosUUFBUUQsSUFBTUMsUUFBYSxJQUFFMEMsS0FBS2tDLE9BQU81RSxRQUFTLEVBQUFGLGFBQ2xERSxRQUFRQyxLQUFPRCxRQUFjLEtBQUUwQyxLQUFLa0MsT0FBTzVFLFFBQVMsRUFBQUYsYUFDcERFLFFBQVFHLE1BQVFILFFBQWUsTUFBRTBDLEtBQUtrQyxPQUFPNUUsUUFBUyxFQUFBRixhQVN0RCtFLEtBQUtoTixVQUFVaU4sV0FBYSxXQUN4QixNQUFNQyxHQUFPNUosS0FBSzZKLG9CQUVaQyxFQUFNLFNBQVVDLEdBQ2xCLE9BQVFBLEVBQU0sR0FBSyxJQUFNLElBQU1BLENBQ25DLEVBQ01DLEdBSk1KLEdBQU8sRUFBSSxJQUFNLEtBSVZFLEVBQUlHLEtBQUtDLE1BQU1ELEtBQUtFLElBQUlQLEdBQU8sS0FBTyxJQUFNRSxFQUFJRyxLQUFLRSxJQUFJUCxHQUFPLElBRW5GLE9BREE1SixLQUFLb0ssUUFBUXBLLEtBQUtxSyxVQUFtQixHQUFOVCxFQUFXLEtBQ25DNUosS0FBS3NLLGNBQWNyQixRQUFRLElBQUtlLEVBQzNDLEMsNk1DNVJBLGtCQUVhLEVBQUEzRSxjQUFnQixlQUNoQixFQUFBRixjQUFnQixHQUFHLEVBQUFFLHdCQUVoQyxNQUFNa0YsRUFBVyxVQUFHQyxrQkFBa0IsRUFBQXJGLGNBQWUsQ0FBRXZLLE1BQU8sTUFFakQsRUFBQWdJLFNBQVcsQ0FBQzZILEVBQWlCQyxFQUFRLFNBQVVqRSxLQUN4RCxNQUFNN0IsRUFBTSxDQUNSK0YsTUFBTSxJQUFJakIsTUFBT0MsYUFDakJlLFFBQ0FqRSxVQUNBZ0UsV0FFSkYsRUFBUy9JLE1BQU0sR0FBR29KLEtBQUtDLFVBQVVqRyxPQUFTLEMsMGVDZDlDLGtCQUdBLFdBQ0EsU0FDQSxTQUNBLFNBQ0EsU0FDQSxTQUdNa0csRUFBdUIsaURBQ3ZCQyxFQUFvQjlNLFFBQVEySCxJQUFJbUYsa0JBQW9CLENBQUM5TSxRQUFRMkgsSUFBSW1GLG1CQUFxQixDQUFDLFlBQzdGQSxFQUFrQi9OLEtBQUssR0FBRyxVQUFHZ08seUJBQzdCLE1BQU1DLEVBQU8sT0FBSCxVQUFRaE4sUUFBUTJILEtBR2IsRUFBQTdHLFVBQW1CN0MsR0FBOEIsT0FBRCw2QixrQkFFekQsTUFBTWdQLEVBQVMsSUFBWSxPQUFELDZCQUN0QixNQUFNQyxRQUFZLElBQUE1QixnQkFBZSxVQUFXd0IsRUFBbUIsUUFBUyxnQkFDbEVLLFFBQXNCLElBQUE3QixnQkFBZSxXQUFZLFFBQVN3QixFQUFrQk0sS0FBSUMsR0FBSyxHQUFHQSwrQkFDeEZDLFFBQStCLElBQUFoQyxnQkFBZSxLQUFNLEtBQU0sc0NBQ2hFLEVBQUF2SyxJQUFJVSxVQUFVNkwsRUFBdUJqUCxFQUFFRSxPQUFTLEdBRWhEMk8sRUFBSTdPLEVBQUVsQixRQUFPb1EsSUFBTUEsRUFBRXBLLFNBQVMsK0JBQThCaUssS0FBSUcsSSxRQUM1RCxNQUFNcE4sRUFBMkIsUUFBcEIsRUFBYSxRQUFiLEVBQUFvTixhQUFDLEVBQURBLEVBQUduTyxNQUFNLFlBQUksZUFBRW9PLGFBQUssZUFBRXhDLFFBQVEsTUFBTyxJQUNsRCxFQUFBakssSUFBSWEsS0FBS3pCLEVBQU9vTixFQUFFLElBSXRCLE1BQ01FLFNBRGMsSUFBQW5DLGdCQUFlLE9BQVEsUUFBUyxZQUFhLElBQUssUUFBUyxZQUNuRGpOLEVBQUVsQixRQUFPdVEsSUFDakMsSUFFSSxPQURBLFVBQUd2RyxXQUFXdUcsRUFBRyxVQUFHckcsVUFBVUMsT0FDdkIsQyxDQUNULE1BQU9SLEdBQ0wsT0FBTyxDLEtBSWYsSUFBSyxNQUFNNkcsS0FBV0YsRUFDbEIsSUFDSSxNQUNNRyxFQURTLFVBQUczRixhQUFhMEYsR0FDSnpGLFdBQzNCLEdBQUkwRixFQUFZekssU0FBUyxXQUFZLENBQ2pDLE1BQ00wSyxFQURjRCxFQUFZeE8sTUFBTSxjQUNULEdBQUdBLE1BQU0sTUFFaEMwTyxFQURXRixFQUFZeE8sTUFBTSxXQUNWLEdBQUdBLE1BQU0sTUFDbEMsRUFBQTJCLElBQUlrRCxXQUFXNkosRUFBUSxJQUN2QixFQUFBL00sSUFBSW1ELFdBQVc0SixFQUFRLEdBQUlILEVBQVF2TyxNQUFNLEtBQUssR0FBSXlPLEVBQVMsRyxFQUVqRSxNQUFPOUcsR0FBUyxDQU10QixNQUFNZ0gsRUFBK0QsUUFDckUsSUFBSyxNQUFNdkYsS0FBVyxFQUFBekgsSUFBSTBFLGNBQ3RCc0ksRUFBZXZGLEVBQVExRyxNQUczQnFMLEVBQWM5TyxFQUFFaEIsU0FBUXFJLEksUUFDcEIsRUFBQTNFLElBQUlpRSxnQkFBb0MsUUFBcEIsRUFBYSxRQUFiLEVBQUFVLGFBQUMsRUFBREEsRUFBR3RHLE1BQU0sWUFBSSxlQUFFb08sYUFBSyxlQUFFeEMsUUFBUSxNQUFPLElBQUssR0FHdEUsVUFFTWlDLElBR04sTUFBTWUsRUFBUSxDQUFPbk0sRUFBNEJrQixJQUFvQyxPQUFELDZCQUNoRixJQUFLbEIsRUFBYSxPQUNsQixJQUFLLEVBQUFkLElBQUkwRSxjQUFjakksTUFBS2tJLEdBQUtBLEVBQUV2RixPQUFTMEIsR0FBK0IsVUFBaEJBLElBRXZELFlBREFrQixFQUFPUSxNQUFNc0osR0FJakIsTUFBTW9CLEVBQXlDLEdBRS9DLE9BQU8sSUFBSWxFLFNBQVNDLEksVUFDaEIsSUFBSyxNQUFNeEIsS0FBVyxFQUFBekgsSUFBSTBFLGNBQWUsQ0FDckMsR0FBb0IsVUFBaEI1RCxHQUEyQjJHLEVBQVFySSxPQUFTMEIsRUFBYSxTQUU3RCxJQUFJcU0sRUFBdUMsT0FDM0MsTUFBTXhNLEVBQU0sRUFBQVgsSUFBSW9FLElBQUlxRCxFQUFRckksTUFDNUI4TixFQUFrQmxQLEtBQUssSUFBSWdMLFNBQVF3RCxHQUFLVyxFQUF1QlgsS0FDL0QsRUFBQXhNLElBQUltRSxVQUFVc0QsRUFBUXJJLE1BRXRCLElBQ0ksR0FBSSxFQUFBWSxJQUFJeUUsZ0JBQWdCaEksTUFBS2tJLEdBQUtBLEVBQUV2RixPQUFTcUksRUFBUXJJLE9BQU8sQ0FDeEQ0QyxFQUFPUSxNQUFNLElBQUksRUFBQUUsS0FBS0MsR0FBR3lLLGVBQWUsRUFBQTFLLEtBQUtHLEdBQUdDLGFBQWEyRSxFQUFRckksK0JBQ3JFK04sSUFDQSxRLEVBRVMsUUFBVCxFQUFBeE0sRUFBSXFELGFBQUssZUFBRXJDLFVBQ1gxQyxRQUFRMkgsSUFBTSxPQUFILHdCQUNKcUYsR0FBSSxDQUNQb0IsSUFBSyxVQUFVNUYsRUFBUXJJLFNBQVMsRUFBQVksSUFBSWtGLDRCQUV4Q2xELEVBQU9RLE1BQU0sSUFBSSxFQUFBRSxLQUFLQyxHQUFHQyxjQUFjLEVBQUFGLEtBQUtHLEdBQUdDLG1CQUFtQjJFLEVBQVFySSxZQUMxRXVCLEVBQUlxRCxNQUFNckMsUUFBUWhCLEVBQUlxRCxNQUFNa0csV0FBV29ELE1BQUssS0FHeEMsRUFBQXROLElBQUk2QixnQkFBZ0I0RixFQUFRckksS0FBTSxRQUFTLFVBQVcsVUFBVyxFQUFBb0wsUUFBUSxJQUU3RSxFQUFBeEssSUFBSTZCLGdCQUFnQjRGLEVBQVFySSxLQUFNLFNBQVUsVUFBVyxVQUFXNEMsRUFBUW1MLElBRTFFQSxHLENBRU4sTUFBT25ILEdBQ0xoRSxFQUFPUSxNQUFNLElBQUksRUFBQUUsS0FBS0MsR0FBRytELFlBQVksRUFBQWhFLEtBQUtHLEdBQUdDLG1CQUFtQjJFLEVBQVFySSxZQUN4RTRDLEVBQU9RLE1BQU0sV0FBWXdELEVBQWdCOEMsU0FDTCxRQUFwQyxFQUFxQixRQUFyQixJQUFBOUksSUFBSW9FLElBQUlxRCxFQUFRckksYUFBSyxlQUFFaUQscUJBQWEsZ0IsRUFHNUMyRyxRQUFRdUUsSUFBSUwsR0FBbUJJLE1BQUssS0FDaENyRSxHQUFRLEVBQUssR0FDZixHQUVWLElBR011RSxFQUFPLENBQU8xTSxFQUE0QmtCLEVBQWlDeUwsSUFBb0IsT0FBRCw2QkFDaEcsSUFBSyxFQUFBek4sSUFBSTBFLGNBQWNqSSxNQUFLa0ksR0FBS0EsRUFBRXZGLE9BQVMwQixHQUErQixVQUFoQkEsSUFFdkQsWUFEQWtCLEVBQU9RLE1BQU1zSixHQUdqQixJQUFLLEVBQUE5TCxJQUFJeUUsZ0JBQWdCaEksTUFBS2tJLEdBQUtBLEVBQUV2RixPQUFTMEIsS0FBZ0MsVUFBaEJBLEVBRTFELFlBREFrQixFQUFPUSxNQUFNLElBQUksRUFBQUUsS0FBS0MsR0FBR3lLLGVBQWUsRUFBQTFLLEtBQUtHLEdBQUdDLGFBQWFoQyw0QkFHakUsR0FBb0IsVUFBaEJBLEVBQ0EsSUFBSyxNQUFNSCxLQUFPLEVBQUFYLElBQUkwRSxjQUNsQixFQUFBMUUsSUFBSXVFLGFBQWE1RCxFQUFJdkIsV0FHekIsRUFBQVksSUFBSXVFLGFBQWF6RCxHQUdyQixNQUFNb00sRUFBb0MsR0FDMUMsT0FBTyxJQUFJbEUsU0FBZUMsR0FBNEIsT0FBRCw2QixNQUNqRCxJQUFLLE1BQU10SSxLQUFPLEVBQUFYLElBQUl5RSxnQkFDbEIsR0FBb0IsVUFBaEIzRCxHQUEyQkEsSUFBZ0JILEVBQUl2QixLQUFNLENBQ3JELElBQUlzTyxFQUFzQyxPQUN0Q0MsRUFBa0MsT0FDbENDLEVBQW1DLE9BQ3ZDLE1BQU1DLEVBQTRCLENBQzlCLElBQUk3RSxTQUFRd0QsR0FBS21CLEVBQWtCbkIsSUFDbkMsSUFBSXhELFNBQVF3RCxHQUFLb0IsRUFBbUJwQixLQUVsQ3NCLEVBQWVyRyxHQUF5QixPQUFELDZCQUN6QyxJQUFJOUcsRUFBTSxHQUNWLEVBQUFYLElBQUlnRCxlQUFleUUsRUFBUXJJLEtBQU0sU0FDakMsSUFBSyxNQUFNMk8sS0FBS3RHLEVBQVF4RyxVQUFXLENBQy9CLElBQUkrTSxFQUFVLEVBQUFySSxZQUNWaEYsSUFBUThHLEVBQVFySSxPQUNoQnVCLEVBQU04RyxFQUFRckksS0FDZDRPLEVBQVUsSUFBSSxFQUFBdEwsS0FBS0MsR0FBR0MsY0FBYyxFQUFBRixLQUFLRyxHQUFHQyxhQUVoRCxNQUFNbUwsRUFBT1IsRUFBUSxDQUFDLE9BQVEsS0FBTU0sRUFBRTNLLFFBQVUsQ0FBQyxPQUFRMkssRUFBRTNLLFNBQ3JELEVBQUUrRixTQUFZLElBQUFvQixtQkFBa0IwRCxHQUM3QixHQUFMOUUsR0FDQW5ILEVBQU9RLE1BQU0sR0FBR3dMLEtBQVd2RyxFQUFRckksOEJBQThCMk8sRUFBRTFLLFlBQVkwSyxFQUFFM0ssYyxDQUc3RixJQUNBOEosRUFBa0JsUCxLQUFLLElBQUlnTCxTQUFRd0QsR0FBTWtCLEVBQThCbEIsS0FDdkUsS0FDaUIsUUFBVCxFQUFBN0wsRUFBSXFELGFBQUssZUFBRWtLLFNBQ1h2TixFQUFJcUQsTUFBTW1HLFNBQVNnRSxRQUFVLElBQVksT0FBRCxtQ0FFOUJMLEVBQU1uTixHQUNaLEVBQUFYLElBQUl3RSxhQUFhN0QsRUFBSXZCLE1BQ3JCLEVBQUFZLElBQUk2QixnQkFBZ0JsQixFQUFJdkIsS0FBTSxRQUFTLFNBQVUsVUFBVzRDLEVBQVE0TCxFQUN4RSxJQUNBak4sRUFBSXFELE1BQU1rSyxPQUFPdk4sRUFBSXFELE1BQU1tRyxVQUMzQixFQUFBbkssSUFBSTZCLGdCQUFnQmxCLEVBQUl2QixLQUFNLFNBQVUsU0FBVSxVQUFXNEMsRUFBUTJMLEtBRXJFQSxJQUFtQkMsVUFDYkUsRUFBTW5OLElBR2hCcUksUUFBUXVFLElBQUlNLEdBQTJCUCxNQUFLLEtBQ3hDSSxJQUVBM0ssWUFBVyxLQUNQLEVBQUEvQyxJQUFJc0UsY0FBYzNELEVBQUl2QixLQUFLLEdBQzdCLEcsQ0FFUixNQUFPNEcsR0FDTGhFLEVBQU9RLE1BQU0sSUFBSSxFQUFBRSxLQUFLQyxHQUFHK0QsWUFBWSxFQUFBaEUsS0FBS0csR0FBR0Msa0JBQWtCbkMsRUFBSXZCLFlBQ25Fc08sRyxFQUlaLEdBQW9CLFVBQWhCNU0sRUFDQSxJQUFLLE1BQU02RCxLQUFLLEVBQUEzRSxJQUFJNEUsZ0JBQ2hCNUMsRUFBT1EsTUFBTSxJQUFJLEVBQUFFLEtBQUtDLEdBQUd5SyxlQUFlLEVBQUExSyxLQUFLRyxHQUFHQyxhQUFhNkIsRUFBRXZGLCtCQUd2RTRKLFFBQVF1RSxJQUFJTCxHQUFtQkksTUFBSyxLQUNoQ3JFLEdBQVMsR0FFakIsS0FDSixJQUVBLE9BQVEvTCxFQUFLQyxFQUFFLElBQ1gsSUFBSyxPQTBDRCxHQXpDSSxFQUFBNkMsSUFBSVUsVUFDSixFQUFBa0YsSUFBSUEsSUExTVcsa0NBMk1mM0csUUFBUVksS0FBSyxVQUVYLElBQUF1TyxlQUFhLENBQU9yTSxFQUEwQnNNLElBQXVCLE9BQUQsNkJBRXRFLE9BQVF0TSxFQUFJNUUsRUFBRSxJQUNWLElBQUssUUFDSTRFLEVBQUk1RSxFQUFFSyxRQUFXdUUsRUFBSTVFLEVBQUVLLE9BQVMsSUFBTXVFLEVBQUl3TCxLQUMzQ2MsRUFBTzdMLE1BQU1zSixHQUNidUMsRUFBT3BJLGNBRURpRyxVQUNBc0IsRUFBS3pMLEVBQUk1RSxFQUFFLEdBQUs0RSxFQUFJNUUsRUFBRSxHQUFLNEUsRUFBSXdMLElBQU0sUUFBVSxLQUFNYyxFQUFRdE0sRUFBSTBMLE9BQ3ZFWSxFQUFPcEksT0FFWCxNQUNKLElBQUssU0FDSWxFLEVBQUk1RSxFQUFFSyxRQUFXdUUsRUFBSTVFLEVBQUVLLE9BQVMsSUFBTXVFLEVBQUl3TCxLQUMzQ2MsRUFBTzdMLE1BQU1zSixHQUNidUMsRUFBT3BJLGNBRURpRyxVQUNBZSxFQUFNbEwsRUFBSTVFLEVBQUUsR0FBSzRFLEVBQUk1RSxFQUFFLEdBQUs0RSxFQUFJd0wsSUFBTSxRQUFVLEtBQU1jLEdBQzVEQSxFQUFPcEksT0FFWCxNQUNKLElBQUssV0FDSWxFLEVBQUk1RSxFQUFFSyxRQUFXdUUsRUFBSTVFLEVBQUVLLE9BQVMsSUFBTXVFLEVBQUl3TCxLQUMzQ2MsRUFBTzdMLE1BQU1zSixHQUNidUMsRUFBT3BJLGNBRURpRyxXQUNnQnNCLEVBQUt6TCxFQUFJNUUsRUFBRSxHQUFLNEUsRUFBSTVFLEVBQUUsR0FBSzRFLEVBQUl3TCxJQUFNLFFBQVUsS0FBTWMsRUFBUXRNLEVBQUkwTCxnQkFDcEVSLEVBQU1sTCxFQUFJNUUsRUFBRSxHQUFLNEUsRUFBSTVFLEVBQUUsR0FBSzRFLEVBQUl3TCxJQUFNLFFBQVUsS0FBTWMsSUFDekVBLEVBQU9wSSxPQUl2QixZQUNNZ0gsRUFBTSxRQUFTLEVBQUFySCxLQUNqQixFQUFBNUYsSUFBSWtFLGtCQUFtQixDQUN2QixNQUFNb0ssRUFBUyxJQUFZLE9BQUQsbUNBRWhCcEMsVUFDQXNCLEVBQUssUUFBUyxFQUFBNUgsTUFDcEIsSUFBQTJJLGdCQUNKLElBQ0ksRUFBQXZPLElBQUlxRSxpQkFBc0MsUUFBckIsSUFBQXJFLElBQUlrRSx5QkFBaUIsZUFBRTlFLFlBQ3RDa1AsS0FFTnJQLFFBQVEySCxJQUFNLE9BQUgsd0JBQ0pxRixHQUFJLENBQ1BvQixJQUFLLFVBQStCLFFBQXJCLElBQUFyTixJQUFJa0UseUJBQWlCLGVBQUU5RSxTQUFTLEVBQUFZLElBQUlrRiw0QkFFbEIsUUFBckMsRUFBNEIsUUFBNUIsRUFBcUIsUUFBckIsSUFBQWxGLElBQUlrRSx5QkFBaUIsZUFBRUYsYUFBSyxlQUFFcEMsZUFBTyxnQkFBK0IsUUFBNUIsRUFBcUIsUUFBckIsSUFBQTVCLElBQUlrRSx5QkFBaUIsZUFBRUYsYUFBSyxlQUFFb0csV0FBWWtELE1BQUssSUFBWSxPQUFELDZCLGVBQ3JFLFFBQXJCLElBQUF0TixJQUFJa0UseUJBQWlCLGVBQUV4QyxLQUFLRSxTQUNpQixRQUE3QyxFQUFvQyxRQUFwQyxFQUEyQixRQUEzQixFQUFxQixRQUFyQixJQUFBNUIsSUFBSWtFLHlCQUFpQixlQUFFeEMsWUFBSSxlQUFFRSxlQUFPLGVBQUV5SCxlQUFPLFNBQUVpRSxNQUFLLElBQVksT0FBRCxtQ0FDckRnQixHQUNWLFlBRU1BLEdBRWQsTSxDQUdSLE1BQ0osSUFBSyxhQUNELEdBQWtCLFFBQWRwUixFQUFLQyxFQUFFLElBQ0g4QixRQUFRMkgsSUFBSUMsS0FBTzVILFFBQVEySCxJQUFJQyxJQUFJRSxTQUFTLGNBQWUsQ0FDM0QsTUFBTUosRUFBa0IsR0FBRzFILFFBQVEySCxJQUFJQywrQkFDakMsSUFBQTBELGdCQUFlLFFBQVMsS0FBTSxHQUFHNUQsV0FDakMsSUFBQTRELGdCQUFlLEtBQU0sR0FBR3ZELHlDQUEwQyxHQUFHTCwwQkFDckUsSUFBQTRELGdCQUFlLEtBQU0sR0FBR3ZELG9DQUFxQyxHQUFHTCxlQUN0RSxFQUFBZixJQUFJQSxJQUFJLElBQUksRUFBQWxELEtBQUtDLEdBQUdDLGdCQUFnQixFQUFBRixLQUFLRyxHQUFHQyw0RyxDQUdwRCxNQUNKLElBQUssS0FDRCxJQUFJMEwsRUFBVSxHQUNkLElBQUssTUFBTTdOLEtBQU8sRUFBQVgsSUFBSXlFLGdCQUNsQixJQUFLLE1BQU1nSyxLQUFROU4sRUFBSU0sVUFBVyxDQUM5QixJQUFJK00sRUFBVSxFQUFBckksWUFDVjZJLElBQVk3TixFQUFJdkIsT0FDaEJvUCxFQUFVN04sRUFBSXZCLEtBQ2Q0TyxFQUFVLElBQUksRUFBQXRMLEtBQUtDLEdBQUdDLGFBQWEsRUFBQUYsS0FBS0csR0FBR0MsY0FFL0MsRUFBQThDLElBQUlBLElBQUlvSSxFQUFTck4sRUFBSXZCLEtBQU0seUJBQXlCcVAsRUFBS3BMLFlBQVlvTCxFQUFLckwsYyxDQUdsRixHQUFJbEcsRUFBS3FRLElBQ0wsSUFBSyxNQUFNNUksS0FBSyxFQUFBM0UsSUFBSTRFLGdCQUNoQixFQUFBZ0IsSUFBSUEsSUFBSSxJQUFJLEVBQUFsRCxLQUFLQyxHQUFHeUssZUFBZSxFQUFBMUssS0FBS0csR0FBR0MsWUFBYTZCLEVBQUV2RixLQUFNLGVBR3hFLE1BQ0osSUFBSyxPQUNMLElBQUssUUFDTCxJQUFLLGlCQUNvQixJQUFBc1AsaUJBQ2RsTSxNQUFNb0osS0FBS0MsVUFBVTNPLElBRTVCLE1BQ0osU0FDSSxJQUFBZ0MsUUFHWixHLDRoQkM3VEEsa0JBRUEsWUFDQSxTQUNBLFNBRU15UCxFQUdGLENBQUMsRUFDQ3RHLEVBQVN0RyxLQUFrQixJQUFBNkIsVUFBUzdCLEVBQUssU0FBUyxFQUN4RCxJQUFJNk0sRUFBb0JDLEVBR3BCQyxHQUFXLEVBR2YsTUFBTUMsRUFBYSxnQkFnQ04sRUFBQVIsY0FBZ0IsS0FDekIsSUFBS08sR0FBWUYsRUFBUSxDQUdyQixHQUZBRSxHQUFXLEVBQ1h6RyxFQUFNLDhCQUNGM0wsT0FBT0MsS0FBS2dTLEdBQWFuUixPQUFRLENBQ2pDLElBQUl3UixFQUFVdFMsT0FBT0MsS0FBS2dTLEdBQzFCLEtBQU9LLEVBQVF4UixRQUFRLENBQ25CLElBQUlxUixFQUFTRyxFQUFRdkMsTUFFckJrQyxFQUFZRSxHQUFRNUksSyxFQUc1QjJJLEVBQU9LLE8sR0FHRixFQUFBYixhQUFlLENBQU9jLEVBQVEsRUFBT25OLEVBQTBCb04sSUFBdUIsT0FBRCw2QkFBRyxPQUFNLE9BQUQsNkJBWXRHLE9BVkE5RyxFQUFNLCtDQUVGLFVBQUduQyxXQUFXNkksSUFDZDFHLEVBQU0sNENBQ04sVUFBRytHLFdBQVdMLElBRWQxRyxFQUFNLGtEQUdWcEosUUFBUXVLLEdBQUcsT0FBUSxFQUFBK0UsZUF4RHZCLFNBQXVCRixFQUFnQmEsRUFBUSxFQUFPbk4sRUFBMEJvTixJQUF1QixFQUFELGdDQUFHLE1BRXJHLElBQUlFLEVBQ0osT0FGQWhILEVBQU0sMkJBRUMsSUFBSVcsU0FBU0MsSUFDaEIyRixFQUFTLFVBQUlVLGNBQWEsU0FBVUgsR0FDaEM5RyxFQUFNLDBDQUdOLElBQUlrSCxFQUFRN0UsS0FBSzhFLE1BQU9ySSxXQUN4QndILEVBQVlZLEdBQVFKLEVBQ3BCQSxFQUFPM0YsR0FBRyxPQUFPLFdBQ2JuQixFQUFNLDZDQUNDc0csRUFBWVksRUFDdkIsSUFHQUosRUFBTzNGLEdBQUcsUUFBZXpILEdBQWdCLEVBQUQsZ0NBQ3BDLE1BQU0wTixFQUE0QjdELEtBQUs4RCxNQUFNM04sRUFBSW9GLFlBQ2pEK0gsRUFBTU8sRUFBTWQsRUFBWVksR0FFNUIsS0FDSixJQUFHSSxPQUFPdEIsR0FBUTdFLEdBQUcsY0FBYyxTQUFVb0csR0FDekN2SCxFQUFNLG1DQUNOZ0gsRUFBT08sQ0FFWCxJQUNBM0csR0FBUyxHQUVqQixDQTZCVzRHLENBQWNkLEVBQVlHLEVBQ3JDLElBR2EsRUFBQVksY0FBZ0IsTUFDcEJoQixHQUFZRCxJQUNiQyxHQUFXLEVBQ1h6RyxFQUFNLCtCQUNOd0csRUFBTzVJLE0sRUFJRixFQUFBeUksYUFBZSxLQUd4QnpQLFFBQVF1SyxHQUFHLE9BQVEsRUFBQXNHLGVBQ1osSUFBSTlHLFNBQXFCQyxJQUM1QjRGLEVBQVMsVUFBSWtCLGlCQUFpQmhCLEdBQ3pCdkYsR0FBRyxXQUFXLEtBRVhQLEVBQVE0RixFQUFPLElBR2xCckYsR0FBRyxRQUFRLFNBQVVDLEdBQ2xCLE1BQU11RyxFQUFVdkcsRUFBS3RDLFdBQ3JCLEVBQUF2QixJQUFJQSxJQUFJb0ssRUFHWixJQUNDeEcsR0FBRyxTQUFTLFNBQVVDLEdBQ25CLEVBQUE3RCxJQUFJQSxJQUFJLGlEQUFrRDNHLFFBQVFZLEtBQUssRUFDM0UsSUFBRzJKLEdBQUcsU0FBUyxTQUFVQyxHQUV6QixHQUFFLEksNkVDN0dkLE1BQU13RyxFQUFJLENBR04xRyxPQUFRdEssUUFBUXNLLE9BS2hCMkcsTUFBTyxTQUFVNUgsRUFBTSxJQUEyQixPQUFyQjJILEVBQUUxRyxPQUFPL0csTUFBTThGLEdBQWEySCxDQUFHLEVBRTVERSxLQUFNLFNBQVU3SCxFQUFhOEgsRUFBTyxJQUFNLE9BQU9ILEVBQUVDLE1BQU1ELEVBQUVwTixHQUFHc04sS0FBT0MsRUFBTzlILEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVyxFQUNsR3VOLE9BQVEsU0FBVS9ILEVBQWE4SCxFQUFPLElBQU0sT0FBT0gsRUFBRUMsTUFBTUQsRUFBRXBOLEdBQUd3TixPQUFTRCxFQUFPOUgsRUFBTTJILEVBQUVwTixHQUFHQyxTQUFXLEVBQ3RHd04sVUFBVyxTQUFVaEksRUFBYThILEVBQU8sSUFBTSxPQUFPSCxFQUFFQyxNQUFNRCxFQUFFcE4sR0FBR3lOLFVBQVlGLEVBQU85SCxFQUFNMkgsRUFBRXBOLEdBQUdDLFNBQVcsRUFDNUd5TixRQUFTLFNBQVVqSSxFQUFhOEgsRUFBTyxJQUFNLE9BQU9ILEVBQUVDLE1BQU1ELEVBQUVwTixHQUFHME4sUUFBVUgsRUFBTzlILEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVyxFQUN4RzBOLE9BQVEsU0FBVWxJLEVBQWE4SCxFQUFPLElBQU0sT0FBT0gsRUFBRUMsTUFBTUQsRUFBRXBOLEdBQUcyTixPQUFTSixFQUFPOUgsRUFBTTJILEVBQUVwTixHQUFHQyxTQUFXLEVBR3RHMk4sYUFBYyxTQUFVbkksR0FBZSxPQUFPMkgsRUFBRUMsTUFBTUQsRUFBRXROLEdBQUc4TixhQUFlbkksRUFBTTJILEVBQUVwTixHQUFHQyxTQUFXLEVBQ2hHNE4sTUFBTyxTQUFVcEksR0FBZSxPQUFPMkgsRUFBRUMsTUFBTUQsRUFBRXROLEdBQUcrTixNQUFRcEksRUFBTTJILEVBQUVwTixHQUFHQyxTQUFXLEVBQ2xGNEQsSUFBSyxTQUFVNEIsR0FBZSxPQUFPMkgsRUFBRUMsTUFBTUQsRUFBRXROLEdBQUcrRCxJQUFNNEIsRUFBTTJILEVBQUVwTixHQUFHQyxTQUFXLEVBQzlFRixNQUFPLFNBQVUwRixHQUFlLE9BQU8ySCxFQUFFQyxNQUFNRCxFQUFFdE4sR0FBR0MsTUFBUTBGLEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVyxFQUNsRnNLLE9BQVEsU0FBVTlFLEdBQWUsT0FBTzJILEVBQUVDLE1BQU1ELEVBQUV0TixHQUFHeUssT0FBUzlFLEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVyxFQUNwRjZOLEtBQU0sU0FBVXJJLEdBQWUsT0FBTzJILEVBQUVDLE1BQU1ELEVBQUV0TixHQUFHZ08sS0FBT3JJLEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVyxFQUNoRjhOLFFBQVMsU0FBVXRJLEdBQWUsT0FBTzJILEVBQUVDLE1BQU1ELEVBQUV0TixHQUFHaU8sUUFBVXRJLEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVyxFQUN0RitOLEtBQU0sU0FBVXZJLEdBQWUsT0FBTzJILEVBQUVDLE1BQU1ELEVBQUV0TixHQUFHa08sS0FBT3ZJLEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVyxFQUNoRmdPLE1BQU8sU0FBVXhJLEdBQWUsT0FBTzJILEVBQUVDLE1BQU1ELEVBQUV0TixHQUFHbU8sTUFBUXhJLEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVyxFQUNsRmlPLFlBQWEsU0FBVXpJLEdBQWUsT0FBTzJILEVBQUVDLE1BQU1ELEVBQUV0TixHQUFHb08sWUFBY3pJLEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVyxFQUM5RmtPLFVBQVcsU0FBVTFJLEdBQWUsT0FBTzJILEVBQUVDLE1BQU1ELEVBQUV0TixHQUFHcU8sVUFBWTFJLEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVyxFQUMxRm1PLFlBQWEsU0FBVTNJLEdBQWUsT0FBTzJILEVBQUVDLE1BQU1ELEVBQUV0TixHQUFHc08sWUFBYzNJLEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVyxFQUM5Rm9PLGFBQWMsU0FBVTVJLEdBQWUsT0FBTzJILEVBQUVDLE1BQU1ELEVBQUV0TixHQUFHdU8sYUFBZTVJLEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVyxFQUNoR3FPLFdBQVksU0FBVTdJLEdBQWUsT0FBTzJILEVBQUVDLE1BQU1ELEVBQUV0TixHQUFHd08sV0FBYTdJLEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVyxFQUM1RnNPLGNBQWUsU0FBVTlJLEdBQWUsT0FBTzJILEVBQUVDLE1BQU1ELEVBQUV0TixHQUFHeU8sY0FBZ0I5SSxFQUFNMkgsRUFBRXBOLEdBQUdDLFNBQVcsRUFDbEd1TyxXQUFZLFNBQVUvSSxHQUFlLE9BQU8ySCxFQUFFQyxNQUFNRCxFQUFFdE4sR0FBRzBPLFdBQWEvSSxFQUFNMkgsRUFBRXBOLEdBQUdDLFNBQVcsRUFDNUZ3TyxZQUFhLFNBQVVoSixHQUFlLE9BQU8ySCxFQUFFQyxNQUFNRCxFQUFFdE4sR0FBRzJPLFlBQWNoSixFQUFNMkgsRUFBRXBOLEdBQUdDLFNBQVcsRUFDOUZ5TyxZQUFhLFNBQVVDLEVBQW9CbEosR0FBZSxNQUFNOEgsRUFBT3FCLE1BQU1ELEdBQWNBLEVBQWEsVUFBYUEsS0FBZSxPQUFPdkIsRUFBRUMsTUFBTUUsRUFBTzlILEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVSxFQUUvSzRPLGVBQWdCLFNBQVVwSixFQUFhcUosRUFBUyxJQUFNLE9BQU8xQixFQUFFQyxNQUFNRCxFQUFFdE4sR0FBRzJPLFlBQWNLLEVBQVNySixFQUFNMkgsRUFBRXBOLEdBQUdDLFNBQVcsRUFDdkg4TyxRQUFTLFNBQVV0SixFQUFhcUosRUFBUyxJQUFNLE9BQU8xQixFQUFFQyxNQUFNRCxFQUFFNEIsR0FBR25CLE1BQVFpQixFQUFTckosRUFBTTJILEVBQUVwTixHQUFHQyxTQUFXLEVBQzFHZ1AsTUFBTyxTQUFVeEosRUFBYXFKLEVBQVMsSUFBTSxPQUFPMUIsRUFBRUMsTUFBTUQsRUFBRTRCLEdBQUduTCxJQUFNaUwsRUFBU3JKLEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVyxFQUN0R2lQLFFBQVMsU0FBVXpKLEVBQWFxSixFQUFTLElBQU0sT0FBTzFCLEVBQUVDLE1BQU1ELEVBQUU0QixHQUFHalAsTUFBUStPLEVBQVNySixFQUFNMkgsRUFBRXBOLEdBQUdDLFNBQVcsRUFDMUdrUCxTQUFVLFNBQVUxSixFQUFhcUosRUFBUyxJQUFNLE9BQU8xQixFQUFFQyxNQUFNRCxFQUFFNEIsR0FBR3pFLE9BQVN1RSxFQUFTckosRUFBTTJILEVBQUVwTixHQUFHQyxTQUFXLEVBQzVHbVAsT0FBUSxTQUFVM0osRUFBYXFKLEVBQVMsSUFBTSxPQUFPMUIsRUFBRUMsTUFBTUQsRUFBRTRCLEdBQUdsQixLQUFPZ0IsRUFBU3JKLEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVyxFQUN4R29QLFVBQVcsU0FBVTVKLEVBQWFxSixFQUFTLElBQU0sT0FBTzFCLEVBQUVDLE1BQU1ELEVBQUU0QixHQUFHakIsUUFBVWUsRUFBU3JKLEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVyxFQUM5R3FQLE9BQVEsU0FBVTdKLEVBQWFxSixFQUFTLElBQU0sT0FBTzFCLEVBQUVDLE1BQU1ELEVBQUU0QixHQUFHaEIsS0FBT2MsRUFBU3JKLEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVyxFQUN4R3NQLFFBQVMsU0FBVTlKLEVBQWFxSixFQUFTLElBQU0sT0FBTzFCLEVBQUVDLE1BQU1ELEVBQUU0QixHQUFHZixNQUFRYSxFQUFTckosRUFBTTJILEVBQUVwTixHQUFHQyxTQUFXLEVBQzFHdVAsY0FBZSxTQUFVL0osRUFBYXFKLEVBQVMsSUFBTSxPQUFPMUIsRUFBRUMsTUFBTUQsRUFBRTRCLEdBQUdkLFlBQWNZLEVBQVNySixFQUFNMkgsRUFBRXBOLEdBQUdDLFNBQVcsRUFDdEh3UCxZQUFhLFNBQVVoSyxFQUFhcUosRUFBUyxJQUFNLE9BQU8xQixFQUFFQyxNQUFNRCxFQUFFNEIsR0FBR2IsVUFBWVcsRUFBU3JKLEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVyxFQUNsSHlQLGNBQWUsU0FBVWpLLEVBQWFxSixFQUFTLElBQU0sT0FBTzFCLEVBQUVDLE1BQU1ELEVBQUU0QixHQUFHWixZQUFjVSxFQUFTckosRUFBTTJILEVBQUVwTixHQUFHQyxTQUFXLEVBQ3RIMFAsZUFBZ0IsU0FBVWxLLEVBQWFxSixFQUFTLElBQU0sT0FBTzFCLEVBQUVDLE1BQU1ELEVBQUU0QixHQUFHWCxhQUFlUyxFQUFTckosRUFBTTJILEVBQUVwTixHQUFHQyxTQUFXLEVBQ3hIMlAsYUFBYyxTQUFVbkssRUFBYXFKLEVBQVMsSUFBTSxPQUFPMUIsRUFBRUMsTUFBTUQsRUFBRTRCLEdBQUdWLFdBQWFRLEVBQVNySixFQUFNMkgsRUFBRXBOLEdBQUdDLFNBQVcsRUFDcEg0UCxnQkFBaUIsU0FBVXBLLEVBQWFxSixFQUFTLElBQU0sT0FBTzFCLEVBQUVDLE1BQU1ELEVBQUU0QixHQUFHVCxjQUFnQk8sRUFBU3JKLEVBQU0ySCxFQUFFcE4sR0FBR0MsU0FBVyxFQUMxSDZQLGFBQWMsU0FBVXJLLEVBQWFxSixFQUFTLElBQU0sT0FBTzFCLEVBQUVDLE1BQU1ELEVBQUU0QixHQUFHUixXQUFhTSxFQUFTckosRUFBTTJILEVBQUVwTixHQUFHQyxTQUFXLEVBQ3BIOFAsY0FBZSxTQUFVdEssRUFBYXFKLEVBQVMsSUFBTSxPQUFPMUIsRUFBRUMsTUFBTUQsRUFBRTRCLEdBQUdQLFlBQWNLLEVBQVNySixFQUFNMkgsRUFBRXBOLEdBQUdDLFNBQVcsRUFDdEgrUCxjQUFlLFNBQVVyQixFQUFvQmxKLEVBQWFxSixFQUFTLElBQy9ELE1BQU12QixFQUFPcUIsTUFBTUQsR0FBYyxFQUFhckssV0FBYSxVQUFhcUssS0FDbEVzQixFQUFRckIsTUFBTUQsR0FBYyxFQUFhckssV0FBYSxVQUFhcUssS0FDekUsT0FBT3ZCLEVBQUVDLE1BQU1FLEVBQU8wQyxFQUFReEssRUFBTTJILEVBQUVwTixHQUFHQyxTQUM3QyxFQUdBRCxHQUFJLENBQ0FDLFNBQVUsaUJBQ1ZpUSxxQkFBc0IsTUFDdEJDLFVBQVcsT0FDWEMsV0FBWSxPQUNaOUMsS0FBTSxPQUNORSxPQUFRLE9BQ1JDLFVBQVcsT0FDWEMsUUFBUyxPQUNUQyxPQUFRLE9BQ1IwQyxXQUFZLFNBQ1pDLFdBQVksVUFJaEJ4USxHQUFJLENBQ0E4TixhQUFjLFFBQ2RDLE1BQU8sUUFDUGhLLElBQUssUUFDTDlELE1BQU8sUUFDUHdLLE9BQVEsUUFDUnVELEtBQU0sUUFDTkMsUUFBUyxRQUNUQyxLQUFNLFFBQ05DLE1BQU8sUUFDUEMsWUFBYSxRQUNiQyxVQUFXLFFBQ1hDLFlBQWEsUUFDYkMsYUFBYyxRQUNkQyxXQUFZLFFBQ1pDLGNBQWUsUUFDZkMsV0FBWSxRQUNaQyxZQUFhLFFBQ2JDLFlBQWEsU0FBVW5CLEdBQWdCLE1BQU8sVUFBYUEsSUFBUyxHQUl4RXlCLEdBQUksQ0FDQXBCLGFBQWMsUUFDZEMsTUFBTyxRQUNQaEssSUFBSyxRQUNMOUQsTUFBTyxRQUNQd0ssT0FBUSxRQUNSdUQsS0FBTSxRQUNOQyxRQUFTLFFBQ1RDLEtBQU0sUUFDTkMsTUFBTyxRQUNQQyxZQUFhLFNBQ2JDLFVBQVcsU0FDWEMsWUFBYSxTQUNiQyxhQUFjLFNBQ2RDLFdBQVksU0FDWkMsY0FBZSxTQUNmQyxXQUFZLFNBQ1pDLFlBQWEsU0FDYnVCLGNBQWUsU0FBVXpDLEdBQWdCLE1BQU8sVUFBYUEsSUFBUyxJQUlqRSxFQUFBMU4sS0FBT3VOLEMsb0ZDeEhwQixlQUVNbUQsRUFLTSxPQUxOQSxFQVNNLEtBR05DLEVBQU8sQ0FBQ0MsRUFBTyxVQUNEN1YsSUFBVDZWLEdBQXNCQSxFQUFLOVYsT0FBUzhWLE9BQU83VixFQUdoRDhWLEVBQWUsQ0FBQ0MsRUFBZUMsRUFBbUIsR0FBSXRELEtBQ3BEc0QsRUFBS2pXLFFBQVU2VixFQUFLSSxFQUFLLEdBQUdyVSxRQUM1QixFQUFBc0QsS0FBS3dOLE1BQU0sRUFBQXhOLEtBQUtHLEdBQUdzTixLQUFPaUQsRUFBZUksR0FFekNDLEVBQUtuWCxTQUFRaUIsSUFDVCxFQUFBbUYsS0FBS3dOLE1BQU0sRUFBQXhOLEtBQUtHLEdBQUdDLFVBRWZxTixHQUFNLEVBQUF6TixLQUFLd04sTUFBTSxFQUFBeE4sS0FBS0MsR0FBRzJPLFlBQWMsRUFBQTVPLEtBQUtHLEdBQUdzTixNQUNuRCxFQUFBek4sS0FBS3dOLE1BQU0sR0FBR2tELEVBQWU3VixFQUFFNkIsUUFDL0IsTUFBTUUsRUFBTytULEVBQUs5VixFQUFFK0IsTUFDaEJBLElBQ0EsRUFBQW9ELEtBQUt3TixNQUFNLEVBQUF4TixLQUFLRyxHQUFHQyxVQUFVb04sTUFBTSxNQUNuQyxFQUFBeE4sS0FBS3dOLE1BQU0sR0FBR2tELElBQWVBLElBQWU5VCxNQUVoRCxFQUFBb0QsS0FBS3dOLE1BQU0sRUFBQXhOLEtBQUtHLEdBQUdDLFVBQVVvTixNQUFNLEtBQUssSSxFQU12QyxFQUFBL1EsV0FBYSxDQUFDdVUsRUFBSSxDQUMzQnRVLEtBQU0sR0FBSUMsTUFBTyxDQUFDLENBQUVELEtBQU0sR0FBSUUsS0FBTSxLQUFPQyxRQUFTLENBQUMsQ0FBRUMsT0FBUSxHQUFJRixLQUFNLEdBQUlHLEtBQU0sS0FDbkZDLFNBQVUsQ0FBQyxDQUFFRixPQUFRLEdBQUlGLEtBQU0sS0FDL0JNLFVBQVcsaUJBQWtCRCxRQUFTLFlBSXRDLEdBRkE0VCxFQXhDTSxTQXdDbUIsQ0FBQyxDQUFFblUsS0FBTXNVLEVBQUV0VSxRQUNwQ21VLEVBeENPLFVBd0NtQkcsRUFBRXJVLE9BQU8sR0FDL0JxVSxFQUFFblUsU0FBV21VLEVBQUVuVSxRQUFRL0IsT0FBUSxDQUMvQixJQUFJbVcsR0FBcUIsRUFDekJELEVBQUVuVSxRQUFRakQsU0FBUWdCLElBQ1ZBLEVBQUVrQyxPQUFPaEMsU0FDSm1XLElBQXNCQSxHQUFxQixFQUFNLEVBQUFqUixLQUFLd04sTUFBTSxFQUFBeE4sS0FBS0csR0FBR3NOLEtBQU9pRCxFQTVDbkYsWUE0Q2tILEVBQUExUSxLQUFLRyxHQUFHQyxXQUN2SCxFQUFBSixLQUFLd04sTUFBTSxHQUFHLEVBQUF4TixLQUFLQyxHQUFHMk8sWUFBYyxFQUFBNU8sS0FBS0csR0FBR3NOLE9BQU9pRCxFQUFlOVYsRUFBRWtDLFlBQ3BFLEVBQUFrRCxLQUFLd04sTUFBTSxHQUFHLEVBQUF4TixLQUFLRyxHQUFHQyxXQUFXc1EsSUFBZUEsSUFBZTlWLEVBQUVnQyxRQUM3RGhDLEVBQUVtQyxNQUFNLEVBQUFpRCxLQUFLd04sTUFBTSxHQUFHLEVBQUF4TixLQUFLQyxHQUFHa08sU0FBU3ZULEVBQUVtQyxTQUM3QyxFQUFBaUQsS0FBS3dOLE1BQU0sTSxJQUl2QixHQUFJd0QsRUFBRWhVLFVBQVlnVSxFQUFFaFUsU0FBU2xDLE9BQVEsQ0FDakMsSUFBSW1XLEdBQXFCLEVBQ3pCRCxFQUFFaFUsU0FBU3BELFNBQVFnQixJQUNYQSxFQUFFa0MsT0FBT2hDLFNBQ0ptVyxJQUFzQkEsR0FBcUIsRUFBTSxFQUFBalIsS0FBS3dOLE1BQU0sRUFBQXhOLEtBQUtHLEdBQUdzTixLQUFPaUQsRUF2RGxGLGFBdURrSCxFQUFBMVEsS0FBS0csR0FBR0MsV0FDeEgsRUFBQUosS0FBS3dOLE1BQU0sR0FBRyxFQUFBeE4sS0FBS0MsR0FBRzJPLFlBQWMsRUFBQTVPLEtBQUtHLEdBQUdzTixPQUFPaUQsRUFBZTlWLEVBQUVrQyxZQUNwRSxFQUFBa0QsS0FBS3dOLE1BQU0sR0FBRyxFQUFBeE4sS0FBS0csR0FBR0MsV0FBV3NRLElBQWVBLElBQWU5VixFQUFFZ0MsUUFDakUsRUFBQW9ELEtBQUt3TixNQUFNLE0sSUFJdkIsRUFBQXhOLEtBQUt3TixNQUFNa0QsSUFDTk0sRUFBRS9ULFNBQVcrVCxFQUFFL1QsUUFBUW5DLFFBQVlrVyxFQUFFOVQsV0FBYThULEVBQUU5VCxVQUFVcEMsU0FBUyxFQUFBa0YsS0FBS3dOLE1BQU0sT0FDbkZ3RCxFQUFFL1QsU0FBVytULEVBQUUvVCxRQUFRbkMsUUFBUSxFQUFBa0YsS0FBS3dOLE1BQU0sSUFBSXdELEVBQUUvVCxXQUNoRCtULEVBQUU5VCxXQUFhOFQsRUFBRTlULFVBQVVwQyxTQUN2QmtXLEVBQUUvVCxTQUFXK1QsRUFBRS9ULFFBQVFuQyxRQUFRLEVBQUFrRixLQUFLd04sTUFBTSxPQUM5QyxFQUFBeE4sS0FBS3dOLE1BQU13RCxFQUFFOVQsYUFFWjhULEVBQUUvVCxTQUFXK1QsRUFBRS9ULFFBQVFuQyxRQUFZa1csRUFBRTlULFdBQWE4VCxFQUFFOVQsVUFBVXBDLFNBQVMsRUFBQWtGLEtBQUt3TixNQUFNLFVBQVUsQyxTQzNFckcxVSxFQUFPQyxRQUFVbVksUUFBUSxnQixVQ0F6QnBZLEVBQU9DLFFBQVVtWSxRQUFRLEssVUNBekJwWSxFQUFPQyxRQUFVbVksUUFBUSxNLFNDQXpCcFksRUFBT0MsUUFBVW1ZLFFBQVEsSyxzaUJDQ3JCQyxFQUEyQixDQUFDLEdBR2hDLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJ0VyxJQUFqQnVXLEVBQ0gsT0FBT0EsRUFBYXZZLFFBR3JCLElBQUlELEVBQVNxWSxFQUF5QkUsR0FBWSxDQUdqRHRZLFFBQVMsQ0FBQyxHQU9YLE9BSEF3WSxFQUFvQkYsR0FBVUcsS0FBSzFZLEVBQU9DLFFBQVNELEVBQVFBLEVBQU9DLFFBQVNxWSxHQUdwRXRZLEVBQU9DLE9BQ2YsQ0NuQjBCcVksQ0FBb0IsSSIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb2Nlc3MtbGlzdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL21pbmltaXN0L2luZGV4LmpzIiwid2VicGFjazovL3Byb2Nlc3MtbGlzdC1tYW5hZ2VyLy4vZW50cnkvcG9sLnRzIiwid2VicGFjazovL3Byb2Nlc3MtbGlzdC1tYW5hZ2VyLy4vc3JjL2RhZW1vbi50cyIsIndlYnBhY2s6Ly9wcm9jZXNzLWxpc3QtbWFuYWdlci8uL3NyYy9nbG9iYWwudHMiLCJ3ZWJwYWNrOi8vcHJvY2Vzcy1saXN0LW1hbmFnZXIvLi9zcmMvbG9nZ2VyLnRzIiwid2VicGFjazovL3Byb2Nlc3MtbGlzdC1tYW5hZ2VyLy4vc3JjL3BvbC50cyIsIndlYnBhY2s6Ly9wcm9jZXNzLWxpc3QtbWFuYWdlci8uL3NyYy9zb2NrZXQudHMiLCJ3ZWJwYWNrOi8vcHJvY2Vzcy1saXN0LW1hbmFnZXIvLi9zcmMvdGVybS50cyIsIndlYnBhY2s6Ly9wcm9jZXNzLWxpc3QtbWFuYWdlci8uL3NyYy91c2FnZS50cyIsIndlYnBhY2s6Ly9wcm9jZXNzLWxpc3QtbWFuYWdlci9leHRlcm5hbCBub2RlLWNvbW1vbmpzIFwiY2hpbGRfcHJvY2Vzc1wiIiwid2VicGFjazovL3Byb2Nlc3MtbGlzdC1tYW5hZ2VyL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJmc1wiIiwid2VicGFjazovL3Byb2Nlc3MtbGlzdC1tYW5hZ2VyL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJuZXRcIiIsIndlYnBhY2s6Ly9wcm9jZXNzLWxpc3QtbWFuYWdlci9leHRlcm5hbCBub2RlLWNvbW1vbmpzIFwib3NcIiIsIndlYnBhY2s6Ly9wcm9jZXNzLWxpc3QtbWFuYWdlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9wcm9jZXNzLWxpc3QtbWFuYWdlci93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBoYXNLZXkob2JqLCBrZXlzKSB7XG5cdHZhciBvID0gb2JqO1xuXHRrZXlzLnNsaWNlKDAsIC0xKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRvID0gb1trZXldIHx8IHt9O1xuXHR9KTtcblxuXHR2YXIga2V5ID0ga2V5c1trZXlzLmxlbmd0aCAtIDFdO1xuXHRyZXR1cm4ga2V5IGluIG87XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKHgpIHtcblx0aWYgKHR5cGVvZiB4ID09PSAnbnVtYmVyJykgeyByZXR1cm4gdHJ1ZTsgfVxuXHRpZiAoKC9eMHhbMC05YS1mXSskL2kpLnRlc3QoeCkpIHsgcmV0dXJuIHRydWU7IH1cblx0cmV0dXJuICgvXlstK10/KD86XFxkKyg/OlxcLlxcZCopP3xcXC5cXGQrKShlWy0rXT9cXGQrKT8kLykudGVzdCh4KTtcbn1cblxuZnVuY3Rpb24gaXNDb25zdHJ1Y3Rvck9yUHJvdG8ob2JqLCBrZXkpIHtcblx0cmV0dXJuIChrZXkgPT09ICdjb25zdHJ1Y3RvcicgJiYgdHlwZW9mIG9ialtrZXldID09PSAnZnVuY3Rpb24nKSB8fCBrZXkgPT09ICdfX3Byb3RvX18nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmdzLCBvcHRzKSB7XG5cdGlmICghb3B0cykgeyBvcHRzID0ge307IH1cblxuXHR2YXIgZmxhZ3MgPSB7XG5cdFx0Ym9vbHM6IHt9LFxuXHRcdHN0cmluZ3M6IHt9LFxuXHRcdHVua25vd25GbjogbnVsbCxcblx0fTtcblxuXHRpZiAodHlwZW9mIG9wdHMudW5rbm93biA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGZsYWdzLnVua25vd25GbiA9IG9wdHMudW5rbm93bjtcblx0fVxuXG5cdGlmICh0eXBlb2Ygb3B0cy5ib29sZWFuID09PSAnYm9vbGVhbicgJiYgb3B0cy5ib29sZWFuKSB7XG5cdFx0ZmxhZ3MuYWxsQm9vbHMgPSB0cnVlO1xuXHR9IGVsc2Uge1xuXHRcdFtdLmNvbmNhdChvcHRzLmJvb2xlYW4pLmZpbHRlcihCb29sZWFuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdGZsYWdzLmJvb2xzW2tleV0gPSB0cnVlO1xuXHRcdH0pO1xuXHR9XG5cblx0dmFyIGFsaWFzZXMgPSB7fTtcblxuXHRmdW5jdGlvbiBhbGlhc0lzQm9vbGVhbihrZXkpIHtcblx0XHRyZXR1cm4gYWxpYXNlc1trZXldLnNvbWUoZnVuY3Rpb24gKHgpIHtcblx0XHRcdHJldHVybiBmbGFncy5ib29sc1t4XTtcblx0XHR9KTtcblx0fVxuXG5cdE9iamVjdC5rZXlzKG9wdHMuYWxpYXMgfHwge30pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGFsaWFzZXNba2V5XSA9IFtdLmNvbmNhdChvcHRzLmFsaWFzW2tleV0pO1xuXHRcdGFsaWFzZXNba2V5XS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG5cdFx0XHRhbGlhc2VzW3hdID0gW2tleV0uY29uY2F0KGFsaWFzZXNba2V5XS5maWx0ZXIoZnVuY3Rpb24gKHkpIHtcblx0XHRcdFx0cmV0dXJuIHggIT09IHk7XG5cdFx0XHR9KSk7XG5cdFx0fSk7XG5cdH0pO1xuXG5cdFtdLmNvbmNhdChvcHRzLnN0cmluZykuZmlsdGVyKEJvb2xlYW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGZsYWdzLnN0cmluZ3Nba2V5XSA9IHRydWU7XG5cdFx0aWYgKGFsaWFzZXNba2V5XSkge1xuXHRcdFx0W10uY29uY2F0KGFsaWFzZXNba2V5XSkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuXHRcdFx0XHRmbGFncy5zdHJpbmdzW2tdID0gdHJ1ZTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSk7XG5cblx0dmFyIGRlZmF1bHRzID0gb3B0cy5kZWZhdWx0IHx8IHt9O1xuXG5cdHZhciBhcmd2ID0geyBfOiBbXSB9O1xuXG5cdGZ1bmN0aW9uIGFyZ0RlZmluZWQoa2V5LCBhcmcpIHtcblx0XHRyZXR1cm4gKGZsYWdzLmFsbEJvb2xzICYmICgvXi0tW149XSskLykudGVzdChhcmcpKVxuXHRcdFx0fHwgZmxhZ3Muc3RyaW5nc1trZXldXG5cdFx0XHR8fCBmbGFncy5ib29sc1trZXldXG5cdFx0XHR8fCBhbGlhc2VzW2tleV07XG5cdH1cblxuXHRmdW5jdGlvbiBzZXRLZXkob2JqLCBrZXlzLCB2YWx1ZSkge1xuXHRcdHZhciBvID0gb2JqO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGggLSAxOyBpKyspIHtcblx0XHRcdHZhciBrZXkgPSBrZXlzW2ldO1xuXHRcdFx0aWYgKGlzQ29uc3RydWN0b3JPclByb3RvKG8sIGtleSkpIHsgcmV0dXJuOyB9XG5cdFx0XHRpZiAob1trZXldID09PSB1bmRlZmluZWQpIHsgb1trZXldID0ge307IH1cblx0XHRcdGlmIChcblx0XHRcdFx0b1trZXldID09PSBPYmplY3QucHJvdG90eXBlXG5cdFx0XHRcdHx8IG9ba2V5XSA9PT0gTnVtYmVyLnByb3RvdHlwZVxuXHRcdFx0XHR8fCBvW2tleV0gPT09IFN0cmluZy5wcm90b3R5cGVcblx0XHRcdCkge1xuXHRcdFx0XHRvW2tleV0gPSB7fTtcblx0XHRcdH1cblx0XHRcdGlmIChvW2tleV0gPT09IEFycmF5LnByb3RvdHlwZSkgeyBvW2tleV0gPSBbXTsgfVxuXHRcdFx0byA9IG9ba2V5XTtcblx0XHR9XG5cblx0XHR2YXIgbGFzdEtleSA9IGtleXNba2V5cy5sZW5ndGggLSAxXTtcblx0XHRpZiAoaXNDb25zdHJ1Y3Rvck9yUHJvdG8obywgbGFzdEtleSkpIHsgcmV0dXJuOyB9XG5cdFx0aWYgKFxuXHRcdFx0byA9PT0gT2JqZWN0LnByb3RvdHlwZVxuXHRcdFx0fHwgbyA9PT0gTnVtYmVyLnByb3RvdHlwZVxuXHRcdFx0fHwgbyA9PT0gU3RyaW5nLnByb3RvdHlwZVxuXHRcdCkge1xuXHRcdFx0byA9IHt9O1xuXHRcdH1cblx0XHRpZiAobyA9PT0gQXJyYXkucHJvdG90eXBlKSB7IG8gPSBbXTsgfVxuXHRcdGlmIChvW2xhc3RLZXldID09PSB1bmRlZmluZWQgfHwgZmxhZ3MuYm9vbHNbbGFzdEtleV0gfHwgdHlwZW9mIG9bbGFzdEtleV0gPT09ICdib29sZWFuJykge1xuXHRcdFx0b1tsYXN0S2V5XSA9IHZhbHVlO1xuXHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvW2xhc3RLZXldKSkge1xuXHRcdFx0b1tsYXN0S2V5XS5wdXNoKHZhbHVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b1tsYXN0S2V5XSA9IFtvW2xhc3RLZXldLCB2YWx1ZV07XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0QXJnKGtleSwgdmFsLCBhcmcpIHtcblx0XHRpZiAoYXJnICYmIGZsYWdzLnVua25vd25GbiAmJiAhYXJnRGVmaW5lZChrZXksIGFyZykpIHtcblx0XHRcdGlmIChmbGFncy51bmtub3duRm4oYXJnKSA9PT0gZmFsc2UpIHsgcmV0dXJuOyB9XG5cdFx0fVxuXG5cdFx0dmFyIHZhbHVlID0gIWZsYWdzLnN0cmluZ3Nba2V5XSAmJiBpc051bWJlcih2YWwpXG5cdFx0XHQ/IE51bWJlcih2YWwpXG5cdFx0XHQ6IHZhbDtcblx0XHRzZXRLZXkoYXJndiwga2V5LnNwbGl0KCcuJyksIHZhbHVlKTtcblxuXHRcdChhbGlhc2VzW2tleV0gfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcblx0XHRcdHNldEtleShhcmd2LCB4LnNwbGl0KCcuJyksIHZhbHVlKTtcblx0XHR9KTtcblx0fVxuXG5cdE9iamVjdC5rZXlzKGZsYWdzLmJvb2xzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRzZXRBcmcoa2V5LCBkZWZhdWx0c1trZXldID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IGRlZmF1bHRzW2tleV0pO1xuXHR9KTtcblxuXHR2YXIgbm90RmxhZ3MgPSBbXTtcblxuXHRpZiAoYXJncy5pbmRleE9mKCctLScpICE9PSAtMSkge1xuXHRcdG5vdEZsYWdzID0gYXJncy5zbGljZShhcmdzLmluZGV4T2YoJy0tJykgKyAxKTtcblx0XHRhcmdzID0gYXJncy5zbGljZSgwLCBhcmdzLmluZGV4T2YoJy0tJykpO1xuXHR9XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGFyZyA9IGFyZ3NbaV07XG5cdFx0dmFyIGtleTtcblx0XHR2YXIgbmV4dDtcblxuXHRcdGlmICgoL14tLS4rPS8pLnRlc3QoYXJnKSkge1xuXHRcdFx0Ly8gVXNpbmcgW1xcc1xcU10gaW5zdGVhZCBvZiAuIGJlY2F1c2UganMgZG9lc24ndCBzdXBwb3J0IHRoZVxuXHRcdFx0Ly8gJ2RvdGFsbCcgcmVnZXggbW9kaWZpZXIuIFNlZTpcblx0XHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEwNjgzMDgvMTMyMTZcblx0XHRcdHZhciBtID0gYXJnLm1hdGNoKC9eLS0oW149XSspPShbXFxzXFxTXSopJC8pO1xuXHRcdFx0a2V5ID0gbVsxXTtcblx0XHRcdHZhciB2YWx1ZSA9IG1bMl07XG5cdFx0XHRpZiAoZmxhZ3MuYm9vbHNba2V5XSkge1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlICE9PSAnZmFsc2UnO1xuXHRcdFx0fVxuXHRcdFx0c2V0QXJnKGtleSwgdmFsdWUsIGFyZyk7XG5cdFx0fSBlbHNlIGlmICgoL14tLW5vLS4rLykudGVzdChhcmcpKSB7XG5cdFx0XHRrZXkgPSBhcmcubWF0Y2goL14tLW5vLSguKykvKVsxXTtcblx0XHRcdHNldEFyZyhrZXksIGZhbHNlLCBhcmcpO1xuXHRcdH0gZWxzZSBpZiAoKC9eLS0uKy8pLnRlc3QoYXJnKSkge1xuXHRcdFx0a2V5ID0gYXJnLm1hdGNoKC9eLS0oLispLylbMV07XG5cdFx0XHRuZXh0ID0gYXJnc1tpICsgMV07XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5leHQgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQmJiAhKC9eKC18LS0pW14tXS8pLnRlc3QobmV4dClcblx0XHRcdFx0JiYgIWZsYWdzLmJvb2xzW2tleV1cblx0XHRcdFx0JiYgIWZsYWdzLmFsbEJvb2xzXG5cdFx0XHRcdCYmIChhbGlhc2VzW2tleV0gPyAhYWxpYXNJc0Jvb2xlYW4oa2V5KSA6IHRydWUpXG5cdFx0XHQpIHtcblx0XHRcdFx0c2V0QXJnKGtleSwgbmV4dCwgYXJnKTtcblx0XHRcdFx0aSArPSAxO1xuXHRcdFx0fSBlbHNlIGlmICgoL14odHJ1ZXxmYWxzZSkkLykudGVzdChuZXh0KSkge1xuXHRcdFx0XHRzZXRBcmcoa2V5LCBuZXh0ID09PSAndHJ1ZScsIGFyZyk7XG5cdFx0XHRcdGkgKz0gMTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNldEFyZyhrZXksIGZsYWdzLnN0cmluZ3Nba2V5XSA/ICcnIDogdHJ1ZSwgYXJnKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKCgvXi1bXi1dKy8pLnRlc3QoYXJnKSkge1xuXHRcdFx0dmFyIGxldHRlcnMgPSBhcmcuc2xpY2UoMSwgLTEpLnNwbGl0KCcnKTtcblxuXHRcdFx0dmFyIGJyb2tlbiA9IGZhbHNlO1xuXHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBsZXR0ZXJzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdG5leHQgPSBhcmcuc2xpY2UoaiArIDIpO1xuXG5cdFx0XHRcdGlmIChuZXh0ID09PSAnLScpIHtcblx0XHRcdFx0XHRzZXRBcmcobGV0dGVyc1tqXSwgbmV4dCwgYXJnKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICgoL1tBLVphLXpdLykudGVzdChsZXR0ZXJzW2pdKSAmJiBuZXh0WzBdID09PSAnPScpIHtcblx0XHRcdFx0XHRzZXRBcmcobGV0dGVyc1tqXSwgbmV4dC5zbGljZSgxKSwgYXJnKTtcblx0XHRcdFx0XHRicm9rZW4gPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdCgvW0EtWmEtel0vKS50ZXN0KGxldHRlcnNbal0pXG5cdFx0XHRcdFx0JiYgKC8tP1xcZCsoXFwuXFxkKik/KGUtP1xcZCspPyQvKS50ZXN0KG5leHQpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHNldEFyZyhsZXR0ZXJzW2pdLCBuZXh0LCBhcmcpO1xuXHRcdFx0XHRcdGJyb2tlbiA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAobGV0dGVyc1tqICsgMV0gJiYgbGV0dGVyc1tqICsgMV0ubWF0Y2goL1xcVy8pKSB7XG5cdFx0XHRcdFx0c2V0QXJnKGxldHRlcnNbal0sIGFyZy5zbGljZShqICsgMiksIGFyZyk7XG5cdFx0XHRcdFx0YnJva2VuID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZXRBcmcobGV0dGVyc1tqXSwgZmxhZ3Muc3RyaW5nc1tsZXR0ZXJzW2pdXSA/ICcnIDogdHJ1ZSwgYXJnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRrZXkgPSBhcmcuc2xpY2UoLTEpWzBdO1xuXHRcdFx0aWYgKCFicm9rZW4gJiYga2V5ICE9PSAnLScpIHtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdGFyZ3NbaSArIDFdXG5cdFx0XHRcdFx0JiYgISgvXigtfC0tKVteLV0vKS50ZXN0KGFyZ3NbaSArIDFdKVxuXHRcdFx0XHRcdCYmICFmbGFncy5ib29sc1trZXldXG5cdFx0XHRcdFx0JiYgKGFsaWFzZXNba2V5XSA/ICFhbGlhc0lzQm9vbGVhbihrZXkpIDogdHJ1ZSlcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0c2V0QXJnKGtleSwgYXJnc1tpICsgMV0sIGFyZyk7XG5cdFx0XHRcdFx0aSArPSAxO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGFyZ3NbaSArIDFdICYmICgvXih0cnVlfGZhbHNlKSQvKS50ZXN0KGFyZ3NbaSArIDFdKSkge1xuXHRcdFx0XHRcdHNldEFyZyhrZXksIGFyZ3NbaSArIDFdID09PSAndHJ1ZScsIGFyZyk7XG5cdFx0XHRcdFx0aSArPSAxO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNldEFyZyhrZXksIGZsYWdzLnN0cmluZ3Nba2V5XSA/ICcnIDogdHJ1ZSwgYXJnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIWZsYWdzLnVua25vd25GbiB8fCBmbGFncy51bmtub3duRm4oYXJnKSAhPT0gZmFsc2UpIHtcblx0XHRcdFx0YXJndi5fLnB1c2goZmxhZ3Muc3RyaW5ncy5fIHx8ICFpc051bWJlcihhcmcpID8gYXJnIDogTnVtYmVyKGFyZykpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG9wdHMuc3RvcEVhcmx5KSB7XG5cdFx0XHRcdGFyZ3YuXy5wdXNoLmFwcGx5KGFyZ3YuXywgYXJncy5zbGljZShpICsgMSkpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRPYmplY3Qua2V5cyhkZWZhdWx0cykuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuXHRcdGlmICghaGFzS2V5KGFyZ3YsIGsuc3BsaXQoJy4nKSkpIHtcblx0XHRcdHNldEtleShhcmd2LCBrLnNwbGl0KCcuJyksIGRlZmF1bHRzW2tdKTtcblxuXHRcdFx0KGFsaWFzZXNba10gfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcblx0XHRcdFx0c2V0S2V5KGFyZ3YsIHguc3BsaXQoJy4nKSwgZGVmYXVsdHNba10pO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblxuXHRpZiAob3B0c1snLS0nXSkge1xuXHRcdGFyZ3ZbJy0tJ10gPSBub3RGbGFncy5zbGljZSgpO1xuXHR9IGVsc2Uge1xuXHRcdG5vdEZsYWdzLmZvckVhY2goZnVuY3Rpb24gKGspIHtcblx0XHRcdGFyZ3YuXy5wdXNoKGspO1xuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIGFyZ3Y7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCJcbmltcG9ydCBtaW5pbWlzdCBmcm9tICdtaW5pbWlzdCc7XG5pbXBvcnQgcGFja2FnZUpzb24gZnJvbSBcIi4uL3BhY2thZ2UuanNvblwiO1xuaW1wb3J0IHsgcG9sRGFlbW9uIH0gZnJvbSBcIi4uL3NyYy9wb2xcIjtcbmltcG9ydCB7IHByaW50VXNhZ2UgfSBmcm9tIFwiLi4vc3JjL3VzYWdlXCI7XG5jb25zdCBhcmd2PSBtaW5pbWlzdChwcm9jZXNzLmFyZ3Yuc2xpY2UoMikpO1xuXG5leHBvcnQgY29uc3QgaGVscCA9ICgpID0+IHtcbiAgICBwcmludFVzYWdlKHtcbiAgICAgICAgbmFtZTogJ3BvbCAtIFByb2Nlc3MgbGlzdCBtYW5hZ2VyLicsXG4gICAgICAgIHVzYWdlOiBbXG4gICAgICAgICAgICB7IG5hbWU6IGBwb2wgW29wdGlvbnNdW2NvbW1hbmRdYCwgZGVzYzogJ1Byb2Nlc3MgbGlzdCAocG9sKSBtYW5hZ2VyIGFjY2VwdHMgY29tbWFuZCBhbmQgb3B0aW9ucy4nIH1cbiAgICAgICAgXSxcbiAgICAgICAgb3B0aW9uczogW1xuICAgICAgICAgICAgeyBkZXNjOiAnc2hvdyBoZWxwJywgc3dpdGNoOiAnLWgsIC0taGVscCcsIHR5cGU6ICdib29sZWFuJyB9XG4gICAgICAgIF0sXG4gICAgICAgIGNvbW1hbmRzOiBbXG4gICAgICAgICAgICB7IGRlc2M6IFwiYm9vdCBpbml0IHN5c3RlbVwiLCBzd2l0Y2g6ICdib290JyB9LFxuICAgICAgICAgICAgeyBkZXNjOiBcInN0YXJ0IFtzZXJ2aWNlfC0tYWxsXVwiLCBzd2l0Y2g6ICdzdGFydCcgfSxcbiAgICAgICAgICAgIHsgZGVzYzogXCJyZXN0YXJ0IFtzZXJ2aWNlfC0tYWxsXVwiLCBzd2l0Y2g6ICdyZXN0YXJ0JyB9LFxuICAgICAgICAgICAgeyBkZXNjOiBcInN0b3AgW3NlcnZpY2V8LS1hbGxdXCIsIHN3aXRjaDogJ3N0b3AnIH0sXG4gICAgICAgICAgICB7IGRlc2M6IFwibGlzdCBydW5uaW5nIFtub25lfC0tYWxsXVwiLCBzd2l0Y2g6ICdwcycgfSxcbiAgICAgICAgXSxcbiAgICAgICAgdmVyc2lvbjogcGFja2FnZUpzb24udmVyc2lvbixcbiAgICAgICAgY29weXJpZ2h0OiAnY29weXJpZ2h0QDIwMjMnXG4gICAgfSk7XG4gICAgcHJvY2Vzcy5leGl0KDApO1xufVxuaWYgKGFyZ3YuaCB8fCBhcmd2LmhlbHApIHtcbiAgICBoZWxwKCk7XG59XG5cbnBvbERhZW1vbihhcmd2KTsiLCJpbXBvcnQgbmV0IGZyb20gJ25ldCc7XG5pbXBvcnQgeyBtc2dUb0xvZyB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IHRlcm0gfSBmcm9tIFwiLi90ZXJtXCI7XG5cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBPTF9TRVRVUCB7XG4gICAgc2VydmljZU5hbWU/OiBzdHJpbmdcbiAgICBzc09uU3RhcnQ6IFBPTF9TRVRVUF9TVEFSVFxuICAgIHNzT25TdG9wOiBQT0xfU0VUVVBfU1RPUFxuICAgIHNzT25Mb2dpbjogUE9MX1NFVFVQX1NUQVJUXG4gICAgb25TdGFydD86IChzczogUE9MX1NFVFVQX1NUQVJUKSA9PiBQcm9taXNlPGFueT5cbiAgICBvblN0b3A/OiAoc3M6IFBPTF9TRVRVUF9TVE9QKSA9PiBQcm9taXNlPGFueT5cbiAgICBvbkxvZ2luPzogKHNzOiBQT0xfU0VUVVBfU1RBUlQpID0+IFByb21pc2U8YW55PlxufVxuXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQT0xfU0VUVVBfU1RBUlQge1xuICAgIGNsaTogUE9MX1NFVFVQX0NMSVxuICAgIGV4ZWM6IFBPTF9TRVRVUF9FWEVDXG4gICAgdG9Mb2c/OiAoc3RyOiBzdHJpbmcpID0+IGFueVxufVxuXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQT0xfU0VUVVBfU1RPUCB7XG4gICAgY2xpOiBQT0xfU0VUVVBfQ0xJXG4gICAgc3RvcEFsbD86ICgpID0+IFByb21pc2U8dm9pZD5cbiAgICB0b0xvZz86IChzdHI6IHN0cmluZykgPT4gYW55XG59XG5cbmV4cG9ydCB0eXBlIFBPTF9DTEJfTUVUSE9EID0gKHZhbHVlPzogdW5rbm93bikgPT4gdm9pZFxuXG5cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBPTF9MT0dHRVIge1xuICAgIHdyaXRlOiAoLi4uZGF0YTogYW55W10pID0+IGFueVxuICAgIGxvZzogKC4uLmRhdGE6IGFueVtdKSA9PiBhbnlcbiAgICB3YXJuOiAoLi4uZGF0YTogYW55W10pID0+IGFueVxuICAgIGVycjogKC4uLmRhdGE6IGFueVtdKSA9PiBhbnlcbiAgICBlbmQ6IFBPTF9DTEJfTUVUSE9EXG59XG5cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBPTF9TRVRVUF9DTEkge1xuICAgIG5vRXJyPzogUE9MX1NFVFVQX0NMSVxuICAgIHNwbGl0QnlMaW5lPzogUE9MX1NFVFVQX0NMSVxuICAgIHNwbGl0QWxsPzogUE9MX1NFVFVQX0NMSVxuICAgIHdkPzogKHdkOiBzdHJpbmcpID0+IFBPTF9TRVRVUF9DTElcbiAgICBnaWQ/OiAoZ2lkOiBzdHJpbmcpID0+IFBPTF9TRVRVUF9DTElcbiAgICB1aWQ/OiAodWlkOiBzdHJpbmcpID0+IFBPTF9TRVRVUF9DTElcbiAgICBlb2w/OiAoZW9sOiBzdHJpbmcpID0+IFBPTF9TRVRVUF9DTElcbiAgICBkbz86IFBPTF9DTEJfTUVUSE9EXG59XG5cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBPTF9TRVRVUF9FWEVDIHtcbiAgICBpdD86IFBPTF9TRVRVUF9FWEVDXG4gICAgd2Q/OiAod2Q6IHN0cmluZykgPT4gUE9MX1NFVFVQX0VYRUNcbiAgICB1aWQ/OiAodWlkOiBzdHJpbmcpID0+IFBPTF9TRVRVUF9FWEVDXG4gICAgZ2lkPzogKGdpZDogc3RyaW5nKSA9PiBQT0xfU0VUVVBfRVhFQ1xuICAgIGRvPzogUE9MX0NMQl9NRVRIT0Rcbn1cblxuZGVjbGFyZSBpbnRlcmZhY2UgU0VSVklDRVNfREVGIHtcbiAgICBbbmFtZTogc3RyaW5nXTogU0VSVklDRV9ERUZcbn1cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFNFUlZJQ0VfREVGIHtcbiAgICBuYW1lOiBzdHJpbmdcbiAgICBzZXR1cD86IFBPTF9TRVRVUFxuICAgIHBhdGg/OiBzdHJpbmdcbiAgICBydW5uaW5nPzogYm9vbGVhblxuICAgIHN0YXJ0ZWRBdD86IG51bWJlclxuICAgIHN0YXJ0UmVzb2x2ZXI/OiAoKSA9PiB2b2lkXG4gICAgLyoqXG4gICAgICogU0VSVklDRV9TVEFURV9SRUFEWSA9IDAgLS0gYmVmb3JlT25TdGFydFxuICAgICAqIFNFUlZJQ0VfU1RBVEVfVVAgPSAxIC0tIGFmdGVyT25TdGFydEV4ZWNcbiAgICAgKiBTRVJWSUNFX1NUQVRFX0RPV04gPSAyIC0tIGJlZm9yZU9uU3RvcFxuICAgICAqIFNFUlZJQ0VfU1RBVEVfU1RPUCA9IDMgLS0gYWZ0ZXJTdG9wQWxsXG4gICAgICovXG4gICAgc3RhdGU6IG51bWJlclxuICAgIHByb2Nlc3NlczogQXJyYXk8UlVOTklOR19QUk9DRVNTX0RFRj5cbiAgICBpbnRlcnZhbDoge1xuICAgICAgICBiZWZvcmVfb25TdGFydDogTm9kZUpTLlRpbWVvdXQgfCB2b2lkXG4gICAgICAgIGFmdGVyX29uU3RhcnQ6IE5vZGVKUy5UaW1lb3V0IHwgdm9pZFxuICAgICAgICBiZWZvcmVfb25TdG9wOiBOb2RlSlMuVGltZW91dCB8IHZvaWRcbiAgICAgICAgYWZ0ZXJfb25TdG9wOiBOb2RlSlMuVGltZW91dCB8IHZvaWRcbiAgICB9LFxuICAgIGNsaTogQ0xJX0RFRixcbiAgICBleGVjOiBFWEVDX0RFRlxufVxuXG5kZWNsYXJlIGludGVyZmFjZSBSVU5OSU5HX1BST0NFU1NfREVGIHtcbiAgICBwcm9jSWQ6IHN0cmluZ1xuICAgIHByb2NOYW1lOiBzdHJpbmdcbn1cblxuZGVjbGFyZSBpbnRlcmZhY2UgRVhFQ19ERUYge1xuICAgIG9uU3RhcnQ6IFNQQVdOX0RFRiB8IHVuZGVmaW5lZFxuICAgIG9uTG9naW46IFNQQVdOX0RFRiB8IHVuZGVmaW5lZFxufVxuXG5cbmRlY2xhcmUgaW50ZXJmYWNlIENMSV9ERUYge1xuICAgIGJlZm9yZV9vblN0YXJ0OiBTUEFXTlNfREVGXG4gICAgYWZ0ZXJfb25TdGFydDogU1BBV05TX0RFRlxuICAgIGJlZm9yZV9vblN0b3A6IFNQQVdOU19ERUZcbiAgICBhZnRlcl9vblN0b3A6IFNQQVdOU19ERUZcbiAgICBiZWZvcmVfb25Mb2dpbjogU1BBV05TX0RFRlxuICAgIGFmdGVyX29uTG9naW46IFNQQVdOU19ERUZcbn1cblxuZGVjbGFyZSBpbnRlcmZhY2UgU1BBV05TX0RFRiB7XG4gICAgW25hbWU6IHN0cmluZ106IFNQQVdOX0RFRlxuXG59XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBTUEFXTl9ERUYge1xuICAgIHByb2c/OiBzdHJpbmdcbiAgICBwYXJhbXM/OiBzdHJpbmdbXVxuICAgIHByb21pc2U/OiBQcm9taXNlPGFueT5cbiAgICBvcHRpb25zPzogYW55XG4gICAgdGltZXN0YW1wPzogbnVtYmVyXG59XG5cblxuY2xhc3MgUG9sRGFlbW9uQ2xhc3Mge1xuXG4gICAgcHJpdmF0ZSBTRVJWSUNFX1NUQVRFID0ge1xuICAgICAgICBSRUFEWTogeyBuYW1lOiBcIlNFUlZJQ0VfU1RBVEVfUkVBRFlcIiwgc3RhdGU6IDAgfSxcbiAgICAgICAgVVA6IHsgbmFtZTogXCJTRVJWSUNFX1NUQVRFX1VQXCIsIHN0YXRlOiAxIH0sXG4gICAgICAgIERPV046IHsgbmFtZTogXCJTRVJWSUNFX1NUQVRFX0RPV05cIiwgc3RhdGU6IDIgfSxcbiAgICAgICAgU1RPUDogeyBuYW1lOiBcIlNFUlZJQ0VfU1RBVEVfU1RPUFwiLCBzdGF0ZTogMyB9XG4gICAgfTtcblxuICAgIHByaXZhdGUgZGVmYXVsdHMgPSB7XG4gICAgICAgIENMSV9QUkVfSU5URVJWQUw6IDUwLFxuICAgICAgICBDTElfSU5URVJWQUw6IDIwMFxuICAgIH07XG5cblxuICAgIHB1YmxpYyBydW5uaW5nID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBzcnY6IFNFUlZJQ0VTX0RFRiA9IHt9O1xuICAgIHByaXZhdGUgbG9naW5TZXJ2aWNlOiBTRVJWSUNFX0RFRiB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICBwdWJsaWMgaW5pdChzZXJ2aWNlTmFtZTogc3RyaW5nLCBwYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zcnZbc2VydmljZU5hbWVdID0gdGhpcy5zcnZbc2VydmljZU5hbWVdID8gdGhpcy5zcnZbc2VydmljZU5hbWVdIDoge1xuICAgICAgICAgICAgcHJvY2Vzc2VzOiBbXSxcbiAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICBuYW1lOiBzZXJ2aWNlTmFtZSxcbiAgICAgICAgICAgIHN0YXRlOiB0aGlzLlNFUlZJQ0VfU1RBVEUuUkVBRFkuc3RhdGUsXG4gICAgICAgICAgICBpbnRlcnZhbDoge1xuICAgICAgICAgICAgICAgIGJlZm9yZV9vblN0YXJ0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgYWZ0ZXJfb25TdGFydDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGJlZm9yZV9vblN0b3A6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBhZnRlcl9vblN0b3A6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGk6IHtcbiAgICAgICAgICAgICAgICBhZnRlcl9vblN0YXJ0OiB7fSxcbiAgICAgICAgICAgICAgICBiZWZvcmVfb25TdGFydDoge30sXG4gICAgICAgICAgICAgICAgYWZ0ZXJfb25TdG9wOiB7fSxcbiAgICAgICAgICAgICAgICBiZWZvcmVfb25TdG9wOiB7fSxcbiAgICAgICAgICAgICAgICBhZnRlcl9vbkxvZ2luOiB7fSxcbiAgICAgICAgICAgICAgICBiZWZvcmVfb25Mb2dpbjoge31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBleGVjOiB7XG4gICAgICAgICAgICAgICAgb25TdGFydDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIG9uTG9naW46IHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNydltzZXJ2aWNlTmFtZV0ucHJvY2Vzc2VzID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLnNydltzZXJ2aWNlTmFtZV07XG4gICAgfVxuXG4gICAgLy8gc3RhcnRSdW5DaGVja2VyKHNlcnZpY2UubmFtZSwgJ2JlZm9yZScsICdvblN0YXJ0JywgJ3N0YXJ0ZWQnLCBsb2dnZXIsIHNlcnZpY2VTdGFydFJlc29sdmVyKTtcbiAgICBzdGFydFJ1bkNoZWNrZXIoc2VydmljZU5hbWU6IHN0cmluZywgcHJlUG9zdFN0YXRlOiAnYmVmb3JlJyB8ICdhZnRlcicsIHN0YXRlOiAnb25TdGFydCcgfCAnb25TdG9wJywgbXNnID0gXCJcIiwgbG9nZ2VyOiBQT0xfTE9HR0VSIHwgbmV0LlNvY2tldCwgcmVzb2x2ZXI6IFBPTF9DTEJfTUVUSE9EIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGludGVydmFsID0gdGhpcy5zcnZbc2VydmljZU5hbWVdLmludGVydmFsO1xuICAgICAgICBjb25zdCBjbGkgPSB0aGlzLnNydltzZXJ2aWNlTmFtZV0uY2xpW2Ake3ByZVBvc3RTdGF0ZX1fJHtzdGF0ZX1gXTtcbiAgICAgICAgY29uc3QgcnVuU3RhdGUgPSBzdGF0ZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKFwic3RhcnRcIikgPyBcInN0YXJ0XCIgOiBcInN0b3BcIjtcblxuICAgICAgICBpZiAoYCR7cHJlUG9zdFN0YXRlfV8ke3N0YXRlfWAgPT09ICdiZWZvcmVfb25TdGFydCcgJiYgcmVzb2x2ZXIpXG4gICAgICAgICAgICB0aGlzLnNydltzZXJ2aWNlTmFtZV0uc3RhcnRSZXNvbHZlciA9IHJlc29sdmVyO1xuXG4gICAgICAgIGNvbnN0IHJ1bkNoZWNrZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoY2xpKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWludGVydmFsW2Ake3ByZVBvc3RTdGF0ZX1fJHtzdGF0ZX1gXSkge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbFtgJHtwcmVQb3N0U3RhdGV9XyR7c3RhdGV9YF0gPSBzZXRJbnRlcnZhbChydW5DaGVja2VyLCAyMDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9nZ2VyLndyaXRlKGAgICAgICAgICB3YWl0aW5nICR7cHJlUG9zdFN0YXRlfSAke3NlcnZpY2VOYW1lfSAke3J1blN0YXRlfSAuLi5gKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGludGVydmFsW2Ake3ByZVBvc3RTdGF0ZX1fJHtzdGF0ZX1gXSkge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbFtgJHtwcmVQb3N0U3RhdGV9XyR7c3RhdGV9YF0gPSBjbGVhckludGVydmFsKGludGVydmFsW2Ake3ByZVBvc3RTdGF0ZX1fJHtzdGF0ZX1gXSEpO1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIud3JpdGUoYFske3Rlcm0uZmMuZ3JlZW59ICBPSyAgJHt0ZXJtLm1jLnJlc2V0QWxsfV0gJHtzZXJ2aWNlTmFtZX0gaXMgJHttc2d9IC4uLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZXIpIHJlc29sdmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoY2xpKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuQ2hlY2tlciwgNTAwKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHJlc29sdmVyKSByZXNvbHZlcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RvcFJ1bkNoZWNrZXIoc2VydmljZU5hbWU6IHN0cmluZywgc3RhZ2U6ICdTdGFydCcpIHtcbiAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSB0aGlzLnNydltzZXJ2aWNlTmFtZV0uaW50ZXJ2YWw7XG5cbiAgICAgICAgaWYgKGludGVydmFsW2BiZWZvcmVfb24ke3N0YWdlfWBdIHx8IGludGVydmFsW2BhZnRlcl9vbiR7c3RhZ2V9YF0pIHtcblxuICAgICAgICAgICAgaWYgKGludGVydmFsW2BiZWZvcmVfb24ke3N0YWdlfWBdKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJ2YWxbYGJlZm9yZV9vbiR7c3RhZ2V9YF0gPSBjbGVhckludGVydmFsKGludGVydmFsW2BiZWZvcmVfb24ke3N0YWdlfWBdISk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3J2W3NlcnZpY2VOYW1lXS5zdGFydFJlc29sdmVyKSB0aGlzLnNydltzZXJ2aWNlTmFtZV0uc3RhcnRSZXNvbHZlcj8uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW50ZXJ2YWxbYGFmdGVyX29uJHtzdGFnZX1gXSkge1xuICAgICAgICAgICAgICAgIGludGVydmFsW2BhZnRlcl9vbiR7c3RhZ2V9YF0gPSBjbGVhckludGVydmFsKGludGVydmFsW2BhZnRlcl9vbiR7c3RhZ2V9YF0hKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldFJ1bm5pbmcoc2VydmljZU5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLnNydltzZXJ2aWNlTmFtZV0ucnVubmluZyA9IHRydWU7XG4gICAgfVxuXG5cbiAgICBhZGRQcm9jZXNzKHNlcnZpY2VOYW1lOiBzdHJpbmcsIHByb2NJZDogc3RyaW5nLCBwcm9jTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc3J2W3NlcnZpY2VOYW1lXS5wcm9jZXNzZXMucHVzaCh7IHByb2NJZCwgcHJvY05hbWUgfSk7XG4gICAgfVxuXG4gICAgYWRkQ2xpKHNlcnZpY2VOYW1lOiBzdHJpbmcsIGZ1bmNOYW1lOiBzdHJpbmcsIHRpbWVzdGFtcDogbnVtYmVyLCBzcGF3bjogU1BBV05fREVGKSB7XG4gICAgICAgIHN3aXRjaCAoZnVuY05hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ29uU3RhcnQnOlxuICAgICAgICAgICAgY2FzZSAnb25Mb2dpbic6XG4gICAgICAgICAgICBjYXNlICdvblN0b3AnOlxuICAgICAgICAgICAgICAgIGNvbnN0IGFmdGVyID0gZnVuY05hbWUgPT09ICdvblN0b3AnID8gcG9sLmlzU3RhdGVTdG9wKHNlcnZpY2VOYW1lKSA6IHRoaXMuc3J2W3NlcnZpY2VOYW1lXS5leGVjW2Z1bmNOYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAoYWZ0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcnZbc2VydmljZU5hbWVdLmNsaVtgYWZ0ZXJfJHtmdW5jTmFtZX1gXVtgJHt0aW1lc3RhbXB9YF0gPSBzcGF3bjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNydltzZXJ2aWNlTmFtZV0uY2xpW2BiZWZvcmVfJHtmdW5jTmFtZX1gXVtgJHt0aW1lc3RhbXB9YF0gPSBzcGF3bjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRFeGVjKHNlcnZpY2VOYW1lOiBzdHJpbmcsIGZ1bmNOYW1lOiBzdHJpbmcsIHRpbWVzdGFtcDogbnVtYmVyLCBzcGF3bjogU1BBV05fREVGKSB7XG4gICAgICAgIHN3aXRjaCAoZnVuY05hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ29uU3RhcnQnOlxuICAgICAgICAgICAgY2FzZSAnb25Mb2dpbic6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3J2W3NlcnZpY2VOYW1lXS5leGVjW2Z1bmNOYW1lXSlcbiAgICAgICAgICAgICAgICAgICAgbXNnVG9Mb2coYG5vdCBwb3NzaWJsZSB0byBleGVjdXRlIHRvIGV4ZSBpbiAke2Z1bmNOYW1lfWAsICdwb2wgICAnLCBzZXJ2aWNlTmFtZSlcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3J2W3NlcnZpY2VOYW1lXS5leGVjW2Z1bmNOYW1lXSA9IHNwYXduO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVsQ2xpKHNlcnZpY2VOYW1lOiBzdHJpbmcsIGZ1bmNOYW1lOiBzdHJpbmcsIHRpbWVzdGFtcDogbnVtYmVyKSB7XG4gICAgICAgIHN3aXRjaCAoZnVuY05hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ29uU3RhcnQnOlxuICAgICAgICAgICAgY2FzZSAnb25TdG9wJzpcbiAgICAgICAgICAgIGNhc2UgJ29uTG9naW4nOlxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuc3J2W3NlcnZpY2VOYW1lXS5jbGlbYGJlZm9yZV8ke2Z1bmNOYW1lfWBdKS5mb3JFYWNoKGsgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5zcnZbc2VydmljZU5hbWVdLmNsaVtgYmVmb3JlXyR7ZnVuY05hbWV9YF1ba11cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnNydltzZXJ2aWNlTmFtZV0uY2xpW2BhZnRlcl8ke2Z1bmNOYW1lfWBdKS5mb3JFYWNoKGsgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5zcnZbc2VydmljZU5hbWVdLmNsaVtgYWZ0ZXJfJHtmdW5jTmFtZX1gXVtrXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVsRXhlYyhzZXJ2aWNlTmFtZTogc3RyaW5nLCBmdW5jTmFtZTogc3RyaW5nLCB0aW1lc3RhbXA6IG51bWJlcikge1xuICAgICAgICBzd2l0Y2ggKGZ1bmNOYW1lKSB7XG4gICAgICAgICAgICBjYXNlICdvblN0YXJ0JzpcbiAgICAgICAgICAgIGNhc2UgJ29uTG9naW4nOlxuICAgICAgICAgICAgICAgIHRoaXMuc3J2W3NlcnZpY2VOYW1lXS5leGVjW2Z1bmNOYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldFNldHVwKHNlcnZpY2VOYW1lOiBzdHJpbmcsIHNldHVwOiBQT0xfU0VUVVApIHtcbiAgICAgICAgdGhpcy5zcnZbc2VydmljZU5hbWVdLnNldHVwID0gc2V0dXA7XG4gICAgfVxuXG4gICAgc2V0TG9naW5TZXJ2aWNlKHNlcnZpY2VOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5sb2dpblNlcnZpY2UgPSB0aGlzLnNydltzZXJ2aWNlTmFtZV07XG4gICAgfVxuXG4gICAgZ2V0TG9naW5TZXJ2aWNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2dpblNlcnZpY2U7XG4gICAgfVxuXG4gICAgc3RhdGVJbml0KHNlcnZpY2VOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zcnZbc2VydmljZU5hbWVdLnN0YXRlID0gdGhpcy5TRVJWSUNFX1NUQVRFLlJFQURZLnN0YXRlO1xuICAgIH1cblxuICAgIGdldChzZXJ2aWNlTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNydltzZXJ2aWNlTmFtZV07XG4gICAgfVxuXG4gICAgaXNTdGF0ZUFmdGVyRG93bihzZXJ2aWNlTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNydltzZXJ2aWNlTmFtZV0uc3RhdGUgPj0gdGhpcy5TRVJWSUNFX1NUQVRFLkRPV04uc3RhdGU7XG4gICAgfVxuXG4gICAgaXNTdGF0ZVN0b3Aoc2VydmljZU5hbWU6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5zcnZbc2VydmljZU5hbWVdLnN0YXRlID09PSB0aGlzLlNFUlZJQ0VfU1RBVEUuU1RPUC5zdGF0ZTtcbiAgICB9XG5cblxuICAgIHNldFN0YXRlUmVhZHkoc2VydmljZU5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLnNydltzZXJ2aWNlTmFtZV0uc3RhdGUgPSB0aGlzLlNFUlZJQ0VfU1RBVEUuUkVBRFkuc3RhdGU7XG4gICAgICAgIHRoaXMuc3J2W3NlcnZpY2VOYW1lXS5ydW5uaW5nID0gZmFsc2U7XG5cbiAgICB9XG5cblxuICAgIHNldFN0YXRlRG93bihzZXJ2aWNlTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc3J2W3NlcnZpY2VOYW1lXS5zdGF0ZSA9IHRoaXMuU0VSVklDRV9TVEFURS5ET1dOLnN0YXRlO1xuICAgIH1cblxuICAgIHNldFN0YXRlU3RvcChzZXJ2aWNlTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc3J2W3NlcnZpY2VOYW1lXS5zdGF0ZSA9IHRoaXMuU0VSVklDRV9TVEFURS5TVE9QLnN0YXRlO1xuICAgIH1cblxuICAgIGdldEFsbFJ1bm5pbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNlcnZpY2VzKCkuZmlsdGVyKHMgPT4gcy5ydW5uaW5nKVxuICAgIH1cblxuICAgIGdldEFsbFN0b3BwZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNlcnZpY2VzKCkuZmlsdGVyKHMgPT4gIXMucnVubmluZylcbiAgICB9XG5cbiAgICBnZXRTZXJ2aWNlcygpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5zcnYpLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGlmIChhLm5hbWUudG9VcHBlckNhc2UoKSA8IGIubmFtZS50b1VwcGVyQ2FzZSgpKSByZXR1cm4gLTE7XG4gICAgICAgICAgICBpZiAoYS5uYW1lLnRvVXBwZXJDYXNlKCkgPiBiLm5hbWUudG9VcHBlckNhc2UoKSkgcmV0dXJuIDE7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0TmFub1NlY1RpbWUoKSB7XG4gICAgICAgIGNvbnN0IGhyVGltZSA9IHByb2Nlc3MuaHJ0aW1lKCk7XG4gICAgICAgIHJldHVybiBoclRpbWVbMF0gKiAxMDAwMDAwMDAwICsgaHJUaW1lWzFdO1xuICAgIH1cblxuXG59XG5cbmV4cG9ydCBjb25zdCBwb2wgPSBuZXcgUG9sRGFlbW9uQ2xhc3MoKTtcbiIsImltcG9ydCB7IHNwYXduLCBzcGF3blN5bmMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcGFja2FnZUpzb24gZnJvbSBcIi4uL3BhY2thZ2UuanNvblwiO1xuaW1wb3J0IHsgUE9MX0xPR0dFUiwgUE9MX1NFVFVQLCBQT0xfU0VUVVBfU1RBUlQsIFBPTF9TRVRVUF9TVE9QLCBwb2wgfSBmcm9tICcuL2RhZW1vbic7XG5pbXBvcnQgeyBMT0dfRklMRV9QQVRILCBMT0dfRklMRV9ST09ULCBtc2dUb0xvZyB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IHRlcm0gfSBmcm9tICcuL3Rlcm0nO1xuXG5cbi8vIGxvZyBzZXR1cFxuZXhwb3J0IGNvbnN0IFRBU0tfSU5ERU5UID0gYCAgICAgICAgYDtcbmV4cG9ydCBjb25zdCBsb2c6IFBPTF9MT0dHRVIgPSB7XG4gICAgd3JpdGU6IGNvbnNvbGUubG9nLFxuICAgIGxvZzogY29uc29sZS5sb2csXG4gICAgd2FybjogY29uc29sZS53YXJuLFxuICAgIGVycjogY29uc29sZS5lcnJvcixcbiAgICBlbmQ6ICgpID0+IHsgfVxufTtcblxuXG4vLyBsb2cgZmlsZSBzZXR1cFxuZnVuY3Rpb24gY2xpKC4uLmFyZ3M6IHN0cmluZ1tdKSB7XG4gICAgY29uc3QgY21kID0gWy4uLmFyZ3VtZW50c107XG4gICAgc3Bhd25TeW5jKGNtZC5zaGlmdCgpLCBbLi4uY21kXSwgeyBlbmNvZGluZzogJ3V0Zi04Jywgc3RkaW86ICdpZ25vcmUnIH0pO1xufVxuaWYgKCFmcy5leGlzdHNTeW5jKExPR19GSUxFX1BBVEgpKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgZnMuYWNjZXNzU3luYyhMT0dfRklMRV9ST09ULCBmcy5jb25zdGFudHMuUl9PSyB8IGZzLmNvbnN0YW50cy5XX09LIHwgZnMuY29uc3RhbnRzLlhfT0spO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZy5sb2coYFske3Rlcm0uZmMucmVkfVJFUVVJUkVEJHt0ZXJtLm1jLnJlc2V0QWxsfV0gUGxlYXNlIGNyZWF0ZSAnL3Zhci9sb2cvcG9sJyBmb2xkZXIgd2l0aCAncncnIGFjY2VzcyBmb3IgdGhlIHJ1bm5pbmcgdXNlciFgKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgIH1cbiAgICBjbGkoYHRvdWNoYCwgTE9HX0ZJTEVfUEFUSCk7XG59XG5cbi8vIHpzaCBwbHVnaW4gc2V0dXBcbmNvbnN0IHBvbFBsdWdpbkZvbGRlciA9IGAke3Byb2Nlc3MuZW52LlpTSH0vY3VzdG9tL3BsdWdpbnMvcG9sYDtcbmNvbnN0IHBvbFBsdWdpblZlcnNpb24gPSBgJHtwb2xQbHVnaW5Gb2xkZXJ9L3BvbC5wbHVnaW4uJHtwYWNrYWdlSnNvbi52ZXJzaW9ufS52ZXJzaW9uYDtcbmlmIChwcm9jZXNzLmVudi5aU0ggJiYgcHJvY2Vzcy5lbnYuWlNILmVuZHNXaXRoKCcub2gtbXktenNoJykgJiYgIWZzLmV4aXN0c1N5bmMocG9sUGx1Z2luVmVyc2lvbikpIHtcbiAgICBjbGkoYG1rZGlyYCwgYC1wYCwgYCR7cG9sUGx1Z2luRm9sZGVyfWApO1xuICAgIGNsaShgdG91Y2hgLCBwb2xQbHVnaW5WZXJzaW9uKTtcbiAgICBjbGkoYGNwYCwgYCR7X19kaXJuYW1lfS8uLi96c2gtcGx1Z2luL3BvbC5wbHVnaW4uenNoYCwgYCR7cG9sUGx1Z2luRm9sZGVyfS9wb2wucGx1Z2luLnpzaGApO1xuICAgIGNsaShgY3BgLCBgJHtfX2Rpcm5hbWV9Ly4uL3pzaC1wbHVnaW4vcGx1Z2luLmpzYCwgYCR7cG9sUGx1Z2luRm9sZGVyfS9wbHVnaW4uanNgKTtcbiAgICBsb2cubG9nKGBbJHt0ZXJtLmZjLmdyZWVufSAgSU5GTyAgJHt0ZXJtLm1jLnJlc2V0QWxsfV0gLm9oLW15LXpzaCBjdXN0b20gcGx1Z2luIGluc3RhbGxlZC4gUGxlYXNlIGFkZCAncG9sJyB0byBlbmFibGVkIHBsdWdpbiBsaXN0IGluICd+Ly56c2hyYycgZmlsZS5gKTtcbn1cblxuLy8gVE9ETyBzZXJ2aWNlIHN0YXRlXG5wcm9jZXNzLmVudi5UWiA9IHByb2Nlc3MuZW52LlRaID8gcHJvY2Vzcy5lbnYuVFogOiBmcy5yZWFkRmlsZVN5bmMoJy9ldGMvdGltZXpvbmUnKS50b1N0cmluZygpLnNwbGl0KCdcXG4nKVswXTtcblxuXG4vLyBnZW5lcmF0ZSBzdGFuZGFyZCBjbGkgYW5kIHRvTG9nIG9iamVjdHNcbmNvbnN0IGNsaUdlbmVyYXRvciA9IChjb250cm9sbGVyOiBQT0xfU0VUVVBfU1RBUlQgfCBQT0xfU0VUVVBfU1RPUCwgYmluZE9iamVjdDogYW55LCB0eXBlOiBhbnkpID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udHJvbGxlci5jbGksICdub0VycicsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IGdsb2JhbFRoaXMuc2VydmljZS5fX3Byb3BfXy5ub0VyciA9IHRydWU7IHJldHVybiBjb250cm9sbGVyLmNsaTsgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb250cm9sbGVyLmNsaSwgJ3NwbGl0QnlMaW5lJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgZ2xvYmFsVGhpcy5zZXJ2aWNlLl9fcHJvcF9fLnNwbGl0QnlMaW5lID0gdHJ1ZTsgcmV0dXJuIGNvbnRyb2xsZXIuY2xpOyB9XG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnRyb2xsZXIuY2xpLCAnc3BsaXRBbGwnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyBnbG9iYWxUaGlzLnNlcnZpY2UuX19wcm9wX18uc3BsaXRBbGwgPSB0cnVlOyByZXR1cm4gY29udHJvbGxlci5jbGk7IH1cbiAgICB9KTtcbiAgICBjb250cm9sbGVyLmNsaS5naWQgPSAoZ2lkID0gJycpID0+IHsgZ2xvYmFsVGhpcy5zZXJ2aWNlLl9fcHJvcF9fLmdpZCA9IGdpZDsgcmV0dXJuIGNvbnRyb2xsZXIuY2xpOyB9O1xuICAgIGNvbnRyb2xsZXIuY2xpLnVpZCA9ICh1aWQgPSAnJykgPT4geyBnbG9iYWxUaGlzLnNlcnZpY2UuX19wcm9wX18udWlkID0gdWlkOyByZXR1cm4gY29udHJvbGxlci5jbGk7IH07XG4gICAgY29udHJvbGxlci5jbGkud2QgPSAod2QgPSAnJykgPT4geyBnbG9iYWxUaGlzLnNlcnZpY2UuX19wcm9wX18uY3dkID0gd2Q7IHJldHVybiBjb250cm9sbGVyLmNsaTsgfTtcbiAgICBjb250cm9sbGVyLmNsaS5lb2wgPSAoZW9sID0gJycpID0+IHsgZ2xvYmFsVGhpcy5zZXJ2aWNlLl9fcHJvcF9fLmVvbCA9IGVvbDsgcmV0dXJuIGNvbnRyb2xsZXIuY2xpOyB9O1xuICAgIGNvbnRyb2xsZXIuY2xpLmRvID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY2xpRG8oWy4uLmFyZ3VtZW50c10sICh0aGlzIGFzIFBPTF9TRVRVUCkuc2VydmljZU5hbWUhKVxuICAgIH1cbiAgICBjb250cm9sbGVyLnRvTG9nID0gZnVuY3Rpb24gKHN0cjogc3RyaW5nKSB7XG4gICAgICAgIG1zZ1RvTG9nKHN0cik7XG4gICAgfVxuICAgIC8vIGJpbmQgc2VydmljZSBuYW1lXG4gICAgY29udHJvbGxlci50b0xvZyA9IGNvbnRyb2xsZXIudG9Mb2cuYmluZCh7IC4uLmJpbmRPYmplY3QsIHR5cGUsIGNvbnRyb2xsZXIgfSk7XG4gICAgY29udHJvbGxlci5jbGkuZG8gPSBjb250cm9sbGVyLmNsaS5kby5iaW5kKHsgLi4uYmluZE9iamVjdCwgdHlwZSwgY29udHJvbGxlciB9KTtcbn1cblxuLy8gZ2VuZXJhdGUgc3RhbmRhcmQgZXhlYyBhbmQgdG9Mb2cgb2JqZWN0c1xuY29uc3QgZXhlY0dlbmVyYXRvciA9IChjb250cm9sbGVyOiBQT0xfU0VUVVBfU1RBUlQsIGJpbmRPYmplY3Q6IGFueSwgdHlwZTogYW55KSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnRyb2xsZXIuZXhlYywgJ2l0Jywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgZ2xvYmFsVGhpcy5zZXJ2aWNlLl9fcHJvcF9fLml0ID0gdHJ1ZTsgcmV0dXJuIGNvbnRyb2xsZXIuZXhlYzsgfVxuICAgIH0pO1xuXG4gICAgY29udHJvbGxlci5leGVjLmdpZCA9IChnaWQgPSAnJykgPT4geyBnbG9iYWxUaGlzLnNlcnZpY2UuX19wcm9wX18uZ2lkID0gZ2lkOyByZXR1cm4gY29udHJvbGxlci5leGVjOyB9O1xuICAgIGNvbnRyb2xsZXIuZXhlYy51aWQgPSAodWlkID0gJycpID0+IHsgZ2xvYmFsVGhpcy5zZXJ2aWNlLl9fcHJvcF9fLnVpZCA9IHVpZDsgcmV0dXJuIGNvbnRyb2xsZXIuZXhlYzsgfTtcbiAgICBjb250cm9sbGVyLmV4ZWMud2QgPSAod2QgPSAnJykgPT4geyBnbG9iYWxUaGlzLnNlcnZpY2UuX19wcm9wX18uY3dkID0gd2Q7IHJldHVybiBjb250cm9sbGVyLmV4ZWM7IH07XG4gICAgY29udHJvbGxlci5leGVjLmRvID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZXhlY0RvKFsuLi5hcmd1bWVudHNdLCAodGhpcyBhcyBQT0xfU0VUVVApLnNlcnZpY2VOYW1lISlcbiAgICB9XG4gICAgLy8gYmluZCBzZXJ2aWNlIG5hbWVcbiAgICBjb250cm9sbGVyLmV4ZWMuZG8gPSBjb250cm9sbGVyLmV4ZWMuZG8uYmluZCh7IC4uLmJpbmRPYmplY3QsIHR5cGUsIGNvbnRyb2xsZXIgfSk7XG59XG5cbmNvbnN0IGV4ZWNEbyA9IChjbWQ6IHN0cmluZ1tdLCBzZXJ2aWNlTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgcHJvZyA9IGNtZC5zaGlmdCgpO1xuICAgIGNvbnN0IHBhcmFtcyA9IFsuLi5jbWRdO1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IHBvbC5nZXROYW5vU2VjVGltZSgpO1xuICAgIGNvbnN0IGZ1bmNOYW1lID0gbmV3IEVycm9yKCkuc3RhY2s/LnNwbGl0KFwiYXQgXCIpWzNdLnNwbGl0KCcgJylbMF0uc3BsaXQoJy4nKVsxXTtcbiAgICBsZXQgb3B0aW9ucyA9IHsgLi4uZ2xvYmFsVGhpcy5zZXJ2aWNlLl9fcHJvcF9fIH07XG4gICAgZ2xvYmFsVGhpcy5zZXJ2aWNlLl9fcHJvcF9fID0ge307XG4gICAgY29uc3QgZW52ID0ge1xuICAgICAgICAuLi5wcm9jZXNzLmVudixcbiAgICAgICAgUE9MX0NMX0VOVjogYF9fUE9MX0NMX18ke3Byb2d9X18ke3RpbWVzdGFtcH1fX0VYRUNfX1BPTF9DTF9fYFxuICAgIH1cblxuICAgIC8vICBtdWx0aXBsZSBleGVjIG5vdCBhbGxvd2VkXG4gICAgaWYgKHBvbC5pc1N0YXRlQWZ0ZXJEb3duKHNlcnZpY2VOYW1lKSB8fCBwb2wuZ2V0KHNlcnZpY2VOYW1lKS5leGVjW2Z1bmNOYW1lISBhcyAnb25TdGFydCcgfCAnb25Mb2dpbiddKVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgICBpZiAob3B0aW9ucy5naWQpIHtcbiAgICAgICAgY29uc3QgZ2lkID0gY2xpU3BsaXRCeUxpbmVTeW5jKCdpZCcsICctZycsIGAke29wdGlvbnMuZ2lkfWApO1xuICAgICAgICBvcHRpb25zLmdpZCA9ICFnaWQuYyA/IE51bWJlcihnaWQub1swXSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMudWlkKSB7XG4gICAgICAgIGNvbnN0IHVpZCA9IGNsaVNwbGl0QnlMaW5lU3luYygnaWQnLCAnLXUnLCBgJHtvcHRpb25zLnVpZH1gKTtcbiAgICAgICAgb3B0aW9ucy51aWQgPSAhdWlkLmMgPyBOdW1iZXIodWlkLm9bMF0pIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGNvbnN0IHNwYXduQ21kID0gc3Bhd24ocHJvZyEsIHBhcmFtcywgeyBjd2Q6IG9wdGlvbnMuY3dkLCBlbnYsIHN0ZGlvOiBvcHRpb25zLml0ID8gJ2luaGVyaXQnIDogdW5kZWZpbmVkLCBnaWQ6IG9wdGlvbnMuZ2lkLCB1aWQ6IG9wdGlvbnMudWlkIH0pO1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShyZXMgPT4ge1xuICAgICAgICBpZiAoIW9wdGlvbnMuaXQpIHtcbiAgICAgICAgICAgIHNwYXduQ21kLnN0ZG91dD8ub24oJ2RhdGEnLCBkYXRhID0+IHtcbiAgICAgICAgICAgICAgICBtc2dUb0xvZyhkYXRhLCAnb3V0ZXhlJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNwYXduQ21kLnN0ZGVycj8ub24oJ2RhdGEnLCBkYXRhID0+IHtcbiAgICAgICAgICAgICAgICBtc2dUb0xvZyhkYXRhLCAnZXJyZXhlJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBzcGF3bkNtZC5vbignY2xvc2UnLCAoYykgPT4ge1xuICAgICAgICAgICAgcG9sLmRlbEV4ZWMoc2VydmljZU5hbWUsIGZ1bmNOYW1lISwgdGltZXN0YW1wKTtcbiAgICAgICAgICAgIHJlcyhjKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcG9sLmFkZEV4ZWMoc2VydmljZU5hbWUsIGZ1bmNOYW1lISwgdGltZXN0YW1wLCB7IHByb2csIHBhcmFtcywgcHJvbWlzZSwgb3B0aW9ucywgdGltZXN0YW1wIH0pXG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbmNvbnN0IGNsaURvID0gKGNtZDogc3RyaW5nW10sIHNlcnZpY2VOYW1lOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBsaW5lczogc3RyaW5nW11bXSA9IFtdO1xuICAgIGNvbnN0IHByb2cgPSBjbWQuc2hpZnQoKTtcbiAgICBjb25zdCBwYXJhbXMgPSBbLi4uY21kXTtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBwb2wuZ2V0TmFub1NlY1RpbWUoKTtcbiAgICBjb25zdCBmdW5jTmFtZSA9IG5ldyBFcnJvcigpLnN0YWNrPy5zcGxpdChcImF0IFwiKVszXS5zcGxpdCgnICcpWzBdLnNwbGl0KCcuJylbMV07XG4gICAgbGV0IG9wdGlvbnMgPSB7IC4uLmdsb2JhbFRoaXMuc2VydmljZS5fX3Byb3BfXyB9O1xuICAgIGdsb2JhbFRoaXMuc2VydmljZS5fX3Byb3BfXyA9IHt9O1xuICAgIGNvbnN0IGVudiA9IHtcbiAgICAgICAgLi4ucHJvY2Vzcy5lbnYsXG4gICAgICAgIFBPTF9DTF9FTlY6IGBfX1BPTF9DTF9fJHtwcm9nfV9fJHt0aW1lc3RhbXB9X19DTElfX1BPTF9DTF9fYFxuICAgIH1cbiAgICBpZiAocG9sLmlzU3RhdGVBZnRlckRvd24oc2VydmljZU5hbWUpICYmIGZ1bmNOYW1lICE9IFwib25TdG9wXCIpXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblxuICAgIGlmIChvcHRpb25zLmdpZCkge1xuICAgICAgICBjb25zdCBnaWQgPSBjbGlTcGxpdEJ5TGluZVN5bmMoJ2lkJywgJy1nJywgYCR7b3B0aW9ucy5naWR9YCk7XG4gICAgICAgIG9wdGlvbnMuZ2lkID0gIWdpZC5jID8gTnVtYmVyKGdpZC5vWzBdKSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy51aWQpIHtcbiAgICAgICAgY29uc3QgdWlkID0gY2xpU3BsaXRCeUxpbmVTeW5jKCdpZCcsICctdScsIGAke29wdGlvbnMudWlkfWApO1xuICAgICAgICBvcHRpb25zLnVpZCA9ICF1aWQuYyA/IE51bWJlcih1aWQub1swXSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3Qgc3Bhd25DbWQgPSBzcGF3bihwcm9nISwgcGFyYW1zLCB7IGN3ZDogb3B0aW9ucy5jd2QsIGVudiwgZ2lkOiBvcHRpb25zLmdpZCwgdWlkOiBvcHRpb25zLnVpZCB9KTtcbiAgICAvLyBjbGlSdW5zW3NldHVwLnR5cGVdW3RpbWVzdGFtcF0gPSB7IHByb2csIHBhcmFtcyB9O1xuICAgIHBvbC5hZGRDbGkoc2VydmljZU5hbWUsIGZ1bmNOYW1lISwgdGltZXN0YW1wLCB7IHByb2csIHBhcmFtcyB9KTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzID0+IHtcbiAgICAgICAgbGV0IF9vdXQgPSAnJztcbiAgICAgICAgc3Bhd25DbWQuc3Rkb3V0Lm9uKCdkYXRhJywgZGF0YSA9PiB7XG4gICAgICAgICAgICBfb3V0ICs9IGRhdGE7XG4gICAgICAgIH0pO1xuICAgICAgICBzcGF3bkNtZC5zdGRlcnIub24oJ2RhdGEnLCBkYXRhID0+IHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5ub0VycikgX291dCArPSBkYXRhO1xuICAgICAgICB9KTtcblxuICAgICAgICBzcGF3bkNtZC5vbignY2xvc2UnLCAoYykgPT4ge1xuICAgICAgICAgICAgLy8gZGVsZXRlIGNsaVJ1bnNbc2V0dXAudHlwZV1bdGltZXN0YW1wXTtcbiAgICAgICAgICAgIHBvbC5kZWxDbGkoc2VydmljZU5hbWUsIGZ1bmNOYW1lISwgdGltZXN0YW1wKTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNwbGl0QWxsIHx8IG9wdGlvbnMuc3BsaXRCeUxpbmUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBfbGluZXMgPSBfb3V0LnNwbGl0KG9wdGlvbnMuZW9sID8gb3B0aW9ucy5lb2wgOiAnXFxuJykuZmlsdGVyKGwgPT4gbCk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3BsaXRCeUxpbmUpIHJlcyh7IG86IF9saW5lcywgYyB9KTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX2xpbmVzLmZvckVhY2gobCA9PiBsaW5lcy5wdXNoKGwuc3BsaXQoL1sgXFx0XS8pKSk7XG4gICAgICAgICAgICAgICAgICAgIHJlcyh7IG86IGxpbmVzLCBjIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXMoeyBvOiBfb3V0LCBjIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDdXN0b21HbG9iYWwge1xuICAgIHNlcnZpY2U6IGFueTtcbn1cblxuZGVjbGFyZSBjb25zdCBnbG9iYWxUaGlzOiB7XG4gICAgc2VydmljZTogYW55O1xufTtcblxuXG5nbG9iYWxUaGlzLnNlcnZpY2UgPSB7XG4gICAgc2V0IHNldHVwKHNldHVwOiBQT0xfU0VUVVApIHtcbiAgICAgICAgY29uc3QgX3NldHVwOiBQT0xfU0VUVVAgPSB7XG4gICAgICAgICAgICAuLi5zZXR1cCxcbiAgICAgICAgICAgIHNlcnZpY2VOYW1lOiAobmV3IEVycm9yKCkuc3RhY2s/LnNwbGl0KFwiYXQgXCIpWzJdKT8udHJpbSgpLnNwbGl0KCcuanM6JylbMF0ucmVwbGFjZSgvLipcXC8vLCAnJyksXG4gICAgICAgICAgICBzc09uU3RhcnQ6IHtcbiAgICAgICAgICAgICAgICBjbGk6IHt9LFxuICAgICAgICAgICAgICAgIGV4ZWM6IHt9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3NPblN0b3A6IHtcbiAgICAgICAgICAgICAgICBjbGk6IHt9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNzT25Mb2dpbjoge1xuICAgICAgICAgICAgICAgIGNsaToge30sXG4gICAgICAgICAgICAgICAgZXhlYzoge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBleHRlbmQgX3NldHVwXG4gICAgICAgIGNsaUdlbmVyYXRvcihfc2V0dXAuc3NPblN0YXJ0LCBfc2V0dXAsIFwic3RhcnRcIik7XG4gICAgICAgIGNsaUdlbmVyYXRvcihfc2V0dXAuc3NPblN0b3AsIF9zZXR1cCwgXCJzdG9wXCIpO1xuICAgICAgICBjbGlHZW5lcmF0b3IoX3NldHVwLnNzT25Mb2dpbiwgX3NldHVwLCBcImxvZ2luXCIpO1xuICAgICAgICBleGVjR2VuZXJhdG9yKF9zZXR1cC5zc09uU3RhcnQsIF9zZXR1cCwgXCJzdGFydFwiKTtcbiAgICAgICAgZXhlY0dlbmVyYXRvcihfc2V0dXAuc3NPbkxvZ2luLCBfc2V0dXAsIFwibG9naW5cIik7XG4gICAgICAgIHBvbC5zdGF0ZUluaXQoX3NldHVwLnNlcnZpY2VOYW1lISk7XG4gICAgICAgIHBvbC5zZXRTZXR1cChfc2V0dXAuc2VydmljZU5hbWUhLCBfc2V0dXApO1xuICAgIH0sXG4gICAgX19wcm9wX186IHt9LFxufVxuXG5leHBvcnQgY29uc3QgY2xpU3BsaXRCeUxpbmVTeW5jID0gZnVuY3Rpb24gKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgY29uc3QgX2NtZCA9IFsuLi5hcmd1bWVudHNdO1xuXG4gICAgY29uc3Qgc3Bhd25DbWQgPSBzcGF3blN5bmMoX2NtZC5zaGlmdCgpLCBbLi4uX2NtZF0pO1xuICAgIGNvbnN0IF9saW5lcyA9IHNwYXduQ21kLnN0ZG91dC50b1N0cmluZygpLnNwbGl0KCdcXG4nKS5maWx0ZXIobCA9PiBsKTtcblxuICAgIHJldHVybiB7IG86IF9saW5lcywgYzogc3Bhd25DbWQuc3RhdHVzIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjbGlTcGxpdEJ5TGluZSA9IGZ1bmN0aW9uICguLi5hcmdzOiBhbnlbXSkge1xuICAgIGNvbnN0IF9jbWQgPSBbLi4uYXJndW1lbnRzXTtcblxuICAgIGNvbnN0IHNwYXduQ21kID0gc3Bhd24oX2NtZC5zaGlmdCgpLCBbLi4uX2NtZF0pO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTx7IG86IHN0cmluZ1tdLCBjOiBudW1iZXIgfT4ocmVzID0+IHtcbiAgICAgICAgbGV0IF9vdXQgPSAnJztcbiAgICAgICAgc3Bhd25DbWQuc3Rkb3V0Lm9uKCdkYXRhJywgZGF0YSA9PiB7XG4gICAgICAgICAgICBfb3V0ICs9IGRhdGE7XG4gICAgICAgIH0pO1xuICAgICAgICBzcGF3bkNtZC5zdGRlcnIub24oJ2RhdGEnLCBkYXRhID0+IHtcbiAgICAgICAgICAgIF9vdXQgKz0gZGF0YTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNwYXduQ21kLm9uKCdjbG9zZScsIChjOiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IF9saW5lcyA9IF9vdXQuc3BsaXQoJ1xcbicpLmZpbHRlcihsID0+IGwpO1xuICAgICAgICAgICAgcmVzKHsgbzogX2xpbmVzLCBjIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBsb2dGaWxlOiBQT0xfTE9HR0VSID0ge1xuICAgIHdyaXRlOiBtc2dUb0xvZyxcbiAgICBsb2c6ICgpID0+IHsgfSxcbiAgICB3YXJuOiAoKSA9PiB7IH0sXG4gICAgZXJyOiAoKSA9PiB7IH0sXG4gICAgZW5kOiAoKSA9PiB7IH1cbn07XG5cbmNvbnNvbGUubG9nID0gY29uc29sZVtcImxvZ1wiXS5iaW5kKGdsb2JhbC5jb25zb2xlLCBUQVNLX0lOREVOVCk7XG5jb25zb2xlLndhcm4gPSBjb25zb2xlW1wid2FyblwiXS5iaW5kKGdsb2JhbC5jb25zb2xlLCBUQVNLX0lOREVOVCk7XG5jb25zb2xlLmVycm9yID0gY29uc29sZVtcImVycm9yXCJdLmJpbmQoZ2xvYmFsLmNvbnNvbGUsIFRBU0tfSU5ERU5UKTtcblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBEYXRlIHtcbiAgICAgICAgSVNPU3RyaW5nczogKCkgPT4gc3RyaW5nXG4gICAgfVxufVxuXG4vLyBEYXRlIG92ZXJyaWRlc1xuRGF0ZS5wcm90b3R5cGUuSVNPU3RyaW5ncyA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB0em8gPSAtdGhpcy5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIGNvbnN0IGRpZiA9IHR6byA+PSAwID8gJysnIDogJy0nO1xuICAgIGNvbnN0IHBhZCA9IGZ1bmN0aW9uIChudW06IG51bWJlcikge1xuICAgICAgICByZXR1cm4gKG51bSA8IDEwID8gJzAnIDogJycpICsgbnVtO1xuICAgIH07XG4gICAgY29uc3Qgem9uZSA9IGRpZiArIHBhZChNYXRoLmZsb29yKE1hdGguYWJzKHR6bykgLyA2MCkpICsgJzonICsgcGFkKE1hdGguYWJzKHR6bykgJSA2MClcbiAgICB0aGlzLnNldFRpbWUodGhpcy5nZXRUaW1lKCkgKyAodHpvICogNjAgKiAxMDAwKSk7XG4gICAgcmV0dXJuIHRoaXMudG9JU09TdHJpbmcoKS5yZXBsYWNlKCdaJywgem9uZSk7XG59IiwiaW1wb3J0IGZzIGZyb20gJ2ZzJztcblxuZXhwb3J0IGNvbnN0IExPR19GSUxFX1JPT1QgPSAnL3Zhci9sb2cvcG9sJztcbmV4cG9ydCBjb25zdCBMT0dfRklMRV9QQVRIID0gYCR7TE9HX0ZJTEVfUk9PVH0vcG9sLmxvZ2A7XG5cbmNvbnN0IGxvZ19maWxlID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0oTE9HX0ZJTEVfUEFUSCwgeyBmbGFnczogJ2EnIH0pO1xuXG5leHBvcnQgY29uc3QgbXNnVG9Mb2cgPSAobWVzc2FnZTogc3RyaW5nLCBsZXZlbCA9ICdvdXRsb2cnLCBzZXJ2aWNlPzogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgbG9nID0ge1xuICAgICAgICB0aW1lOiBuZXcgRGF0ZSgpLklTT1N0cmluZ3MoKSxcbiAgICAgICAgbGV2ZWwsXG4gICAgICAgIHNlcnZpY2UsXG4gICAgICAgIG1lc3NhZ2VcbiAgICB9XG4gICAgbG9nX2ZpbGUud3JpdGUoYCR7SlNPTi5zdHJpbmdpZnkobG9nKX1cXG5gKTtcbn0iLCJpbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IG1pbmltaXN0IGZyb20gJ21pbmltaXN0JztcbmltcG9ydCBuZXQgZnJvbSAnbmV0JztcbmltcG9ydCBvcyBmcm9tIFwib3NcIjtcbmltcG9ydCB7IGhlbHAgfSBmcm9tICcuLi9lbnRyeS9wb2wnO1xuaW1wb3J0IHsgcG9sLCBQT0xfQ0xCX01FVEhPRCwgUE9MX0xPR0dFUiwgU0VSVklDRV9ERUYgfSBmcm9tICcuL2RhZW1vbic7XG5pbXBvcnQgeyBjbGlTcGxpdEJ5TGluZSwgbG9nLCBsb2dGaWxlLCBUQVNLX0lOREVOVCB9IGZyb20gJy4vZ2xvYmFsJztcbmltcG9ydCB7IGNsaWVudENyZWF0ZSwgc2VydmVyQ2xlYW51cCwgc2VydmVyQ3JlYXRlIH0gZnJvbSAnLi9zb2NrZXQnO1xuaW1wb3J0IHsgdGVybSB9IGZyb20gJy4vdGVybSc7XG5cbmNvbnN0IFBPTF9EQUVNT05fUlVOTklOR19NU0cgPSBgQW5vdGhlciBwb2wgZGFlbW9uIGlzIHJ1bm5pbmchYDtcbmNvbnN0IFBPU1NJQkxFX09QVElPTlNfTVNHID0gYHBvc3NpYmxlIG9wdGlvbnM6IFstLWFsbHxzZXJ2aWNlX25hbWUuc2VydmljZV1gO1xuY29uc3QgUE9MX0NPTkZJR19GT0xERVIgPSBwcm9jZXNzLmVudi5QT0xfQ09ORklHX0ZPTERFUiA/IFtwcm9jZXNzLmVudi5QT0xfQ09ORklHX0ZPTERFUl0gOiBbXCIvZXRjL3BvbFwiXTtcblBPTF9DT05GSUdfRk9MREVSLnB1c2goYCR7b3MuaG9tZWRpcigpfS8uY29uZmlnL3BvbGApO1xuY29uc3QgZW52cyA9IHsgLi4ucHJvY2Vzcy5lbnYgfTtcblxuXG5leHBvcnQgY29uc3QgcG9sRGFlbW9uID0gYXN5bmMgKGFyZ3Y6IG1pbmltaXN0LlBhcnNlZEFyZ3MpID0+IHtcblxuICAgIGNvbnN0IGxvb2t1cCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgX3JzID0gYXdhaXQgY2xpU3BsaXRCeUxpbmUoJ2ZpbmQnLCAuLi5QT0xfQ09ORklHX0ZPTERFUiwgJy1uYW1lJywgJyouc2VydmljZS5qcycpO1xuICAgICAgICBjb25zdCBfbG9naW5TZXJ2aWNlID0gYXdhaXQgY2xpU3BsaXRCeUxpbmUoJ3JlYWRsaW5rJywgYC1lYCwgLi4uUE9MX0NPTkZJR19GT0xERVIubWFwKGYgPT4gYCR7Zn0vbG9naW4uc2VydmljZS50YXJnZXQuanNgKSk7XG4gICAgICAgIGNvbnN0IF9wb2xEYWVtb25SdW5uaW5nQ2hlY2sgPSBhd2FpdCBjbGlTcGxpdEJ5TGluZSgnc2gnLCBgLWNgLCBgcHMgYXV4IHwgZ3JlcCBcIi4qbm9kZS4qcG9sLipib290JFwiYCk7XG4gICAgICAgIHBvbC5ydW5uaW5nID0gX3BvbERhZW1vblJ1bm5pbmdDaGVjay5vLmxlbmd0aCA8IDIgPyBmYWxzZSA6IHRydWU7XG5cbiAgICAgICAgX3JzLm8uZmlsdGVyKHIgPT4gIXIuaW5jbHVkZXMoJ05vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnknKSkubWFwKHIgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHI/LnNwbGl0KCcvJyk/LnBvcCgpPy5yZXBsYWNlKCcuanMnLCAnJyk7XG4gICAgICAgICAgICBwb2wuaW5pdChuYW1lISwgcik7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgY29uc3QgX3Byb2MgPSBhd2FpdCBjbGlTcGxpdEJ5TGluZSgnZmluZCcsICcvcHJvYycsICctbWF4ZGVwdGgnLCAnMicsICctbmFtZScsICdlbnZpcm9uJyk7XG4gICAgICAgIGNvbnN0IF9ydW5uaW5nX2VudnMgPSBfcHJvYy5vLmZpbHRlcihlID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZnMuYWNjZXNzU3luYyhlLCBmcy5jb25zdGFudHMuUl9PSyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAoY29uc3QgZW52RmlsZSBvZiBfcnVubmluZ19lbnZzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IGZzLnJlYWRGaWxlU3luYyhlbnZGaWxlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlQ29udGVudCA9IGJ1ZmZlci50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGlmIChmaWxlQ29udGVudC5pbmNsdWRlcyhcIl9fUE9MX19cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViUHJvY0luZm8gPSBmaWxlQ29udGVudC5zcGxpdCgnX19QT0xfQ0xfXycpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9jSW5mbyA9IHN1YlByb2NJbmZvWzFdLnNwbGl0KFwiX19cIik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IF9zcnZJbmZvID0gZmlsZUNvbnRlbnQuc3BsaXQoJ19fUE9MX18nKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3J2SW5mbyA9IF9zcnZJbmZvWzFdLnNwbGl0KFwiX19cIik7XG4gICAgICAgICAgICAgICAgICAgIHBvbC5zZXRSdW5uaW5nKHNydkluZm9bMF0pO1xuICAgICAgICAgICAgICAgICAgICBwb2wuYWRkUHJvY2VzcyhzcnZJbmZvWzBdLCBlbnZGaWxlLnNwbGl0KCcvJylbMl0sIHByb2NJbmZvWzBdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIHJlcXVpcmUgYWxsIHNlcnZpY2UgZmlsZVxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IGR5bmFtaWNSZXF1aXJlID0gKHR5cGVvZiBfX3dlYnBhY2tfcmVxdWlyZV9fID09PSAnZnVuY3Rpb24nKSA/IF9fbm9uX3dlYnBhY2tfcmVxdWlyZV9fIDogcmVxdWlyZVxuICAgICAgICBmb3IgKGNvbnN0IHNlcnZpY2Ugb2YgcG9sLmdldFNlcnZpY2VzKCkpIHtcbiAgICAgICAgICAgIGR5bmFtaWNSZXF1aXJlKHNlcnZpY2UucGF0aCEpO1xuICAgICAgICB9XG5cbiAgICAgICAgX2xvZ2luU2VydmljZS5vLmZvckVhY2gocyA9PiB7XG4gICAgICAgICAgICBwb2wuc2V0TG9naW5TZXJ2aWNlKHM/LnNwbGl0KCcvJyk/LnBvcCgpPy5yZXBsYWNlKCcuanMnLCAnJykhKTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBhd2FpdCBsb29rdXAoKTtcblxuICAgIC8vIHN0YXJ0IHByb2Nlc3MgaW1wbGVtZW50YXRpb25cbiAgICBjb25zdCBzdGFydCA9IGFzeW5jIChzZXJ2aWNlTmFtZTogc3RyaW5nIHwgbnVsbCwgbG9nZ2VyOiBQT0xfTE9HR0VSIHwgbmV0LlNvY2tldCkgPT4ge1xuICAgICAgICBpZiAoIXNlcnZpY2VOYW1lKSByZXR1cm47XG4gICAgICAgIGlmICghcG9sLmdldFNlcnZpY2VzKCkuc29tZShzID0+IHMubmFtZSA9PT0gc2VydmljZU5hbWUgfHwgc2VydmljZU5hbWUgPT09IFwiLS1hbGxcIikpIHtcbiAgICAgICAgICAgIGxvZ2dlci53cml0ZShQT1NTSUJMRV9PUFRJT05TX01TRyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcm9taXNlQWxsU2VydmljZTogQXJyYXk8UHJvbWlzZTxhbnk+PiA9IFtdO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBzZXJ2aWNlIG9mIHBvbC5nZXRTZXJ2aWNlcygpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlcnZpY2VOYW1lICE9PSBcIi0tYWxsXCIgJiYgc2VydmljZS5uYW1lICE9PSBzZXJ2aWNlTmFtZSkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICBsZXQgc2VydmljZVN0YXJ0UmVzb2x2ZXI6IFBPTF9DTEJfTUVUSE9EID0gKCkgPT4geyB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IHNydiA9IHBvbC5nZXQoc2VydmljZS5uYW1lKTtcbiAgICAgICAgICAgICAgICBwcm9taXNlQWxsU2VydmljZS5wdXNoKG5ldyBQcm9taXNlKHIgPT4gc2VydmljZVN0YXJ0UmVzb2x2ZXIgPSByKSk7XG4gICAgICAgICAgICAgICAgcG9sLnN0YXRlSW5pdChzZXJ2aWNlLm5hbWUpO1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvbC5nZXRBbGxSdW5uaW5nKCkuc29tZShzID0+IHMubmFtZSA9PT0gc2VydmljZS5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndyaXRlKGBbJHt0ZXJtLmZjLnllbGxvd30gV0FSTiAke3Rlcm0ubWMucmVzZXRBbGx9XSAke3NlcnZpY2UubmFtZX0gaXMgYWxyZWFkeSBydW5uaW5nIC4uLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZVN0YXJ0UmVzb2x2ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcnYuc2V0dXA/Lm9uU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmVudnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUE9MOiBgX19QT0xfXyR7c2VydmljZS5uYW1lfV9fJHtwb2wuZ2V0TmFub1NlY1RpbWUoKX1fX1BPTF9fYFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci53cml0ZShgWyR7dGVybS5mYy5ncmVlbn0gIE9LICAke3Rlcm0ubWMucmVzZXRBbGx9XSBzdGFydCAke3NlcnZpY2UubmFtZX0gLi4uYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcnYuc2V0dXAub25TdGFydChzcnYuc2V0dXAuc3NPblN0YXJ0KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIGhhbmRsZSByZXN0YXJ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyBoYW5kbGUgaWYgaGFzIHByZSBzdGFydGVkIGNsaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvbC5zdGFydFJ1bkNoZWNrZXIoc2VydmljZS5uYW1lLCAnYWZ0ZXInLCAnb25TdGFydCcsICdzdGFydGVkJywgbG9nRmlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbC5zdGFydFJ1bkNoZWNrZXIoc2VydmljZS5uYW1lLCAnYmVmb3JlJywgJ29uU3RhcnQnLCAnc3RhcnRlZCcsIGxvZ2dlciwgc2VydmljZVN0YXJ0UmVzb2x2ZXIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZVN0YXJ0UmVzb2x2ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci53cml0ZShgWyR7dGVybS5mYy5yZWR9RkFJTEVEJHt0ZXJtLm1jLnJlc2V0QWxsfV0gc3RhcnQgJHtzZXJ2aWNlLm5hbWV9IC4uLmApO1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIud3JpdGUoYCAgICAgICAgJHsoZXJyb3IgYXMgRXJyb3IpLnN0YWNrfWApO1xuICAgICAgICAgICAgICAgICAgICBwb2wuZ2V0KHNlcnZpY2UubmFtZSk/LnN0YXJ0UmVzb2x2ZXI/LigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFByb21pc2UuYWxsKHByb21pc2VBbGxTZXJ2aWNlKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIHN0b3AgcHJvY2VzcyBpbXBsZW1lbnRhdGlvblxuICAgIGNvbnN0IHN0b3AgPSBhc3luYyAoc2VydmljZU5hbWU6IHN0cmluZyB8IG51bGwsIGxvZ2dlcjogUE9MX0xPR0dFUiB8IG5ldC5Tb2NrZXQsIGZvcmNlPzogYm9vbGVhbikgPT4ge1xuICAgICAgICBpZiAoIXBvbC5nZXRTZXJ2aWNlcygpLnNvbWUocyA9PiBzLm5hbWUgPT09IHNlcnZpY2VOYW1lIHx8IHNlcnZpY2VOYW1lID09PSAnLS1hbGwnKSkge1xuICAgICAgICAgICAgbG9nZ2VyLndyaXRlKFBPU1NJQkxFX09QVElPTlNfTVNHKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXBvbC5nZXRBbGxSdW5uaW5nKCkuc29tZShzID0+IHMubmFtZSA9PT0gc2VydmljZU5hbWUpICYmIHNlcnZpY2VOYW1lICE9PSAnLS1hbGwnKSB7XG4gICAgICAgICAgICBsb2dnZXIud3JpdGUoYFske3Rlcm0uZmMueWVsbG93fSBXQVJOICR7dGVybS5tYy5yZXNldEFsbH1dICR7c2VydmljZU5hbWV9IGlzIGFscmVhZHkgc3RvcHBlZCAuLi5gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VydmljZU5hbWUgPT09ICctLWFsbCcpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc3J2IG9mIHBvbC5nZXRTZXJ2aWNlcygpKSB7XG4gICAgICAgICAgICAgICAgcG9sLnNldFN0YXRlRG93bihzcnYubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb2wuc2V0U3RhdGVEb3duKHNlcnZpY2VOYW1lISk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcm9taXNlQWxsU2VydmljZTogUHJvbWlzZTxhbnk+W10gPSBbXTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlOiBQT0xfQ0xCX01FVEhPRCkgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBzcnYgb2YgcG9sLmdldEFsbFJ1bm5pbmcoKSkge1xuICAgICAgICAgICAgICAgIGlmIChzZXJ2aWNlTmFtZSA9PT0gJy0tYWxsJyB8fCBzZXJ2aWNlTmFtZSA9PT0gc3J2Lm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNlcnZpY2VTdG9wUmVzb2x2ZXI6IFBPTF9DTEJfTUVUSE9EID0gKCkgPT4geyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJlU3RvcFJlc29sdmVyOiBQT0xfQ0xCX01FVEhPRCA9ICgpID0+IHsgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RTdG9wUmVzb2x2ZXI6IFBPTF9DTEJfTUVUSE9EID0gKCkgPT4geyB9O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9taXNlQWxsUHJlUG9zdFN0b3BEb25lID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFByb21pc2UociA9PiBwcmVTdG9wUmVzb2x2ZXIgPSByKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQcm9taXNlKHIgPT4gcG9zdFN0b3BSZXNvbHZlciA9IHIpXTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBfc3RvcCA9IGFzeW5jIChzZXJ2aWNlOiBTRVJWSUNFX0RFRikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNydiA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2wuc3RvcFJ1bkNoZWNrZXIoc2VydmljZS5uYW1lLCAnU3RhcnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcCBvZiBzZXJ2aWNlLnByb2Nlc3Nlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBoZWFkTXNnID0gVEFTS19JTkRFTlQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNydiAhPT0gc2VydmljZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNydiA9IHNlcnZpY2UubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZE1zZyA9IGBbJHt0ZXJtLmZjLmdyZWVufSBTVE9QICR7dGVybS5tYy5yZXNldEFsbH1dYDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2lsbCA9IGZvcmNlID8gWydraWxsJywgJy05JywgcC5wcm9jSWRdIDogWydraWxsJywgcC5wcm9jSWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgYyB9ID0gYXdhaXQgY2xpU3BsaXRCeUxpbmUoLi4ua2lsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIud3JpdGUoYCR7aGVhZE1zZ30gJHtzZXJ2aWNlLm5hbWV9IHNlcnZpY2Ugd2l0aCBwcm9jL3BpZFske3AucHJvY05hbWV9LyR7cC5wcm9jSWR9XSAuLi5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZUFsbFNlcnZpY2UucHVzaChuZXcgUHJvbWlzZShyID0+IChzZXJ2aWNlU3RvcFJlc29sdmVyIGFzIGFueSkgPSByKSk7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3J2LnNldHVwPy5vblN0b3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcnYuc2V0dXAuc3NPblN0b3Auc3RvcEFsbCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyBoYW5kbGUgaWYgaGFzIHByZSBzdGFydGVkIGNsaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBfc3RvcChzcnYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2wuc2V0U3RhdGVTdG9wKHNydi5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9sLnN0YXJ0UnVuQ2hlY2tlcihzcnYubmFtZSwgJ2FmdGVyJywgJ29uU3RvcCcsICdzdG9wcGVkJywgbG9nZ2VyLCBwb3N0U3RvcFJlc29sdmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNydi5zZXR1cC5vblN0b3Aoc3J2LnNldHVwLnNzT25TdG9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2wuc3RhcnRSdW5DaGVja2VyKHNydi5uYW1lLCAnYmVmb3JlJywgJ29uU3RvcCcsICdzdG9wcGVkJywgbG9nZ2VyLCBwcmVTdG9wUmVzb2x2ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVTdG9wUmVzb2x2ZXIoKTsgcG9zdFN0b3BSZXNvbHZlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IF9zdG9wKHNydik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKHByb21pc2VBbGxQcmVQb3N0U3RvcERvbmUpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VTdG9wUmVzb2x2ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgcmVhZHkgc3RhdGUgZm9yIHRoZSBuZXh0IGNpcmNsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2wuc2V0U3RhdGVSZWFkeShzcnYubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci53cml0ZShgWyR7dGVybS5mYy5yZWR9RkFJTEVEJHt0ZXJtLm1jLnJlc2V0QWxsfV0gc3RvcCAke3Nydi5uYW1lfSAuLi5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VTdG9wUmVzb2x2ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZXJ2aWNlTmFtZSA9PT0gJy0tYWxsJykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcyBvZiBwb2wuZ2V0QWxsU3RvcHBlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci53cml0ZShgWyR7dGVybS5mYy55ZWxsb3d9IFdBUk4gJHt0ZXJtLm1jLnJlc2V0QWxsfV0gJHtzLm5hbWV9IGlzIGFscmVhZHkgc3RvcHBlZCAuLi5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlQWxsU2VydmljZSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN3aXRjaCAoYXJndi5fWzBdKSB7XG4gICAgICAgIGNhc2UgXCJib290XCI6XG4gICAgICAgICAgICBpZiAocG9sLnJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBsb2cubG9nKFBPTF9EQUVNT05fUlVOTklOR19NU0cpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHNlcnZlckNyZWF0ZShhc3luYyAobXNnOiBtaW5pbWlzdC5QYXJzZWRBcmdzLCBzb2NrZXQ6IG5ldC5Tb2NrZXQpID0+IHtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAobXNnLl9bMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInN0b3BcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbXNnLl8ubGVuZ3RoIHx8IChtc2cuXy5sZW5ndGggPCAyICYmICFtc2cuYWxsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvY2tldC53cml0ZShQT1NTSUJMRV9PUFRJT05TX01TRyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ja2V0LmVuZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBsb29rdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBzdG9wKG1zZy5fWzFdID8gbXNnLl9bMV0gOiBtc2cuYWxsID8gXCItLWFsbFwiIDogbnVsbCwgc29ja2V0LCBtc2cuZm9yY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvY2tldC5lbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwic3RhcnRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbXNnLl8ubGVuZ3RoIHx8IChtc2cuXy5sZW5ndGggPCAyICYmICFtc2cuYWxsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvY2tldC53cml0ZShQT1NTSUJMRV9PUFRJT05TX01TRyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ja2V0LmVuZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBsb29rdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBzdGFydChtc2cuX1sxXSA/IG1zZy5fWzFdIDogbXNnLmFsbCA/IFwiLS1hbGxcIiA6IG51bGwsIHNvY2tldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ja2V0LmVuZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyZXN0YXJ0XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1zZy5fLmxlbmd0aCB8fCAobXNnLl8ubGVuZ3RoIDwgMiAmJiAhbXNnLmFsbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb2NrZXQud3JpdGUoUE9TU0lCTEVfT1BUSU9OU19NU0cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvY2tldC5lbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgbG9va3VwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IHN0b3AobXNnLl9bMV0gPyBtc2cuX1sxXSA6IG1zZy5hbGwgPyBcIi0tYWxsXCIgOiBudWxsLCBzb2NrZXQsIG1zZy5mb3JjZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIGF3YWl0IHN0YXJ0KG1zZy5fWzFdID8gbXNnLl9bMV0gOiBtc2cuYWxsID8gXCItLWFsbFwiIDogbnVsbCwgc29ja2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb2NrZXQuZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF3YWl0IHN0YXJ0KFwiLS1hbGxcIiwgbG9nKTtcbiAgICAgICAgICAgIGlmIChwb2wuZ2V0TG9naW5TZXJ2aWNlKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2dvdXQgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgc3RvcCBwcm9jZXNzIGlmIHRoZXJlIHdhcyBsb2dpblxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBsb29rdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgc3RvcChcIi0tYWxsXCIsIGxvZyk7XG4gICAgICAgICAgICAgICAgICAgIHNlcnZlckNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBvbC5pc1N0YXRlQWZ0ZXJEb3duKHBvbC5nZXRMb2dpblNlcnZpY2UoKT8ubmFtZSEpKVxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBsb2dvdXQoKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5lbnZzLFxuICAgICAgICAgICAgICAgICAgICAgICAgUE9MOiBgX19QT0xfXyR7cG9sLmdldExvZ2luU2VydmljZSgpPy5uYW1lfV9fJHtwb2wuZ2V0TmFub1NlY1RpbWUoKX1fX1BPTF9fYFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBwb2wuZ2V0TG9naW5TZXJ2aWNlKCk/LnNldHVwPy5vbkxvZ2luPy4ocG9sLmdldExvZ2luU2VydmljZSgpPy5zZXR1cD8uc3NPbkxvZ2luISkudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9sLmdldExvZ2luU2VydmljZSgpPy5leGVjLm9uTG9naW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2wuZ2V0TG9naW5TZXJ2aWNlKCk/LmV4ZWM/Lm9uTG9naW4/LnByb21pc2U/LnRoZW4oYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBsb2dvdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgbG9nb3V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiY29tcGxldGlvblwiOlxuICAgICAgICAgICAgaWYgKGFyZ3YuX1sxXSA9PT0gJ3pzaCcpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuWlNIICYmIHByb2Nlc3MuZW52LlpTSC5lbmRzV2l0aCgnLm9oLW15LXpzaCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvbFBsdWdpbkZvbGRlciA9IGAke3Byb2Nlc3MuZW52LlpTSH0vY3VzdG9tL3BsdWdpbnMvcG9sYDtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgY2xpU3BsaXRCeUxpbmUoYG1rZGlyYCwgYC1wYCwgYCR7cG9sUGx1Z2luRm9sZGVyfWApO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBjbGlTcGxpdEJ5TGluZShgY3BgLCBgJHtfX2Rpcm5hbWV9Ly4uL3pzaC1wbHVnaW4vcG9sLnBsdWdpbi56c2hgLCBgJHtwb2xQbHVnaW5Gb2xkZXJ9L3BvbC5wbHVnaW4uenNoYCk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGNsaVNwbGl0QnlMaW5lKGBjcGAsIGAke19fZGlybmFtZX0vLi4venNoLXBsdWdpbi9wbHVnaW4uanNgLCBgJHtwb2xQbHVnaW5Gb2xkZXJ9L3BsdWdpbi5qc2ApO1xuICAgICAgICAgICAgICAgICAgICBsb2cubG9nKGBbJHt0ZXJtLmZjLmdyZWVufSAgSU5GTyAgJHt0ZXJtLm1jLnJlc2V0QWxsfV0gLm9oLW15LXpzaCBjdXN0b20gcGx1Z2luIGluc3RhbGxlZC4gUGxlYXNlIGFkZCAncG9sJyB0byBlbmFibGVkIHBsdWdpbiBsaXN0IGluICd+Ly56c2hyYycgZmlsZS5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInBzXCI6XG4gICAgICAgICAgICBsZXQgc3J2TmFtZSA9IFwiXCI7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNydiBvZiBwb2wuZ2V0QWxsUnVubmluZygpKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwcm9jIG9mIHNydi5wcm9jZXNzZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGhlYWRNc2cgPSBUQVNLX0lOREVOVDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNydk5hbWUgIT09IHNydi5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcnZOYW1lID0gc3J2Lm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkTXNnID0gYFske3Rlcm0uZmMuZ3JlZW59IFJVTiAke3Rlcm0ubWMucmVzZXRBbGx9XSBgO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxvZy5sb2coaGVhZE1zZywgc3J2Lm5hbWUsIGBzZXJ2aWNlIHdpdGggcHJvYy9waWRbJHtwcm9jLnByb2NOYW1lfS8ke3Byb2MucHJvY0lkfV0gLi4uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFyZ3YuYWxsKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzIG9mIHBvbC5nZXRBbGxTdG9wcGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nLmxvZyhgWyR7dGVybS5mYy55ZWxsb3d9IFNUT1AgJHt0ZXJtLm1jLnJlc2V0QWxsfV1gLCBzLm5hbWUsIGBzZXJ2aWNlIC4uLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwic3RvcFwiOlxuICAgICAgICBjYXNlIFwic3RhcnRcIjpcbiAgICAgICAgY2FzZSBcInJlc3RhcnRcIjpcbiAgICAgICAgICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IGNsaWVudENyZWF0ZSgpO1xuICAgICAgICAgICAgY2xpZW50LndyaXRlKEpTT04uc3RyaW5naWZ5KGFyZ3YpKTtcbiAgICAgICAgICAgIC8vIGNsaWVudENsZWFudXAoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgaGVscCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxufVxuIiwiXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IG1pbmltaXN0IGZyb20gJ21pbmltaXN0JztcbmltcG9ydCBuZXQgZnJvbSAnbmV0JztcbmltcG9ydCB7IGxvZyB9IGZyb20gJy4vZ2xvYmFsJztcbmltcG9ydCB7IG1zZ1RvTG9nIH0gZnJvbSAnLi9sb2dnZXInO1xuXG5jb25zdCBjb25uZWN0aW9uczoge1xuICAgIFtuYW1lOiBzdHJpbmddOiBuZXQuU29ja2V0XG5cbn0gPSB7fTtcbmNvbnN0IHRvTG9nID0gKG1zZzogc3RyaW5nKSA9PiB7IG1zZ1RvTG9nKG1zZywgJ3BvbCAgICcpIH1cbnZhciBzZXJ2ZXI6IG5ldC5TZXJ2ZXIsIGNsaWVudDogbmV0LlNvY2tldDtcblxuLy8gcHJldmVudCBkdXBsaWNhdGUgZXhpdCBtZXNzYWdlc1xudmFyIFNIVVRET1dOID0gZmFsc2U7XG5cbi8vIE91ciBzb2NrZXRcbmNvbnN0IFNPQ0tFVEZJTEUgPSAnL3RtcC9wb2wuc29jayc7XG5cbmZ1bmN0aW9uIF9zZXJ2ZXJDcmVhdGUoc29ja2V0OiBzdHJpbmcsIG9uTXNnID0gYXN5bmMgKG1zZzogbWluaW1pc3QuUGFyc2VkQXJncywgc3RyZWFtOiBuZXQuU29ja2V0KSA9PiB7IH0pIHtcbiAgICB0b0xvZygnU29ja2V0IHNlcnZlcjogY3JlYXRpbmcnKTtcbiAgICBsZXQgc29jaztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSkgPT4ge1xuICAgICAgICBzZXJ2ZXIgPSBuZXQuY3JlYXRlU2VydmVyKGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgICAgICAgICAgIHRvTG9nKCdTb2NrZXQgc2VydmVyOiBjb25uZWN0aW9uIGFja25vd2xlZGdlZCcpO1xuICAgICAgICAgICAgLy8gU3RvcmUgYWxsIGNvbm5lY3Rpb25zIHNvIHdlIGNhbiB0ZXJtaW5hdGUgdGhlbSBpZiB0aGUgc2VydmVyIGNsb3Nlcy5cbiAgICAgICAgICAgIC8vIEFuIG9iamVjdCBpcyBiZXR0ZXIgdGhhbiBhbiBhcnJheSBmb3IgdGhlc2UuXG4gICAgICAgICAgICB2YXIgc2VsZiA9IChEYXRlLm5vdygpKS50b1N0cmluZygpO1xuICAgICAgICAgICAgY29ubmVjdGlvbnNbc2VsZl0gPSBzdHJlYW07XG4gICAgICAgICAgICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0b0xvZygnU29ja2V0IHNlcnZlcjogY2xpZW50IGRpc2Nvbm5lY3RlZCcpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25uZWN0aW9uc1tzZWxmXTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBNZXNzYWdlcyBhcmUgYnVmZmVycy4gdXNlIHRvU3RyaW5nXG4gICAgICAgICAgICBzdHJlYW0ub24oJ2RhdGEnLCBhc3luYyAobXNnOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBfbXNnOiBtaW5pbWlzdC5QYXJzZWRBcmdzID0gSlNPTi5wYXJzZShtc2cudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgb25Nc2coX21zZywgY29ubmVjdGlvbnNbc2VsZl0pO1xuICAgICAgICAgICAgICAgIC8vIHN0cmVhbS53cml0ZSgncXV4Jyk7IC8vIG5lZWQgdG8gYmUgY2FsbCBpbiBwbGFjZSwgY2FuIG5vdCByZWZlcmVuY2UgdG8gd3JpdGUgZnVuY3Rpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KS5saXN0ZW4oc29ja2V0KS5vbignY29ubmVjdGlvbicsIGZ1bmN0aW9uIChfc29ja2V0KSB7XG4gICAgICAgICAgICB0b0xvZygnU29ja2V0IHNlcnZlcjogY2xpZW50IGNvbm5lY3RlZCcpO1xuICAgICAgICAgICAgc29jayA9IF9zb2NrZXQ7XG4gICAgICAgICAgICAvLyBfc29ja2V0LndyaXRlKCdfX2Jvb3AnKTsvLyBzZW5kIHRvIGNsaWVudCBpbW1lZGlhdGVseSBhZnRlciBjb25uZWN0XG4gICAgICAgIH0pO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBjb25zdCBzZXJ2ZXJDbGVhbnVwID0gKCkgPT4ge1xuICAgIGlmICghU0hVVERPV04gJiYgc2VydmVyKSB7XG4gICAgICAgIFNIVVRET1dOID0gdHJ1ZTtcbiAgICAgICAgdG9Mb2coXCJTb2NrZXQgc2VydmVyOiB0ZXJtaW5hdGluZ1wiKTtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKGNvbm5lY3Rpb25zKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCBjbGllbnRzID0gT2JqZWN0LmtleXMoY29ubmVjdGlvbnMpO1xuICAgICAgICAgICAgd2hpbGUgKGNsaWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNsaWVudCA9IGNsaWVudHMucG9wKCkgYXMgc3RyaW5nO1xuICAgICAgICAgICAgICAgIC8vY29ubmVjdGlvbnNbY2xpZW50XS53cml0ZSgnX19kaXNjb25uZWN0Jyk7IC8vIHNlbmQgdG8gY2xpZW50IGltbWVkaWF0ZWx5IGJlZm9yZSBkaXNjb25uZWN0XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbnNbY2xpZW50XS5lbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZXJ2ZXIuY2xvc2UoKTtcbiAgICB9XG59XG5leHBvcnQgY29uc3Qgc2VydmVyQ3JlYXRlID0gYXN5bmMgKG9uTXNnID0gYXN5bmMgKG1zZzogbWluaW1pc3QuUGFyc2VkQXJncywgc3RyZWFtOiBuZXQuU29ja2V0KSA9PiB7IH0pID0+IHtcbiAgICAvLyBjaGVjayBmb3IgZmFpbGVkIGNsZWFudXBcbiAgICB0b0xvZygnU29ja2V0IHNlcnZlcjogY2hlY2tpbmcgZm9yIGxlZnRvdmVyIHNvY2tldCcpO1xuXG4gICAgaWYgKGZzLmV4aXN0c1N5bmMoU09DS0VURklMRSkpIHtcbiAgICAgICAgdG9Mb2coJ1NvY2tldCBzZXJ2ZXI6IHJlbW92aW5nIGxlZnRvdmVyIHNvY2tldC4nKTtcbiAgICAgICAgZnMudW5saW5rU3luYyhTT0NLRVRGSUxFKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0b0xvZygnU29ja2V0IHNlc3RyaW5ncnZlcjogbm8gbGVmdG92ZXIgc29ja2V0IGZvdW5kLicpO1xuICAgIH1cbiAgICAvLyBjbG9zZSBhbGwgY29ubmVjdGlvbnMgd2hlbiB0aGUgdXNlciBkb2VzIENUUkwtQ1xuICAgIHByb2Nlc3Mub24oJ2V4aXQnLCBzZXJ2ZXJDbGVhbnVwKTtcbiAgICByZXR1cm4gX3NlcnZlckNyZWF0ZShTT0NLRVRGSUxFLCBvbk1zZyk7XG59XG5cblxuZXhwb3J0IGNvbnN0IGNsaWVudENsZWFudXAgPSAoKSA9PiB7XG4gICAgaWYgKCFTSFVURE9XTiAmJiBjbGllbnQpIHtcbiAgICAgICAgU0hVVERPV04gPSB0cnVlO1xuICAgICAgICB0b0xvZyhcIlNvY2tldCBjbGllbnQ6IFRlcm1pbmF0aW5nLlwiKTtcbiAgICAgICAgY2xpZW50LmVuZCgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGNsaWVudENyZWF0ZSA9ICgpID0+IHtcbiAgICAvLyBDb25uZWN0IHRvIHNlcnZlci5cbiAgICAvLyBsb2cubG9nKFwiU29ja2V0IGNsaWVudDogY29ubmVjdGluZyB0byBzZXJ2ZXJcIik7XG4gICAgcHJvY2Vzcy5vbignZXhpdCcsIGNsaWVudENsZWFudXApO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxuZXQuU29ja2V0PigocmVzb2x2ZSkgPT4ge1xuICAgICAgICBjbGllbnQgPSBuZXQuY3JlYXRlQ29ubmVjdGlvbihTT0NLRVRGSUxFKVxuICAgICAgICAgICAgLm9uKCdjb25uZWN0JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGxvZy5sb2coXCJTb2NrZXQgY2xpZW50OiBjb25uZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShjbGllbnQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC8vIE1lc3NhZ2VzIGFyZSBidWZmZXJzLiB1c2UgdG9TdHJpbmdcbiAgICAgICAgICAgIC5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhOiBCdWZmZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhU3RyID0gZGF0YS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGxvZy5sb2coZGF0YVN0cik7XG4gICAgICAgICAgICAgICAgLy8gaWYgKGRhdGEgPT09ICdfX2Jvb3AnKSB7XG4gICAgICAgICAgICAgICAgLy8gICAgIGNsaWVudC53cml0ZSgnX19zbm9vdGJvb3BlZCcpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignZXJyb3InLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGxvZy5sb2coJ3BvbCBkYWVtb24gbm90IHJ1bm5pbmcuIHJ1biBgcG9sIGJvb3RgIGZpcnN0IScpOyBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgICAgICB9KS5vbignY2xvc2UnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIGxvZy5sb2coJ1NlcnZlciBjbG9zZWQuJyk7IHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH0pO1xuXG59IiwiLy8gdGVybWluYWwgZGVmaW5pdGlvblxuY29uc3QgdCA9IHtcblxuICAgIC8vIHRlcm1pbmFsIHN0ZG91dFxuICAgIHN0ZG91dDogcHJvY2Vzcy5zdGRvdXQsXG5cbiAgICAvKipcbiAgICAgKiBwcmludCBmb3JtYXRcbiAgICAgKi9cbiAgICBwcmludDogZnVuY3Rpb24gKHN0ciA9IFwiXCIpIHsgdC5zdGRvdXQud3JpdGUoc3RyKTsgcmV0dXJuIHQ7IH0sXG5cbiAgICBib2xkOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcsIGNvZGUgPSBcIlwiKSB7IHJldHVybiB0LnByaW50KHQubWMuYm9sZCArIGNvZGUgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBpdGFsaWM6IGZ1bmN0aW9uIChzdHI6IHN0cmluZywgY29kZSA9IFwiXCIpIHsgcmV0dXJuIHQucHJpbnQodC5tYy5pdGFsaWMgKyBjb2RlICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgdW5kZXJsaW5lOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcsIGNvZGUgPSBcIlwiKSB7IHJldHVybiB0LnByaW50KHQubWMudW5kZXJsaW5lICsgY29kZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGludmVyc2U6IGZ1bmN0aW9uIChzdHI6IHN0cmluZywgY29kZSA9IFwiXCIpIHsgcmV0dXJuIHQucHJpbnQodC5tYy5pbnZlcnNlICsgY29kZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIHN0cmlrZTogZnVuY3Rpb24gKHN0cjogc3RyaW5nLCBjb2RlID0gXCJcIikgeyByZXR1cm4gdC5wcmludCh0Lm1jLnN0cmlrZSArIGNvZGUgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcblxuXG4gICAgZGVmYXVsdENvbG9yOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpIHsgcmV0dXJuIHQucHJpbnQodC5mYy5kZWZhdWx0Q29sb3IgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBibGFjazogZnVuY3Rpb24gKHN0cjogc3RyaW5nKSB7IHJldHVybiB0LnByaW50KHQuZmMuYmxhY2sgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICByZWQ6IGZ1bmN0aW9uIChzdHI6IHN0cmluZykgeyByZXR1cm4gdC5wcmludCh0LmZjLnJlZCArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGdyZWVuOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpIHsgcmV0dXJuIHQucHJpbnQodC5mYy5ncmVlbiArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIHllbGxvdzogZnVuY3Rpb24gKHN0cjogc3RyaW5nKSB7IHJldHVybiB0LnByaW50KHQuZmMueWVsbG93ICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgYmx1ZTogZnVuY3Rpb24gKHN0cjogc3RyaW5nKSB7IHJldHVybiB0LnByaW50KHQuZmMuYmx1ZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIG1hZ2VudGE6IGZ1bmN0aW9uIChzdHI6IHN0cmluZykgeyByZXR1cm4gdC5wcmludCh0LmZjLm1hZ2VudGEgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBjeWFuOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpIHsgcmV0dXJuIHQucHJpbnQodC5mYy5jeWFuICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgd2hpdGU6IGZ1bmN0aW9uIChzdHI6IHN0cmluZykgeyByZXR1cm4gdC5wcmludCh0LmZjLndoaXRlICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgYnJpZ2h0QmxhY2s6IGZ1bmN0aW9uIChzdHI6IHN0cmluZykgeyByZXR1cm4gdC5wcmludCh0LmZjLmJyaWdodEJsYWNrICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgYnJpZ2h0UmVkOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpIHsgcmV0dXJuIHQucHJpbnQodC5mYy5icmlnaHRSZWQgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBicmlnaHRHcmVlbjogZnVuY3Rpb24gKHN0cjogc3RyaW5nKSB7IHJldHVybiB0LnByaW50KHQuZmMuYnJpZ2h0R3JlZW4gKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBicmlnaHRZZWxsb3c6IGZ1bmN0aW9uIChzdHI6IHN0cmluZykgeyByZXR1cm4gdC5wcmludCh0LmZjLmJyaWdodFllbGxvdyArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJyaWdodEJsdWU6IGZ1bmN0aW9uIChzdHI6IHN0cmluZykgeyByZXR1cm4gdC5wcmludCh0LmZjLmJyaWdodEJsdWUgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBicmlnaHRNYWdlbnRhOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpIHsgcmV0dXJuIHQucHJpbnQodC5mYy5icmlnaHRNYWdlbnRhICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgYnJpZ2h0Q3lhbjogZnVuY3Rpb24gKHN0cjogc3RyaW5nKSB7IHJldHVybiB0LnByaW50KHQuZmMuYnJpZ2h0Q3lhbiArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJyaWdodFdoaXRlOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpIHsgcmV0dXJuIHQucHJpbnQodC5mYy5icmlnaHRXaGl0ZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGN1c3RvbUNvbG9yOiBmdW5jdGlvbiAoY29kZU51bWJlcjogbnVtYmVyLCBzdHI6IHN0cmluZykgeyBjb25zdCBjb2RlID0gaXNOYU4oY29kZU51bWJlcikgPyBjb2RlTnVtYmVyIDogYFxceDFiWzM4OzU7JHtjb2RlTnVtYmVyfW1gOyByZXR1cm4gdC5wcmludChjb2RlICsgc3RyICsgdC5tYy5yZXNldEFsbCkgfSxcblxuICAgIGJnRGVmYXVsdENvbG9yOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcsIGZjQ29kZSA9IFwiXCIpIHsgcmV0dXJuIHQucHJpbnQodC5mYy5icmlnaHRXaGl0ZSArIGZjQ29kZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJnQmxhY2s6IGZ1bmN0aW9uIChzdHI6IHN0cmluZywgZmNDb2RlID0gXCJcIikgeyByZXR1cm4gdC5wcmludCh0LmJjLmJsYWNrICsgZmNDb2RlICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgYmdSZWQ6IGZ1bmN0aW9uIChzdHI6IHN0cmluZywgZmNDb2RlID0gXCJcIikgeyByZXR1cm4gdC5wcmludCh0LmJjLnJlZCArIGZjQ29kZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJnR3JlZW46IGZ1bmN0aW9uIChzdHI6IHN0cmluZywgZmNDb2RlID0gXCJcIikgeyByZXR1cm4gdC5wcmludCh0LmJjLmdyZWVuICsgZmNDb2RlICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgYmdZZWxsb3c6IGZ1bmN0aW9uIChzdHI6IHN0cmluZywgZmNDb2RlID0gXCJcIikgeyByZXR1cm4gdC5wcmludCh0LmJjLnllbGxvdyArIGZjQ29kZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJnQmx1ZTogZnVuY3Rpb24gKHN0cjogc3RyaW5nLCBmY0NvZGUgPSBcIlwiKSB7IHJldHVybiB0LnByaW50KHQuYmMuYmx1ZSArIGZjQ29kZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJnTWFnZW50YTogZnVuY3Rpb24gKHN0cjogc3RyaW5nLCBmY0NvZGUgPSBcIlwiKSB7IHJldHVybiB0LnByaW50KHQuYmMubWFnZW50YSArIGZjQ29kZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJnQ3lhbjogZnVuY3Rpb24gKHN0cjogc3RyaW5nLCBmY0NvZGUgPSBcIlwiKSB7IHJldHVybiB0LnByaW50KHQuYmMuY3lhbiArIGZjQ29kZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJnV2hpdGU6IGZ1bmN0aW9uIChzdHI6IHN0cmluZywgZmNDb2RlID0gXCJcIikgeyByZXR1cm4gdC5wcmludCh0LmJjLndoaXRlICsgZmNDb2RlICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgYmdCcmlnaHRCbGFjazogZnVuY3Rpb24gKHN0cjogc3RyaW5nLCBmY0NvZGUgPSBcIlwiKSB7IHJldHVybiB0LnByaW50KHQuYmMuYnJpZ2h0QmxhY2sgKyBmY0NvZGUgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBiZ0JyaWdodFJlZDogZnVuY3Rpb24gKHN0cjogc3RyaW5nLCBmY0NvZGUgPSBcIlwiKSB7IHJldHVybiB0LnByaW50KHQuYmMuYnJpZ2h0UmVkICsgZmNDb2RlICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgYmdCcmlnaHRHcmVlbjogZnVuY3Rpb24gKHN0cjogc3RyaW5nLCBmY0NvZGUgPSBcIlwiKSB7IHJldHVybiB0LnByaW50KHQuYmMuYnJpZ2h0R3JlZW4gKyBmY0NvZGUgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBiZ0JyaWdodFllbGxvdzogZnVuY3Rpb24gKHN0cjogc3RyaW5nLCBmY0NvZGUgPSBcIlwiKSB7IHJldHVybiB0LnByaW50KHQuYmMuYnJpZ2h0WWVsbG93ICsgZmNDb2RlICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgYmdCcmlnaHRCbHVlOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcsIGZjQ29kZSA9IFwiXCIpIHsgcmV0dXJuIHQucHJpbnQodC5iYy5icmlnaHRCbHVlICsgZmNDb2RlICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgYmdCcmlnaHRNYWdlbnRhOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcsIGZjQ29kZSA9IFwiXCIpIHsgcmV0dXJuIHQucHJpbnQodC5iYy5icmlnaHRNYWdlbnRhICsgZmNDb2RlICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgYmdCcmlnaHRDeWFuOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcsIGZjQ29kZSA9IFwiXCIpIHsgcmV0dXJuIHQucHJpbnQodC5iYy5icmlnaHRDeWFuICsgZmNDb2RlICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgYmdCcmlnaHRXaGl0ZTogZnVuY3Rpb24gKHN0cjogc3RyaW5nLCBmY0NvZGUgPSBcIlwiKSB7IHJldHVybiB0LnByaW50KHQuYmMuYnJpZ2h0V2hpdGUgKyBmY0NvZGUgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBjdXN0b21CZ0NvbG9yOiBmdW5jdGlvbiAoY29kZU51bWJlcjogbnVtYmVyLCBzdHI6IHN0cmluZywgZmNDb2RlID0gXCJcIikge1xuICAgICAgICBjb25zdCBjb2RlID0gaXNOYU4oY29kZU51bWJlcikgPyAoY29kZU51bWJlcikudG9TdHJpbmcoKSA6IGBcXHgxYls0ODs1OyR7Y29kZU51bWJlcn1tYDtcbiAgICAgICAgY29uc3QgZkNvZGUgPSBpc05hTihjb2RlTnVtYmVyKSA/IChjb2RlTnVtYmVyKS50b1N0cmluZygpIDogYFxceDFiWzM4OzU7JHtjb2RlTnVtYmVyfW1gO1xuICAgICAgICByZXR1cm4gdC5wcmludChjb2RlICsgZkNvZGUgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTtcbiAgICB9LFxuXG4gICAgLy8gbW9kaWZpZXIgY29kZXNcbiAgICBtYzoge1xuICAgICAgICByZXNldEFsbDogJ1xceDFiWzBtXFx4MWJbMzltXFx4MWJbNDltJyxcbiAgICAgICAgY2xlYXJMaW5lQ3Vyc29yUmlnaHQ6IGBcXHgxYltLYCxcbiAgICAgICAgY2xlYXJMaW5lOiBgXFx4MWJbMktgLFxuICAgICAgICBzdHlsZVJlc2V0OiAnXFx4MWJbMG0nLFxuICAgICAgICBib2xkOiAnXFx4MWJbMW0nLFxuICAgICAgICBpdGFsaWM6ICdcXHgxYlszbScsXG4gICAgICAgIHVuZGVybGluZTogJ1xceDFiWzRtJyxcbiAgICAgICAgaW52ZXJzZTogJ1xceDFiWzdtJyxcbiAgICAgICAgc3RyaWtlOiAnXFx4MWJbOW0nLFxuICAgICAgICBjdXJzb3JIaWRlOiBgXFx4MWJbPzI1bGAsXG4gICAgICAgIGN1cnNvclNob3c6IGBcXHgxYls/MjVoYCxcbiAgICB9LFxuXG4gICAgLy8gRm9yZWdyb3VuZCBjb2xvclxuICAgIGZjOiB7XG4gICAgICAgIGRlZmF1bHRDb2xvcjogJ1xceDFiWzM5bScsXG4gICAgICAgIGJsYWNrOiAnXFx4MWJbMzBtJyxcbiAgICAgICAgcmVkOiAnXFx4MWJbMzFtJyxcbiAgICAgICAgZ3JlZW46ICdcXHgxYlszMm0nLFxuICAgICAgICB5ZWxsb3c6ICdcXHgxYlszM20nLFxuICAgICAgICBibHVlOiAnXFx4MWJbMzRtJyxcbiAgICAgICAgbWFnZW50YTogJ1xceDFiWzM1bScsXG4gICAgICAgIGN5YW46ICdcXHgxYlszNm0nLFxuICAgICAgICB3aGl0ZTogJ1xceDFiWzM3bScsXG4gICAgICAgIGJyaWdodEJsYWNrOiAnXFx4MWJbOTBtJyxcbiAgICAgICAgYnJpZ2h0UmVkOiAnXFx4MWJbOTFtJyxcbiAgICAgICAgYnJpZ2h0R3JlZW46ICdcXHgxYls5Mm0nLFxuICAgICAgICBicmlnaHRZZWxsb3c6ICdcXHgxYls5M20nLFxuICAgICAgICBicmlnaHRCbHVlOiAnXFx4MWJbOTRtJyxcbiAgICAgICAgYnJpZ2h0TWFnZW50YTogJ1xceDFiWzk1bScsXG4gICAgICAgIGJyaWdodEN5YW46ICdcXHgxYls5Nm0nLFxuICAgICAgICBicmlnaHRXaGl0ZTogJ1xceDFiWzk3bScsXG4gICAgICAgIGN1c3RvbUNvbG9yOiBmdW5jdGlvbiAoY29kZTogbnVtYmVyKSB7IHJldHVybiBgXFx4MWJbMzg7NTske2NvZGV9bWA7IH0sXG4gICAgfSxcblxuICAgIC8vIEJhY2tncm91bmQgY29sb3JcbiAgICBiYzoge1xuICAgICAgICBkZWZhdWx0Q29sb3I6ICdcXHgxYls0OW0nLFxuICAgICAgICBibGFjazogJ1xceDFiWzQwbScsXG4gICAgICAgIHJlZDogJ1xceDFiWzQxbScsXG4gICAgICAgIGdyZWVuOiAnXFx4MWJbNDJtJyxcbiAgICAgICAgeWVsbG93OiAnXFx4MWJbNDNtJyxcbiAgICAgICAgYmx1ZTogJ1xceDFiWzQ0bScsXG4gICAgICAgIG1hZ2VudGE6ICdcXHgxYls0NW0nLFxuICAgICAgICBjeWFuOiAnXFx4MWJbNDZtJyxcbiAgICAgICAgd2hpdGU6ICdcXHgxYls0N20nLFxuICAgICAgICBicmlnaHRCbGFjazogJ1xceDFiWzEwMG0nLFxuICAgICAgICBicmlnaHRSZWQ6ICdcXHgxYlsxMDFtJyxcbiAgICAgICAgYnJpZ2h0R3JlZW46ICdcXHgxYlsxMDJtJyxcbiAgICAgICAgYnJpZ2h0WWVsbG93OiAnXFx4MWJbMTAzbScsXG4gICAgICAgIGJyaWdodEJsdWU6ICdcXHgxYlsxMDRtJyxcbiAgICAgICAgYnJpZ2h0TWFnZW50YTogJ1xceDFiWzEwNW0nLFxuICAgICAgICBicmlnaHRDeWFuOiAnXFx4MWJbMTA2bScsXG4gICAgICAgIGJyaWdodFdoaXRlOiAnXFx4MWJbMTA3bScsXG4gICAgICAgIGN1c3RvbUJnQ29sb3I6IGZ1bmN0aW9uIChjb2RlOiBudW1iZXIpIHsgcmV0dXJuIGBcXHgxYls0ODs1OyR7Y29kZX1tYDsgfSxcbiAgICB9XG59O1xuXG5leHBvcnQgY29uc3QgdGVybSA9IHQ7XG4iLCJpbXBvcnQgeyB0ZXJtIH0gZnJvbSAnLi90ZXJtJztcblxuY29uc3QgVVNBR0UgPSB7XG4gICAgbmFtZTogJ05BTUVcXG4nLFxuICAgIHVzYWdlOiAnVVNBR0VcXG4nLFxuICAgIG9wdGlvbnM6ICdPUFRJT05TXFxuJyxcbiAgICBjb21tYW5kczogJ0NPTU1BTkRTXFxuJyxcbiAgICBpbmRlbnQ6ICcgICAgJyxcbiAgICB0eXBlSW5kZW50OiAnICAgJyxcbiAgICBvcHRpb25JbmRlbnQ6IDQsXG4gICAgbWF4U3dpdGNoTGVuZ3RoOiAyNSxcbiAgICBoZWFkZXI6ICdcXG4nLFxufVxuXG5jb25zdCBfZ2V0ID0gKHByb3AgPSAnJykgPT4ge1xuICAgIHJldHVybiBwcm9wICE9PSB1bmRlZmluZWQgJiYgcHJvcC5sZW5ndGggPyBwcm9wIDogdW5kZWZpbmVkO1xufVxuXG5jb25zdCBfcHJpbnRUaXRsZXMgPSAodGl0bGU6IHN0cmluZywgaW5mbzogQXJyYXk8YW55PiA9IFtdLCBib2xkPzogYm9vbGVhbikgPT4ge1xuICAgIGlmIChpbmZvLmxlbmd0aCAmJiBfZ2V0KGluZm9bMF0ubmFtZSkpIHtcbiAgICAgICAgdGVybS5wcmludCh0ZXJtLm1jLmJvbGQgKyBVU0FHRS5oZWFkZXIgKyB0aXRsZSk7XG5cbiAgICAgICAgaW5mby5mb3JFYWNoKGkgPT4ge1xuICAgICAgICAgICAgdGVybS5wcmludCh0ZXJtLm1jLnJlc2V0QWxsKTtcblxuICAgICAgICAgICAgaWYgKGJvbGQpIHRlcm0ucHJpbnQodGVybS5mYy5icmlnaHRXaGl0ZSArIHRlcm0ubWMuYm9sZCk7XG4gICAgICAgICAgICB0ZXJtLnByaW50KGAke1VTQUdFLmluZGVudCArIGkubmFtZX1gKTtcbiAgICAgICAgICAgIGNvbnN0IGRlc2MgPSBfZ2V0KGkuZGVzYyk7XG4gICAgICAgICAgICBpZiAoZGVzYykge1xuICAgICAgICAgICAgICAgIHRlcm0ucHJpbnQodGVybS5tYy5yZXNldEFsbCkucHJpbnQoYFxcbmApO1xuICAgICAgICAgICAgICAgIHRlcm0ucHJpbnQoYCR7VVNBR0UuaW5kZW50fSR7VVNBR0UuaW5kZW50fSR7ZGVzY31gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlcm0ucHJpbnQodGVybS5tYy5yZXNldEFsbCkucHJpbnQoYFxcbmApO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbi8vIHR5cGU6IFtib29sZWFufHN0cmluZ3xudW1iZXJdXG5leHBvcnQgY29uc3QgcHJpbnRVc2FnZSA9ICh1ID0ge1xuICAgIG5hbWU6ICcnLCB1c2FnZTogW3sgbmFtZTogJycsIGRlc2M6ICcnIH1dLCBvcHRpb25zOiBbeyBzd2l0Y2g6ICcnLCBkZXNjOiAnJywgdHlwZTogJycgfV0sXG4gICAgY29tbWFuZHM6IFt7IHN3aXRjaDogJycsIGRlc2M6ICcnIH1dLFxuICAgIGNvcHlyaWdodDogJ2NvcHlyaWdodEAyMDIwJywgdmVyc2lvbjogJzAuMC4xJ1xufSkgPT4ge1xuICAgIF9wcmludFRpdGxlcyhVU0FHRS5uYW1lLCBbeyBuYW1lOiB1Lm5hbWUgfV0pO1xuICAgIF9wcmludFRpdGxlcyhVU0FHRS51c2FnZSwgdS51c2FnZSwgdHJ1ZSk7XG4gICAgaWYgKHUub3B0aW9ucyAmJiB1Lm9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgIGxldCBvcHRpb25UaXRsZVByaW50ZWQgPSBmYWxzZTtcbiAgICAgICAgdS5vcHRpb25zLmZvckVhY2gobyA9PiB7XG4gICAgICAgICAgICBpZiAoby5zd2l0Y2gubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25UaXRsZVByaW50ZWQpIHsgb3B0aW9uVGl0bGVQcmludGVkID0gdHJ1ZTsgdGVybS5wcmludCh0ZXJtLm1jLmJvbGQgKyBVU0FHRS5oZWFkZXIgKyBVU0FHRS5vcHRpb25zICsgdGVybS5tYy5yZXNldEFsbCk7IH1cbiAgICAgICAgICAgICAgICB0ZXJtLnByaW50KGAke3Rlcm0uZmMuYnJpZ2h0V2hpdGUgKyB0ZXJtLm1jLmJvbGR9JHtVU0FHRS5pbmRlbnQgKyBvLnN3aXRjaH1cXG5gKTtcbiAgICAgICAgICAgICAgICB0ZXJtLnByaW50KGAke3Rlcm0ubWMucmVzZXRBbGx9JHtVU0FHRS5pbmRlbnR9JHtVU0FHRS5pbmRlbnR9JHtvLmRlc2N9YCk7XG4gICAgICAgICAgICAgICAgaWYgKG8udHlwZSkgdGVybS5wcmludChgJHt0ZXJtLmZjLmN5YW59IFske28udHlwZX1dYCk7XG4gICAgICAgICAgICAgICAgdGVybS5wcmludChgXFxuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodS5jb21tYW5kcyAmJiB1LmNvbW1hbmRzLmxlbmd0aCkge1xuICAgICAgICBsZXQgb3B0aW9uVGl0bGVQcmludGVkID0gZmFsc2U7XG4gICAgICAgIHUuY29tbWFuZHMuZm9yRWFjaChvID0+IHtcbiAgICAgICAgICAgIGlmIChvLnN3aXRjaC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW9wdGlvblRpdGxlUHJpbnRlZCkgeyBvcHRpb25UaXRsZVByaW50ZWQgPSB0cnVlOyB0ZXJtLnByaW50KHRlcm0ubWMuYm9sZCArIFVTQUdFLmhlYWRlciArIFVTQUdFLmNvbW1hbmRzICsgdGVybS5tYy5yZXNldEFsbCk7IH1cbiAgICAgICAgICAgICAgICB0ZXJtLnByaW50KGAke3Rlcm0uZmMuYnJpZ2h0V2hpdGUgKyB0ZXJtLm1jLmJvbGR9JHtVU0FHRS5pbmRlbnQgKyBvLnN3aXRjaH1cXG5gKTtcbiAgICAgICAgICAgICAgICB0ZXJtLnByaW50KGAke3Rlcm0ubWMucmVzZXRBbGx9JHtVU0FHRS5pbmRlbnR9JHtVU0FHRS5pbmRlbnR9JHtvLmRlc2N9YCk7XG4gICAgICAgICAgICAgICAgdGVybS5wcmludChgXFxuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB0ZXJtLnByaW50KFVTQUdFLmhlYWRlcik7XG4gICAgaWYgKCh1LnZlcnNpb24gJiYgdS52ZXJzaW9uLmxlbmd0aCkgfHwgKHUuY29weXJpZ2h0ICYmIHUuY29weXJpZ2h0Lmxlbmd0aCkpIHRlcm0ucHJpbnQoJz09ICcpO1xuICAgIGlmICh1LnZlcnNpb24gJiYgdS52ZXJzaW9uLmxlbmd0aCkgdGVybS5wcmludChgdiR7dS52ZXJzaW9ufWApO1xuICAgIGlmICh1LmNvcHlyaWdodCAmJiB1LmNvcHlyaWdodC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHUudmVyc2lvbiAmJiB1LnZlcnNpb24ubGVuZ3RoKSB0ZXJtLnByaW50KGAgLSBgKTtcbiAgICAgICAgdGVybS5wcmludCh1LmNvcHlyaWdodCk7XG4gICAgfTtcbiAgICBpZiAoKHUudmVyc2lvbiAmJiB1LnZlcnNpb24ubGVuZ3RoKSB8fCAodS5jb3B5cmlnaHQgJiYgdS5jb3B5cmlnaHQubGVuZ3RoKSkgdGVybS5wcmludCgnID09XFxuXFxuJyk7XG59IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJmc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJuZXRcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwib3NcIik7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NTcpO1xuIl0sIm5hbWVzIjpbImlzTnVtYmVyIiwieCIsInRlc3QiLCJpc0NvbnN0cnVjdG9yT3JQcm90byIsIm9iaiIsImtleSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcmdzIiwib3B0cyIsImZsYWdzIiwiYm9vbHMiLCJzdHJpbmdzIiwidW5rbm93bkZuIiwidW5rbm93biIsImJvb2xlYW4iLCJhbGxCb29scyIsImNvbmNhdCIsImZpbHRlciIsIkJvb2xlYW4iLCJmb3JFYWNoIiwiYWxpYXNlcyIsImFsaWFzSXNCb29sZWFuIiwic29tZSIsIk9iamVjdCIsImtleXMiLCJhbGlhcyIsInkiLCJzdHJpbmciLCJrIiwiZGVmYXVsdHMiLCJkZWZhdWx0IiwiYXJndiIsIl8iLCJzZXRLZXkiLCJ2YWx1ZSIsIm8iLCJpIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwicHJvdG90eXBlIiwiTnVtYmVyIiwiU3RyaW5nIiwiQXJyYXkiLCJsYXN0S2V5IiwiaXNBcnJheSIsInB1c2giLCJzZXRBcmciLCJ2YWwiLCJhcmciLCJhcmdEZWZpbmVkIiwic3BsaXQiLCJub3RGbGFncyIsImluZGV4T2YiLCJzbGljZSIsIm5leHQiLCJtIiwibWF0Y2giLCJsZXR0ZXJzIiwiYnJva2VuIiwiaiIsInN0b3BFYXJseSIsImFwcGx5IiwicHJvY2VzcyIsImhlbHAiLCJwcmludFVzYWdlIiwibmFtZSIsInVzYWdlIiwiZGVzYyIsIm9wdGlvbnMiLCJzd2l0Y2giLCJ0eXBlIiwiY29tbWFuZHMiLCJ2ZXJzaW9uIiwiY29weXJpZ2h0IiwiZXhpdCIsImgiLCJwb2xEYWVtb24iLCJwb2wiLCJjb25zdHJ1Y3RvciIsIlNFUlZJQ0VfU1RBVEUiLCJSRUFEWSIsInN0YXRlIiwiVVAiLCJET1dOIiwiU1RPUCIsIkNMSV9QUkVfSU5URVJWQUwiLCJDTElfSU5URVJWQUwiLCJydW5uaW5nIiwic3J2IiwibG9naW5TZXJ2aWNlIiwiaW5pdCIsInNlcnZpY2VOYW1lIiwicGF0aCIsInRoaXMiLCJwcm9jZXNzZXMiLCJpbnRlcnZhbCIsImJlZm9yZV9vblN0YXJ0IiwiYWZ0ZXJfb25TdGFydCIsImJlZm9yZV9vblN0b3AiLCJhZnRlcl9vblN0b3AiLCJjbGkiLCJhZnRlcl9vbkxvZ2luIiwiYmVmb3JlX29uTG9naW4iLCJleGVjIiwib25TdGFydCIsIm9uTG9naW4iLCJzdGFydFJ1bkNoZWNrZXIiLCJwcmVQb3N0U3RhdGUiLCJtc2ciLCJsb2dnZXIiLCJyZXNvbHZlciIsInJ1blN0YXRlIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsInN0YXJ0UmVzb2x2ZXIiLCJydW5DaGVja2VyIiwic2V0SW50ZXJ2YWwiLCJ3cml0ZSIsImNsZWFySW50ZXJ2YWwiLCJ0ZXJtIiwiZmMiLCJncmVlbiIsIm1jIiwicmVzZXRBbGwiLCJzZXRUaW1lb3V0Iiwic3RvcFJ1bkNoZWNrZXIiLCJzdGFnZSIsInNldFJ1bm5pbmciLCJhZGRQcm9jZXNzIiwicHJvY0lkIiwicHJvY05hbWUiLCJhZGRDbGkiLCJmdW5jTmFtZSIsInRpbWVzdGFtcCIsInNwYXduIiwiaXNTdGF0ZVN0b3AiLCJhZGRFeGVjIiwibXNnVG9Mb2ciLCJkZWxDbGkiLCJkZWxFeGVjIiwic2V0U2V0dXAiLCJzZXR1cCIsInNldExvZ2luU2VydmljZSIsImdldExvZ2luU2VydmljZSIsInN0YXRlSW5pdCIsImdldCIsImlzU3RhdGVBZnRlckRvd24iLCJzZXRTdGF0ZVJlYWR5Iiwic2V0U3RhdGVEb3duIiwic2V0U3RhdGVTdG9wIiwiZ2V0QWxsUnVubmluZyIsImdldFNlcnZpY2VzIiwicyIsImdldEFsbFN0b3BwZWQiLCJ2YWx1ZXMiLCJzb3J0IiwiYSIsImIiLCJ0b1VwcGVyQ2FzZSIsImdldE5hbm9TZWNUaW1lIiwiaHJUaW1lIiwiaHJ0aW1lIiwiY21kIiwiYXJndW1lbnRzIiwic3Bhd25TeW5jIiwic2hpZnQiLCJlbmNvZGluZyIsInN0ZGlvIiwiVEFTS19JTkRFTlQiLCJsb2ciLCJjb25zb2xlIiwid2FybiIsImVyciIsImVycm9yIiwiZW5kIiwiZXhpc3RzU3luYyIsIkxPR19GSUxFX1BBVEgiLCJhY2Nlc3NTeW5jIiwiTE9HX0ZJTEVfUk9PVCIsImNvbnN0YW50cyIsIlJfT0siLCJXX09LIiwiWF9PSyIsInJlZCIsInBvbFBsdWdpbkZvbGRlciIsImVudiIsIlpTSCIsInBvbFBsdWdpblZlcnNpb24iLCJlbmRzV2l0aCIsIl9fZGlybmFtZSIsIlRaIiwicmVhZEZpbGVTeW5jIiwidG9TdHJpbmciLCJjbGlHZW5lcmF0b3IiLCJjb250cm9sbGVyIiwiYmluZE9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2xvYmFsVGhpcyIsInNlcnZpY2UiLCJfX3Byb3BfXyIsIm5vRXJyIiwic3BsaXRCeUxpbmUiLCJzcGxpdEFsbCIsImdpZCIsInVpZCIsIndkIiwiY3dkIiwiZW9sIiwiZG8iLCJjbGlEbyIsInRvTG9nIiwic3RyIiwiYmluZCIsImV4ZWNHZW5lcmF0b3IiLCJpdCIsImV4ZWNEbyIsInByb2ciLCJwYXJhbXMiLCJFcnJvciIsInN0YWNrIiwiUE9MX0NMX0VOViIsIlByb21pc2UiLCJyZXNvbHZlIiwiY2xpU3BsaXRCeUxpbmVTeW5jIiwiYyIsInNwYXduQ21kIiwicHJvbWlzZSIsInJlcyIsInN0ZG91dCIsIm9uIiwiZGF0YSIsInN0ZGVyciIsImxpbmVzIiwiX291dCIsIl9saW5lcyIsImwiLCJfc2V0dXAiLCJ0cmltIiwicmVwbGFjZSIsInNzT25TdGFydCIsInNzT25TdG9wIiwic3NPbkxvZ2luIiwiX2NtZCIsInN0YXR1cyIsImNsaVNwbGl0QnlMaW5lIiwibG9nRmlsZSIsImdsb2JhbCIsIkRhdGUiLCJJU09TdHJpbmdzIiwidHpvIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJwYWQiLCJudW0iLCJ6b25lIiwiTWF0aCIsImZsb29yIiwiYWJzIiwic2V0VGltZSIsImdldFRpbWUiLCJ0b0lTT1N0cmluZyIsImxvZ19maWxlIiwiY3JlYXRlV3JpdGVTdHJlYW0iLCJtZXNzYWdlIiwibGV2ZWwiLCJ0aW1lIiwiSlNPTiIsInN0cmluZ2lmeSIsIlBPU1NJQkxFX09QVElPTlNfTVNHIiwiUE9MX0NPTkZJR19GT0xERVIiLCJob21lZGlyIiwiZW52cyIsImxvb2t1cCIsIl9ycyIsIl9sb2dpblNlcnZpY2UiLCJtYXAiLCJmIiwiX3BvbERhZW1vblJ1bm5pbmdDaGVjayIsInIiLCJwb3AiLCJfcnVubmluZ19lbnZzIiwiZSIsImVudkZpbGUiLCJmaWxlQ29udGVudCIsInByb2NJbmZvIiwic3J2SW5mbyIsImR5bmFtaWNSZXF1aXJlIiwic3RhcnQiLCJwcm9taXNlQWxsU2VydmljZSIsInNlcnZpY2VTdGFydFJlc29sdmVyIiwieWVsbG93IiwiUE9MIiwidGhlbiIsImFsbCIsInN0b3AiLCJmb3JjZSIsInNlcnZpY2VTdG9wUmVzb2x2ZXIiLCJwcmVTdG9wUmVzb2x2ZXIiLCJwb3N0U3RvcFJlc29sdmVyIiwicHJvbWlzZUFsbFByZVBvc3RTdG9wRG9uZSIsIl9zdG9wIiwicCIsImhlYWRNc2ciLCJraWxsIiwib25TdG9wIiwic3RvcEFsbCIsInNlcnZlckNyZWF0ZSIsInNvY2tldCIsImxvZ291dCIsInNlcnZlckNsZWFudXAiLCJzcnZOYW1lIiwicHJvYyIsImNsaWVudENyZWF0ZSIsImNvbm5lY3Rpb25zIiwic2VydmVyIiwiY2xpZW50IiwiU0hVVERPV04iLCJTT0NLRVRGSUxFIiwiY2xpZW50cyIsImNsb3NlIiwib25Nc2ciLCJzdHJlYW0iLCJ1bmxpbmtTeW5jIiwic29jayIsImNyZWF0ZVNlcnZlciIsInNlbGYiLCJub3ciLCJfbXNnIiwicGFyc2UiLCJsaXN0ZW4iLCJfc29ja2V0IiwiX3NlcnZlckNyZWF0ZSIsImNsaWVudENsZWFudXAiLCJjcmVhdGVDb25uZWN0aW9uIiwiZGF0YVN0ciIsInQiLCJwcmludCIsImJvbGQiLCJjb2RlIiwiaXRhbGljIiwidW5kZXJsaW5lIiwiaW52ZXJzZSIsInN0cmlrZSIsImRlZmF1bHRDb2xvciIsImJsYWNrIiwiYmx1ZSIsIm1hZ2VudGEiLCJjeWFuIiwid2hpdGUiLCJicmlnaHRCbGFjayIsImJyaWdodFJlZCIsImJyaWdodEdyZWVuIiwiYnJpZ2h0WWVsbG93IiwiYnJpZ2h0Qmx1ZSIsImJyaWdodE1hZ2VudGEiLCJicmlnaHRDeWFuIiwiYnJpZ2h0V2hpdGUiLCJjdXN0b21Db2xvciIsImNvZGVOdW1iZXIiLCJpc05hTiIsImJnRGVmYXVsdENvbG9yIiwiZmNDb2RlIiwiYmdCbGFjayIsImJjIiwiYmdSZWQiLCJiZ0dyZWVuIiwiYmdZZWxsb3ciLCJiZ0JsdWUiLCJiZ01hZ2VudGEiLCJiZ0N5YW4iLCJiZ1doaXRlIiwiYmdCcmlnaHRCbGFjayIsImJnQnJpZ2h0UmVkIiwiYmdCcmlnaHRHcmVlbiIsImJnQnJpZ2h0WWVsbG93IiwiYmdCcmlnaHRCbHVlIiwiYmdCcmlnaHRNYWdlbnRhIiwiYmdCcmlnaHRDeWFuIiwiYmdCcmlnaHRXaGl0ZSIsImN1c3RvbUJnQ29sb3IiLCJmQ29kZSIsImNsZWFyTGluZUN1cnNvclJpZ2h0IiwiY2xlYXJMaW5lIiwic3R5bGVSZXNldCIsImN1cnNvckhpZGUiLCJjdXJzb3JTaG93IiwiVVNBR0UiLCJfZ2V0IiwicHJvcCIsIl9wcmludFRpdGxlcyIsInRpdGxlIiwiaW5mbyIsInUiLCJvcHRpb25UaXRsZVByaW50ZWQiLCJyZXF1aXJlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9