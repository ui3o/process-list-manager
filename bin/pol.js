#!/usr/bin/env node

(()=>{"use strict";var e={562:e=>{function t(e){return"number"==typeof e||!!/^0x[0-9a-f]+$/i.test(e)||/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(e)}function n(e,t){return"constructor"===t&&"function"==typeof e[t]||"__proto__"===t}e.exports=function(e,i){i||(i={});var o={bools:{},strings:{},unknownFn:null};"function"==typeof i.unknown&&(o.unknownFn=i.unknown),"boolean"==typeof i.boolean&&i.boolean?o.allBools=!0:[].concat(i.boolean).filter(Boolean).forEach((function(e){o.bools[e]=!0}));var r={};function s(e){return r[e].some((function(e){return o.bools[e]}))}Object.keys(i.alias||{}).forEach((function(e){r[e]=[].concat(i.alias[e]),r[e].forEach((function(t){r[t]=[e].concat(r[e].filter((function(e){return t!==e})))}))})),[].concat(i.string).filter(Boolean).forEach((function(e){o.strings[e]=!0,r[e]&&[].concat(r[e]).forEach((function(e){o.strings[e]=!0}))}));var l=i.default||{},c={_:[]};function a(e,t,i){for(var r=e,s=0;s<t.length-1;s++){var l=t[s];if(n(r,l))return;void 0===r[l]&&(r[l]={}),r[l]!==Object.prototype&&r[l]!==Number.prototype&&r[l]!==String.prototype||(r[l]={}),r[l]===Array.prototype&&(r[l]=[]),r=r[l]}var c=t[t.length-1];n(r,c)||(r!==Object.prototype&&r!==Number.prototype&&r!==String.prototype||(r={}),r===Array.prototype&&(r=[]),void 0===r[c]||o.bools[c]||"boolean"==typeof r[c]?r[c]=i:Array.isArray(r[c])?r[c].push(i):r[c]=[r[c],i])}function p(e,n,i){if(!i||!o.unknownFn||function(e,t){return o.allBools&&/^--[^=]+$/.test(t)||o.strings[e]||o.bools[e]||r[e]}(e,i)||!1!==o.unknownFn(i)){var s=!o.strings[e]&&t(n)?Number(n):n;a(c,e.split("."),s),(r[e]||[]).forEach((function(e){a(c,e.split("."),s)}))}}Object.keys(o.bools).forEach((function(e){p(e,void 0!==l[e]&&l[e])}));var u=[];-1!==e.indexOf("--")&&(u=e.slice(e.indexOf("--")+1),e=e.slice(0,e.indexOf("--")));for(var d=0;d<e.length;d++){var m,g,f=e[d];if(/^--.+=/.test(f)){var v=f.match(/^--([^=]+)=([\s\S]*)$/);m=v[1];var h=v[2];o.bools[m]&&(h="false"!==h),p(m,h,f)}else if(/^--no-.+/.test(f))p(m=f.match(/^--no-(.+)/)[1],!1,f);else if(/^--.+/.test(f))m=f.match(/^--(.+)/)[1],void 0===(g=e[d+1])||/^(-|--)[^-]/.test(g)||o.bools[m]||o.allBools||r[m]&&s(m)?/^(true|false)$/.test(g)?(p(m,"true"===g,f),d+=1):p(m,!o.strings[m]||"",f):(p(m,g,f),d+=1);else if(/^-[^-]+/.test(f)){for(var _=f.slice(1,-1).split(""),b=!1,S=0;S<_.length;S++)if("-"!==(g=f.slice(S+2))){if(/[A-Za-z]/.test(_[S])&&"="===g[0]){p(_[S],g.slice(1),f),b=!0;break}if(/[A-Za-z]/.test(_[S])&&/-?\d+(\.\d*)?(e-?\d+)?$/.test(g)){p(_[S],g,f),b=!0;break}if(_[S+1]&&_[S+1].match(/\W/)){p(_[S],f.slice(S+2),f),b=!0;break}p(_[S],!o.strings[_[S]]||"",f)}else p(_[S],g,f);m=f.slice(-1)[0],b||"-"===m||(!e[d+1]||/^(-|--)[^-]/.test(e[d+1])||o.bools[m]||r[m]&&s(m)?e[d+1]&&/^(true|false)$/.test(e[d+1])?(p(m,"true"===e[d+1],f),d+=1):p(m,!o.strings[m]||"",f):(p(m,e[d+1],f),d+=1))}else if(o.unknownFn&&!1===o.unknownFn(f)||c._.push(o.strings._||!t(f)?f:Number(f)),i.stopEarly){c._.push.apply(c._,e.slice(d+1));break}}return Object.keys(l).forEach((function(e){var t,n,i;t=c,n=e.split("."),i=t,n.slice(0,-1).forEach((function(e){i=i[e]||{}})),n[n.length-1]in i||(a(c,e.split("."),l[e]),(r[e]||[]).forEach((function(t){a(c,t.split("."),l[e])})))})),i["--"]?c["--"]=u.slice():u.forEach((function(e){c._.push(e)})),c}},757:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.help=void 0;const o=i(n(562)),r=i(n(147)),s=n(509),l=n(45),c=n(727),a=(0,o.default)(process.argv.slice(2));t.help=()=>{(0,l.printUsage)({name:"pol - Process list manager.",usage:[{name:"pol [options][command]",desc:"Process list (pol) manager accepts command and options."}],options:[{desc:"show help",switch:"-h, --help",type:"boolean"}],commands:[{desc:"boot init system",switch:"boot"},{desc:"start [service|--all]",switch:"start"},{desc:"restart [service|--all]",switch:"restart"},{desc:"stop [service|--all]",switch:"stop"},{desc:"list running [none|--all]",switch:"ps"}],version:r.default.version,copyright:"copyright@2023"}),process.exit(0)},(a.h||a.help)&&(0,t.help)(),(0,c.isClientCommand)(a._[0])?(0,c.polClient)(a):(0,s.isServerCommand)(a._[0])?(0,s.polServer)(a):(0,t.help)()},685:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pol=void 0;const i=n(473),o=n(522);t.pol=new class{constructor(){this.SERVICE_STATE={READY:{name:"SERVICE_STATE_READY",state:0},UP:{name:"SERVICE_STATE_UP",state:1},DOWN:{name:"SERVICE_STATE_DOWN",state:2},STOP:{name:"SERVICE_STATE_STOP",state:3}},this.defaults={CLI_PRE_INTERVAL:50,CLI_INTERVAL:200},this.running=!1,this.srv={},this.loginService=void 0}init(e,t){return this.srv[e]=this.srv[e]?this.srv[e]:{processes:[],path:t,name:e,state:this.SERVICE_STATE.READY.state,interval:{before_onStart:void 0,after_onStart:void 0,before_onStop:void 0,after_onStop:void 0},cli:{after_onStart:{},before_onStart:{},after_onStop:{},before_onStop:{},after_onLogin:{},before_onLogin:{}},exec:{onStart:void 0,onLogin:void 0}},this.srv[e].processes=[],this.srv[e]}startRunChecker(e,t,n,i="",r,s=void 0){const l=this.srv[e].interval,c=this.srv[e].cli[`${t}_${n}`],a=n.toLowerCase().includes("start")?"start":"stop";"before_onStart"==`${t}_${n}`&&s&&(this.srv[e].startResolver=s);const p=()=>{Object.keys(c).length?(l[`${t}_${n}`]||(l[`${t}_${n}`]=setInterval(p,2e3)),r.write(`         waiting ${t} ${e} ${a} ...`)):(l[`${t}_${n}`]&&(l[`${t}_${n}`]=clearInterval(l[`${t}_${n}`]),r.write(`[${o.term.fc.green}  OK  ${o.term.mc.resetAll}] ${e} is ${i} ...`)),s&&s())};Object.keys(c).length?setTimeout(p,500):s&&s()}stopRunChecker(e,t){var n,i;const o=this.srv[e].interval;(o[`before_on${t}`]||o[`after_on${t}`])&&(o[`before_on${t}`]&&(o[`before_on${t}`]=clearInterval(o[`before_on${t}`]),this.srv[e].startResolver&&(null===(i=(n=this.srv[e]).startResolver)||void 0===i||i.call(n))),o[`after_on${t}`]&&(o[`after_on${t}`]=clearInterval(o[`after_on${t}`])))}setRunning(e){this.srv[e].running=!0}addProcess(e,t,n){this.srv[e].processes.push({procId:t,procName:n})}addCli(e,n,i,o){switch(n){case"onStart":case"onLogin":case"onStop":("onStop"===n?t.pol.isStateStop(e):this.srv[e].exec[n])?this.srv[e].cli[`after_${n}`][`${i}`]=o:this.srv[e].cli[`before_${n}`][`${i}`]=o}}addExec(e,t,n,o){switch(t){case"onStart":case"onLogin":this.srv[e].exec[t]?(0,i.msgToLog)(`not possible to execute to exe in ${t}`,"pol   ",e):this.srv[e].exec[t]=o}}delCli(e,t,n){switch(t){case"onStart":case"onStop":case"onLogin":Object.keys(this.srv[e].cli[`before_${t}`]).some((e=>e===`${n}`))?Object.keys(this.srv[e].cli[`before_${t}`]).forEach((i=>{i===`${n}`&&delete this.srv[e].cli[`before_${t}`][i]})):Object.keys(this.srv[e].cli[`after_${t}`]).forEach((i=>{i===`${n}`&&delete this.srv[e].cli[`after_${t}`][i]}))}}delExec(e,t){switch(t){case"onStart":case"onLogin":this.srv[e].exec[t]=void 0}}setSetup(e,t){this.srv[e].setup=t}setLoginService(e){this.loginService=this.srv[e]}getLoginService(){return this.loginService}stateInit(e){this.srv[e].state=this.SERVICE_STATE.READY.state}get(e){return this.srv[e]}isStateAfterDown(e){return this.srv[e].state>=this.SERVICE_STATE.DOWN.state}isStateStop(e){return this.srv[e].state===this.SERVICE_STATE.STOP.state}setStateReady(e){this.srv[e].state=this.SERVICE_STATE.READY.state,this.srv[e].running=!1}setStateDown(e){this.srv[e].state=this.SERVICE_STATE.DOWN.state}setStateStop(e){this.srv[e].state=this.SERVICE_STATE.STOP.state}getAllRunning(){return this.getServices().filter((e=>e.running))}getAllStopped(){return this.getServices().filter((e=>!e.running))}getServices(){return Object.values(this.srv).sort(((e,t)=>e.name.toUpperCase()<t.name.toUpperCase()?-1:e.name.toUpperCase()>t.name.toUpperCase()?1:0))}getNanoSecTime(){const e=process.hrtime();return 1e9*e[0]+e[1]}}},238:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(81),r=i(n(358)),s=i(n(147)),l=n(685),c=n(473),a=n(457),p=n(522);if(!r.default.existsSync(c.LOG_FILE_PATH)){try{r.default.accessSync(c.LOG_FILE_ROOT,r.default.constants.R_OK|r.default.constants.W_OK|r.default.constants.X_OK)}catch(e){c.log.log(`[${p.term.fc.red}REQUIRED${p.term.mc.resetAll}] Please create '/var/log/pol' folder with 'rw' access for the running user!`),process.exit(1)}(0,a.cliSplitByLineSync)("touch",c.LOG_FILE_PATH)}const u=`${process.env.ZSH}/custom/plugins/pol`,d=`${u}/pol.plugin.${s.default.version}.version`;process.env.ZSH&&process.env.ZSH.endsWith(".oh-my-zsh")&&!r.default.existsSync(d)&&((0,a.cliSplitByLineSync)("mkdir","-p",`${u}`),(0,a.cliSplitByLineSync)("touch",d),(0,a.cliSplitByLineSync)("cp",`${__dirname}/../zsh-plugin/pol.plugin.zsh`,`${u}/pol.plugin.zsh`),(0,a.cliSplitByLineSync)("cp",`${__dirname}/../zsh-plugin/plugin.js`,`${u}/plugin.js`),c.log.log(`[${p.term.fc.green}  INFO  ${p.term.mc.resetAll}] .oh-my-zsh custom plugin installed. Please add 'pol' to enabled plugin list in '~/.zshrc' file.`)),process.env.TZ=process.env.TZ?process.env.TZ:r.default.readFileSync("/etc/timezone").toString().split("\n")[0];const m=(e,t,n)=>{Object.defineProperty(e.cli,"noErr",{get:function(){return globalThis.service.__prop__.noErr=!0,e.cli}}),Object.defineProperty(e.cli,"splitByLine",{get:function(){return globalThis.service.__prop__.splitByLine=!0,e.cli}}),Object.defineProperty(e.cli,"splitAll",{get:function(){return globalThis.service.__prop__.splitAll=!0,e.cli}}),e.cli.gid=(t="")=>(globalThis.service.__prop__.gid=t,e.cli),e.cli.uid=(t="")=>(globalThis.service.__prop__.uid=t,e.cli),e.cli.wd=(t="")=>(globalThis.service.__prop__.cwd=t,e.cli),e.cli.eol=(t="")=>(globalThis.service.__prop__.eol=t,e.cli),e.cli.do=function(){return v([...arguments],this.serviceName)},e.toLog=function(e){(0,c.msgToLog)(e)},e.toLog=e.toLog.bind(Object.assign(Object.assign({},t),{type:n,controller:e})),e.cli.do=e.cli.do.bind(Object.assign(Object.assign({},t),{type:n,controller:e}))},g=(e,t,n)=>{Object.defineProperty(e.exec,"it",{get:function(){return globalThis.service.__prop__.it=!0,e.exec}}),e.exec.gid=(t="")=>(globalThis.service.__prop__.gid=t,e.exec),e.exec.uid=(t="")=>(globalThis.service.__prop__.uid=t,e.exec),e.exec.wd=(t="")=>(globalThis.service.__prop__.cwd=t,e.exec),e.exec.do=function(){return f([...arguments],this.serviceName)},e.exec.do=e.exec.do.bind(Object.assign(Object.assign({},t),{type:n,controller:e}))},f=(e,t)=>{var n;const i=e.shift(),r=[...e],s=l.pol.getNanoSecTime(),p=null===(n=(new Error).stack)||void 0===n?void 0:n.split("at ")[3].split(" ")[0].split(".")[1];let u=Object.assign({},globalThis.service.__prop__);globalThis.service.__prop__={};const d=Object.assign(Object.assign({},process.env),{POL_CL_ENV:`__POL_CL__${i}__${s}__EXEC__POL_CL__`});if(l.pol.isStateAfterDown(t)||l.pol.get(t).exec[p])return Promise.resolve();if(u.gid){const e=(0,a.cliSplitByLineSync)("id","-g",`${u.gid}`);u.gid=e.c?void 0:Number(e.o[0])}if(u.uid){const e=(0,a.cliSplitByLineSync)("id","-u",`${u.uid}`);u.uid=e.c?void 0:Number(e.o[0])}const m=(0,o.spawn)(i,r,{cwd:u.cwd,env:d,stdio:u.it?"inherit":void 0,gid:u.gid,uid:u.uid}),g=new Promise((e=>{var n,i;u.it||(null===(n=m.stdout)||void 0===n||n.on("data",(e=>{(0,c.msgToLog)(e.toString(),"outexe")})),null===(i=m.stderr)||void 0===i||i.on("data",(e=>{(0,c.msgToLog)(e.toString(),"errexe")}))),m.on("close",(n=>{e(n),l.pol.delExec(t,p)}))}));return l.pol.addExec(t,p,s,{prog:i,params:r,promise:g,options:u,timestamp:s}),g},v=(e,t)=>{var n;const i=[],r=e.shift(),s=[...e],c=l.pol.getNanoSecTime(),p=null===(n=(new Error).stack)||void 0===n?void 0:n.split("at ")[3].split(" ")[0].split(".")[1];let u=Object.assign({},globalThis.service.__prop__);globalThis.service.__prop__={};const d=Object.assign(Object.assign({},process.env),{POL_CL_ENV:`__POL_CL__${r}__${c}__CLI__POL_CL__`});if(l.pol.isStateAfterDown(t)&&"onStop"!=p)return Promise.resolve();if(u.gid){const e=(0,a.cliSplitByLineSync)("id","-g",`${u.gid}`);u.gid=e.c?void 0:Number(e.o[0])}if(u.uid){const e=(0,a.cliSplitByLineSync)("id","-u",`${u.uid}`);u.uid=e.c?void 0:Number(e.o[0])}const m=(0,o.spawn)(r,s,{cwd:u.cwd,env:d,gid:u.gid,uid:u.uid});return l.pol.addCli(t,p,c,{prog:r,params:s}),new Promise((e=>{let n="";m.stdout.on("data",(e=>{n+=e})),m.stderr.on("data",(e=>{u.noErr||(n+=e)})),m.on("close",(o=>{if(u.splitAll||u.splitByLine){const t=n.split(u.eol?u.eol:"\n").filter((e=>e));u.splitByLine?e({o:t,c:o}):(t.forEach((e=>i.push(e.split(/[ \t]/)))),e({o:i,c:o}))}else e({o:n,c:o});l.pol.delCli(t,p,c)}))}))};globalThis.service={set setup(e){var t,n;const i=Object.assign(Object.assign({},e),{serviceName:null===(n=null===(t=(new Error).stack)||void 0===t?void 0:t.split("at ")[2])||void 0===n?void 0:n.trim().split(".js:")[0].replace(/.*\//,""),ssOnStart:{cli:{},exec:{}},ssOnStop:{cli:{}},ssOnLogin:{cli:{},exec:{}}});m(i.ssOnStart,i,"start"),m(i.ssOnStop,i,"stop"),m(i.ssOnLogin,i,"login"),g(i.ssOnStart,i,"start"),g(i.ssOnLogin,i,"login"),l.pol.stateInit(i.serviceName),l.pol.setSetup(i.serviceName,i)},__prop__:{}}},473:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.logFile=t.log=t.msgToLog=t.logFileInit=t.LOG_FILE_PATH=t.LOG_FILE_ROOT=t.TASK_INDENT=void 0;const o=i(n(358));let r;t.TASK_INDENT="        ",t.LOG_FILE_ROOT="/var/log/pol",t.LOG_FILE_PATH=`${t.LOG_FILE_ROOT}/pol.log`,t.logFileInit=()=>{r=o.default.createWriteStream(t.LOG_FILE_PATH,{flags:"a"})},t.msgToLog=(e,t="outlog",n)=>{const i={time:(new Date).ISOStrings(),level:t,service:n,message:e};null==r||r.write(`${JSON.stringify(i)}\n`)},t.log={write:console.log,log:console.log,warn:console.warn,err:console.error,end:()=>{}},t.logFile={write:t.msgToLog,log:()=>{},warn:()=>{},err:()=>{},end:()=>{}},console.log=console.log.bind(global.console,t.TASK_INDENT),console.warn=console.warn.bind(global.console,t.TASK_INDENT),console.error=console.error.bind(global.console,t.TASK_INDENT),Date.prototype.ISOStrings=function(){const e=-this.getTimezoneOffset(),t=function(e){return(e<10?"0":"")+e},n=(e>=0?"+":"-")+t(Math.floor(Math.abs(e)/60))+":"+t(Math.abs(e)%60);return this.setTime(this.getTime()+60*e*1e3),this.toISOString().replace("Z",n)}},727:function(e,t,n){var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,r){function s(e){try{c(i.next(e))}catch(e){r(e)}}function l(e){try{c(i.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,l)}c((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.polClient=t.isClientCommand=t.ClientCommand=void 0;const o=n(757),r=n(473),s=n(302),l=n(457),c=n(522);var a;!function(e){e.completion="completion",e.ps="ps",e.daemon="daemon",e.stop="stop",e.start="start",e.restart="restart"}(a||(t.ClientCommand=a={})),t.isClientCommand=e=>{if(Object.values(a).includes(e))return!0},t.polClient=e=>i(void 0,void 0,void 0,(function*(){switch(e._[0]){case a.completion:if("zsh"===e._[1]&&process.env.ZSH&&process.env.ZSH.endsWith(".oh-my-zsh")){const e=`${process.env.ZSH}/custom/plugins/pol`;yield(0,l.cliSplitByLine)("mkdir","-p",`${e}`),yield(0,l.cliSplitByLine)("cp",`${__dirname}/../zsh-plugin/pol.plugin.zsh`,`${e}/pol.plugin.zsh`),yield(0,l.cliSplitByLine)("cp",`${__dirname}/../zsh-plugin/plugin.js`,`${e}/plugin.js`),r.log.log(`[${c.term.fc.green}  INFO  ${c.term.mc.resetAll}] .oh-my-zsh custom plugin installed. Please add 'pol' to enabled plugin list in '~/.zshrc' file.`)}break;case a.ps:case a.daemon:case a.stop:case a.start:case a.restart:(yield(0,s.clientCreate)()).write(JSON.stringify(e));break;default:(0,o.help)()}}))},509:function(e,t,n){var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,r){function s(e){try{c(i.next(e))}catch(e){r(e)}}function l(e){try{c(i.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,l)}c((i=i.apply(e,t||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.polServer=t.isServerCommand=void 0;const r=o(n(358)),s=o(n(37)),l=n(757),c=n(685);n(238);const a=n(473),p=n(727),u=n(302),d=n(457),m=n(522),g="possible options: [--all|service_name.service]",f=process.env.POL_CONFIG_FOLDER?[process.env.POL_CONFIG_FOLDER]:["/etc/pol"];f.push(`${s.default.homedir()}/.config/pol`);const v=Object.assign({},process.env);var h;!function(e){e.boot="boot"}(h||(h={})),t.isServerCommand=e=>!!Object.values(p.ClientCommand).includes(e)||!!Object.values(h).includes(e)||void 0,t.polServer=e=>i(void 0,void 0,void 0,(function*(){var t,n,o,s,_,b,S;(0,a.logFileInit)();const y=()=>i(void 0,void 0,void 0,(function*(){const e=yield(0,d.cliSplitByLine)("find",...f,"-name","*.service.js"),t=yield(0,d.cliSplitByLine)("readlink","-e",...f.map((e=>`${e}/login.service.target.js`))),n=yield(0,d.cliSplitByLine)("sh","-c",'ps aux | grep ".*node.*pol.*boot$"');c.pol.running=!(n.o.length<2),e.o.filter((e=>!e.includes("No such file or directory"))).map((e=>{var t,n;const i=null===(n=null===(t=null==e?void 0:e.split("/"))||void 0===t?void 0:t.pop())||void 0===n?void 0:n.replace(".js","");c.pol.init(i,e)}));const i=(yield(0,d.cliSplitByLine)("find","/proc","-maxdepth","2","-name","environ")).o.filter((e=>{try{return r.default.accessSync(e,r.default.constants.R_OK),!0}catch(e){return!1}}));for(const e of i)try{const t=r.default.readFileSync(e).toString();if(t.includes("__POL__")){const n=t.split("__POL_CL__")[1].split("__"),i=t.split("__POL__")[1].split("__");c.pol.setRunning(i[0]),c.pol.addProcess(i[0],e.split("/")[2],n[0])}}catch(e){}const o=require;for(const e of c.pol.getServices())o(e.path);t.o.forEach((e=>{var t,n;c.pol.setLoginService(null===(n=null===(t=null==e?void 0:e.split("/"))||void 0===t?void 0:t.pop())||void 0===n?void 0:n.replace(".js",""))}))})),$=(e,t)=>i(void 0,void 0,void 0,(function*(){if(!e)return;if(!c.pol.getServices().some((t=>t.name===e||"--all"===e)))return void t.write(g);const n=[];return new Promise((i=>{var o,r,s;for(const i of c.pol.getServices()){if("--all"!==e&&i.name!==e)continue;let l=()=>{};const p=c.pol.get(i.name);n.push(new Promise((e=>l=e))),c.pol.stateInit(i.name);try{if(c.pol.getAllRunning().some((e=>e.name===i.name))){t.write(`[${m.term.fc.yellow} WARN ${m.term.mc.resetAll}] ${i.name} is already running ...`),l();continue}(null===(o=p.setup)||void 0===o?void 0:o.onStart)?(process.env=Object.assign(Object.assign({},v),{POL:`__POL__${i.name}__${c.pol.getNanoSecTime()}__POL__`}),t.write(`[${m.term.fc.green}  OK  ${m.term.mc.resetAll}] start ${i.name} ...`),p.setup.onStart(p.setup.ssOnStart).then((()=>{c.pol.startRunChecker(i.name,"after","onStart","started",a.logFile)})),c.pol.startRunChecker(i.name,"before","onStart","started",t,l)):l()}catch(e){t.write(`[${m.term.fc.red}FAILED${m.term.mc.resetAll}] start ${i.name} ...`),t.write(`        ${e.stack}`),null===(s=null===(r=c.pol.get(i.name))||void 0===r?void 0:r.startResolver)||void 0===s||s.call(r)}}Promise.all(n).then((()=>{i(!0)}))}))})),w=(e,t,n)=>i(void 0,void 0,void 0,(function*(){if(!c.pol.getServices().some((t=>t.name===e||"--all"===e)))return void t.write(g);if(!c.pol.getAllRunning().some((t=>t.name===e))&&"--all"!==e)return void t.write(`[${m.term.fc.yellow} WARN ${m.term.mc.resetAll}] ${e} is already stopped ...`);const o=c.pol.getAllStopped().map((e=>({name:e.name})));if("--all"===e)for(const e of c.pol.getServices())c.pol.setStateDown(e.name);else c.pol.setStateDown(e);const r=[];return new Promise((s=>i(void 0,void 0,void 0,(function*(){var l;for(const o of c.pol.getAllRunning())if("--all"===e||e===o.name){let e=()=>{},s=()=>{},p=()=>{};const u=[new Promise((e=>s=e)),new Promise((e=>p=e))],g=e=>i(void 0,void 0,void 0,(function*(){var i,o;const r=[...Object.values(e.cli.before_onStart).map((e=>e.promise)),...Object.values(e.cli.after_onStart).map((e=>e.promise)),...Object.values(e.cli.before_onLogin).map((e=>e.promise)),...Object.values(e.cli.after_onLogin).map((e=>e.promise)),null===(i=e.exec.onStart)||void 0===i?void 0:i.promise,null===(o=e.exec.onLogin)||void 0===o?void 0:o.promise];let s="";c.pol.stopRunChecker(e.name,"Start");for(const i of e.processes){let o=a.TASK_INDENT;s!==e.name&&(s=e.name,o=`[${m.term.fc.green} STOP ${m.term.mc.resetAll}]`);const r=n?["kill","-9",i.procId]:["kill",i.procId],{c:l}=yield(0,d.cliSplitByLine)(...r);0==l&&t.write(`${o} ${e.name} service with proc/pid[${i.procName}/${i.procId}] ...`)}yield Promise.all(r)}));r.push(new Promise((t=>e=t)));try{(null===(l=o.setup)||void 0===l?void 0:l.onStop)?(o.setup.ssOnStop.stopAll=()=>i(void 0,void 0,void 0,(function*(){yield g(o),c.pol.setStateStop(o.name),c.pol.startRunChecker(o.name,"after","onStop","stopped",t,p)})),o.setup.onStop(o.setup.ssOnStop),c.pol.startRunChecker(o.name,"before","onStop","stopped",t,s)):(yield g(o),s(),p()),Promise.all(u).then((()=>{e(),setTimeout((()=>{c.pol.setStateReady(o.name)}))}))}catch(n){t.write(`[${m.term.fc.red}FAILED${m.term.mc.resetAll}] stop ${o.name} ...`),e()}}if("--all"===e)for(const e of o)t.write(`[${m.term.fc.yellow} WARN ${m.term.mc.resetAll}] ${e.name} is already stopped ...`);Promise.all(r).then((()=>{s()}))}))))}));let O=!0;switch(process.on("SIGINT",(()=>i(void 0,void 0,void 0,(function*(){a.log.log("SIGINT rec"),O&&(O=!1,yield y(),yield w("--all",a.log),(0,u.serverCleanup)())})))),e._[0]){case h.boot:if(yield y(),c.pol.running&&(a.log.log("Another pol daemon is running!"),process.exit(1)),yield(0,u.serverCreate)(((e,t)=>i(void 0,void 0,void 0,(function*(){switch(e._[0]){case p.ClientCommand.daemon:if(!e._.length||e._.length<2)t.write(g),t.end();else if("shutdown"===e._[1]){const e={err:()=>{},warn:()=>{},log:()=>{},write:e=>{a.log.write(e),t.write(e)},end:()=>{}};yield y(),yield w("--all",e),t.end(),(0,u.serverCleanup)()}break;case p.ClientCommand.stop:!e._.length||e._.length<2&&!e.all?(t.write(g),t.end()):(yield y(),yield w(e._[1]?e._[1]:e.all?"--all":null,t,e.force),t.end());break;case p.ClientCommand.start:!e._.length||e._.length<2&&!e.all?(t.write(g),t.end()):(yield y(),yield $(e._[1]?e._[1]:e.all?"--all":null,t),t.end());break;case p.ClientCommand.restart:!e._.length||e._.length<2&&!e.all?(t.write(g),t.end()):(yield y(),yield w(e._[1]?e._[1]:e.all?"--all":null,t,e.force),setTimeout((()=>i(void 0,void 0,void 0,(function*(){yield $(e._[1]?e._[1]:e.all?"--all":null,t),t.end()})))));break;case p.ClientCommand.ps:yield y();let n="";for(const e of c.pol.getAllRunning())for(const i of e.processes){let o=a.TASK_INDENT;n!==e.name&&(n=e.name,o=`[${m.term.fc.green} RUN ${m.term.mc.resetAll}] `),t.write(`${o}  ${e.name} service with proc/pid[${i.procName}/${i.procId}] ...\n`)}if(e.all)for(const e of c.pol.getAllStopped())t.write(`[${m.term.fc.yellow} STOP ${m.term.mc.resetAll}] ${e.name} service ...`);t.end()}})))),yield $("--all",a.log),c.pol.getLoginService()){const e=()=>i(void 0,void 0,void 0,(function*(){yield y(),yield w("--all",a.log),(0,u.serverCleanup)()}));c.pol.isStateAfterDown(null===(t=c.pol.getLoginService())||void 0===t?void 0:t.name)?yield e():(process.env=Object.assign(Object.assign({},v),{POL:`__POL__${null===(n=c.pol.getLoginService())||void 0===n?void 0:n.name}__${c.pol.getNanoSecTime()}__POL__`}),null===(_=null===(s=null===(o=c.pol.getLoginService())||void 0===o?void 0:o.setup)||void 0===s?void 0:s.onLogin)||void 0===_||_.call(s,null===(S=null===(b=c.pol.getLoginService())||void 0===b?void 0:b.setup)||void 0===S?void 0:S.ssOnLogin).then((()=>i(void 0,void 0,void 0,(function*(){var t,n,o,r,s;(null===(t=c.pol.getLoginService())||void 0===t?void 0:t.exec.onLogin)?null===(s=null===(r=null===(o=null===(n=c.pol.getLoginService())||void 0===n?void 0:n.exec)||void 0===o?void 0:o.onLogin)||void 0===r?void 0:r.promise)||void 0===s||s.then((()=>i(void 0,void 0,void 0,(function*(){yield e()})))):yield e()})))))}break;case p.ClientCommand.completion:if("zsh"===e._[1]&&process.env.ZSH&&process.env.ZSH.endsWith(".oh-my-zsh")){const e=`${process.env.ZSH}/custom/plugins/pol`;yield(0,d.cliSplitByLine)("mkdir","-p",`${e}`),yield(0,d.cliSplitByLine)("cp",`${__dirname}/../zsh-plugin/pol.plugin.zsh`,`${e}/pol.plugin.zsh`),yield(0,d.cliSplitByLine)("cp",`${__dirname}/../zsh-plugin/plugin.js`,`${e}/plugin.js`),a.log.log(`[${m.term.fc.green}  INFO  ${m.term.mc.resetAll}] .oh-my-zsh custom plugin installed. Please add 'pol' to enabled plugin list in '~/.zshrc' file.`)}break;default:(0,l.help)()}}))},302:function(e,t,n){var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,r){function s(e){try{c(i.next(e))}catch(e){r(e)}}function l(e){try{c(i.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,l)}c((i=i.apply(e,t||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.clientCreate=t.clientCleanup=t.serverCreate=t.serverCleanup=void 0;const r=o(n(358)),s=o(n(808)),l=n(473),c={},a=e=>{(0,l.msgToLog)(e,"pol   ")};var p,u,d=!1;const m="/tmp/pol.sock";t.serverCleanup=()=>{if(!d&&p){if(d=!0,a("Socket server: terminating"),Object.keys(c).length){let e=Object.keys(c);for(;e.length;){let t=e.pop();c[t].end()}}p.close()}},t.serverCreate=(e=((e,t)=>i(void 0,void 0,void 0,(function*(){}))))=>i(void 0,void 0,void 0,(function*(){return a("Socket server: checking for leftover socket"),r.default.existsSync(m)?(a("Socket server: removing leftover socket."),r.default.unlinkSync(m)):a("Socket server: no leftover socket found."),process.on("exit",t.serverCleanup),function(e,t=((e,t)=>i(this,void 0,void 0,(function*(){})))){let n;return a("Socket server: creating"),new Promise((o=>{p=s.default.createServer((function(e){a("Socket server: connection acknowledged");var n=Date.now().toString();c[n]=e,e.on("end",(function(){a("Socket server: client disconnected"),delete c[n]})),e.on("data",(e=>i(this,void 0,void 0,(function*(){const i=JSON.parse(e.toString());t(i,c[n])})))),e.on("error",(e=>i(this,void 0,void 0,(function*(){delete c[n]}))))})).listen(e,(()=>{r.default.chmodSync(e,"777")})).on("connection",(function(e){a("Socket server: client connected"),n=e})),o()}))}(m,e)})),t.clientCleanup=()=>{!d&&u&&(d=!0,u.end())},t.clientCreate=()=>(process.on("exit",t.clientCleanup),new Promise((e=>{u=s.default.createConnection(m).on("connect",(()=>{e(u)})).on("data",(function(e){const t=e.toString();l.log.log(t)})).on("error",(function(e){l.log.log("pol daemon not running. run `pol boot` first!",e),process.exit(1)})).on("close",(function(e){}))})))},457:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.cliSplitByLine=t.cliSplitByLineSync=void 0;const i=n(81);t.cliSplitByLineSync=function(...e){const t=[...arguments],n=(0,i.spawnSync)(t.shift(),[...t]);return{o:n.stdout.toString().split("\n").filter((e=>e)),c:n.status}},t.cliSplitByLine=function(...e){const t=[...arguments],n=(0,i.spawn)(t.shift(),[...t]);return new Promise((e=>{let t="";n.stdout.on("data",(e=>{t+=e})),n.stderr.on("data",(e=>{t+=e})),n.on("close",(n=>{const i=t.split("\n").filter((e=>e));e({o:i,c:n})}))}))}},522:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.term=void 0;const n={stdout:process.stdout,print:function(e=""){return n.stdout.write(e),n},bold:function(e,t=""){return n.print(n.mc.bold+t+e+n.mc.resetAll)},italic:function(e,t=""){return n.print(n.mc.italic+t+e+n.mc.resetAll)},underline:function(e,t=""){return n.print(n.mc.underline+t+e+n.mc.resetAll)},inverse:function(e,t=""){return n.print(n.mc.inverse+t+e+n.mc.resetAll)},strike:function(e,t=""){return n.print(n.mc.strike+t+e+n.mc.resetAll)},defaultColor:function(e){return n.print(n.fc.defaultColor+e+n.mc.resetAll)},black:function(e){return n.print(n.fc.black+e+n.mc.resetAll)},red:function(e){return n.print(n.fc.red+e+n.mc.resetAll)},green:function(e){return n.print(n.fc.green+e+n.mc.resetAll)},yellow:function(e){return n.print(n.fc.yellow+e+n.mc.resetAll)},blue:function(e){return n.print(n.fc.blue+e+n.mc.resetAll)},magenta:function(e){return n.print(n.fc.magenta+e+n.mc.resetAll)},cyan:function(e){return n.print(n.fc.cyan+e+n.mc.resetAll)},white:function(e){return n.print(n.fc.white+e+n.mc.resetAll)},brightBlack:function(e){return n.print(n.fc.brightBlack+e+n.mc.resetAll)},brightRed:function(e){return n.print(n.fc.brightRed+e+n.mc.resetAll)},brightGreen:function(e){return n.print(n.fc.brightGreen+e+n.mc.resetAll)},brightYellow:function(e){return n.print(n.fc.brightYellow+e+n.mc.resetAll)},brightBlue:function(e){return n.print(n.fc.brightBlue+e+n.mc.resetAll)},brightMagenta:function(e){return n.print(n.fc.brightMagenta+e+n.mc.resetAll)},brightCyan:function(e){return n.print(n.fc.brightCyan+e+n.mc.resetAll)},brightWhite:function(e){return n.print(n.fc.brightWhite+e+n.mc.resetAll)},customColor:function(e,t){const i=isNaN(e)?e:`[38;5;${e}m`;return n.print(i+t+n.mc.resetAll)},bgDefaultColor:function(e,t=""){return n.print(n.fc.brightWhite+t+e+n.mc.resetAll)},bgBlack:function(e,t=""){return n.print(n.bc.black+t+e+n.mc.resetAll)},bgRed:function(e,t=""){return n.print(n.bc.red+t+e+n.mc.resetAll)},bgGreen:function(e,t=""){return n.print(n.bc.green+t+e+n.mc.resetAll)},bgYellow:function(e,t=""){return n.print(n.bc.yellow+t+e+n.mc.resetAll)},bgBlue:function(e,t=""){return n.print(n.bc.blue+t+e+n.mc.resetAll)},bgMagenta:function(e,t=""){return n.print(n.bc.magenta+t+e+n.mc.resetAll)},bgCyan:function(e,t=""){return n.print(n.bc.cyan+t+e+n.mc.resetAll)},bgWhite:function(e,t=""){return n.print(n.bc.white+t+e+n.mc.resetAll)},bgBrightBlack:function(e,t=""){return n.print(n.bc.brightBlack+t+e+n.mc.resetAll)},bgBrightRed:function(e,t=""){return n.print(n.bc.brightRed+t+e+n.mc.resetAll)},bgBrightGreen:function(e,t=""){return n.print(n.bc.brightGreen+t+e+n.mc.resetAll)},bgBrightYellow:function(e,t=""){return n.print(n.bc.brightYellow+t+e+n.mc.resetAll)},bgBrightBlue:function(e,t=""){return n.print(n.bc.brightBlue+t+e+n.mc.resetAll)},bgBrightMagenta:function(e,t=""){return n.print(n.bc.brightMagenta+t+e+n.mc.resetAll)},bgBrightCyan:function(e,t=""){return n.print(n.bc.brightCyan+t+e+n.mc.resetAll)},bgBrightWhite:function(e,t=""){return n.print(n.bc.brightWhite+t+e+n.mc.resetAll)},customBgColor:function(e,t,i=""){const o=isNaN(e)?e.toString():`[48;5;${e}m`,r=isNaN(e)?e.toString():`[38;5;${e}m`;return n.print(o+r+t+n.mc.resetAll)},mc:{resetAll:"[0m[39m[49m",clearLineCursorRight:"[K",clearLine:"[2K",styleReset:"[0m",bold:"[1m",italic:"[3m",underline:"[4m",inverse:"[7m",strike:"[9m",cursorHide:"[?25l",cursorShow:"[?25h"},fc:{defaultColor:"[39m",black:"[30m",red:"[31m",green:"[32m",yellow:"[33m",blue:"[34m",magenta:"[35m",cyan:"[36m",white:"[37m",brightBlack:"[90m",brightRed:"[91m",brightGreen:"[92m",brightYellow:"[93m",brightBlue:"[94m",brightMagenta:"[95m",brightCyan:"[96m",brightWhite:"[97m",customColor:function(e){return`[38;5;${e}m`}},bc:{defaultColor:"[49m",black:"[40m",red:"[41m",green:"[42m",yellow:"[43m",blue:"[44m",magenta:"[45m",cyan:"[46m",white:"[47m",brightBlack:"[100m",brightRed:"[101m",brightGreen:"[102m",brightYellow:"[103m",brightBlue:"[104m",brightMagenta:"[105m",brightCyan:"[106m",brightWhite:"[107m",customBgColor:function(e){return`[48;5;${e}m`}}};t.term=n},45:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.printUsage=void 0;const i=n(522),o="    ",r="\n",s=(e="")=>void 0!==e&&e.length?e:void 0,l=(e,t=[],n)=>{t.length&&s(t[0].name)&&(i.term.print(i.term.mc.bold+r+e),t.forEach((e=>{i.term.print(i.term.mc.resetAll),n&&i.term.print(i.term.fc.brightWhite+i.term.mc.bold),i.term.print(`${o+e.name}`);const t=s(e.desc);t&&(i.term.print(i.term.mc.resetAll).print("\n"),i.term.print(`${o}${o}${t}`)),i.term.print(i.term.mc.resetAll).print("\n")})))};t.printUsage=(e={name:"",usage:[{name:"",desc:""}],options:[{switch:"",desc:"",type:""}],commands:[{switch:"",desc:""}],copyright:"copyright@2020",version:"0.0.1"})=>{if(l("NAME\n",[{name:e.name}]),l("USAGE\n",e.usage,!0),e.options&&e.options.length){let t=!1;e.options.forEach((e=>{e.switch.length&&(t||(t=!0,i.term.print(i.term.mc.bold+r+"OPTIONS\n"+i.term.mc.resetAll)),i.term.print(`${i.term.fc.brightWhite+i.term.mc.bold}${o+e.switch}\n`),i.term.print(`${i.term.mc.resetAll}${o}${o}${e.desc}`),e.type&&i.term.print(`${i.term.fc.cyan} [${e.type}]`),i.term.print("\n"))}))}if(e.commands&&e.commands.length){let t=!1;e.commands.forEach((e=>{e.switch.length&&(t||(t=!0,i.term.print(i.term.mc.bold+r+"COMMANDS\n"+i.term.mc.resetAll)),i.term.print(`${i.term.fc.brightWhite+i.term.mc.bold}${o+e.switch}\n`),i.term.print(`${i.term.mc.resetAll}${o}${o}${e.desc}`),i.term.print("\n"))}))}i.term.print(r),(e.version&&e.version.length||e.copyright&&e.copyright.length)&&i.term.print("== "),e.version&&e.version.length&&i.term.print(`v${e.version}`),e.copyright&&e.copyright.length&&(e.version&&e.version.length&&i.term.print(" - "),i.term.print(e.copyright)),(e.version&&e.version.length||e.copyright&&e.copyright.length)&&i.term.print(" ==\n\n")}},81:e=>{e.exports=require("child_process")},358:e=>{e.exports=require("fs")},808:e=>{e.exports=require("net")},37:e=>{e.exports=require("os")},147:e=>{e.exports=JSON.parse('{"name":"process-list-manager","version":"1.2.1","description":"Nodejs based init system called process list manager - pol","bin":{"pol":"./bin/pol.js","pol_init":"./wrapper/init.py"},"scripts":{"build":"webpack --mode production","test":"echo test missing!"},"author":"ui3o.com","license":"ISC","dependencies":{"minimist":"^1.2.8"},"devDependencies":{"@types/minimist":"^1.2.3","@types/node":"^20.7.0","ts-loader":"^9.4.4","ts-node":"^10.9.1","typescript":"^5.2.2","webpack":"^5.88.2","webpack-cli":"^5.1.4","webpack-shebang-plugin":"^1.1.8"}}')}},t={};!function n(i){var o=t[i];if(void 0!==o)return o.exports;var r=t[i]={exports:{}};return e[i].call(r.exports,r,r.exports,n),r.exports}(757)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,