#!/usr/bin/env node

(()=>{"use strict";var e={562:e=>{function t(e){return"number"==typeof e||!!/^0x[0-9a-f]+$/i.test(e)||/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(e)}function n(e,t){return"constructor"===t&&"function"==typeof e[t]||"__proto__"===t}e.exports=function(e,r){r||(r={});var o={bools:{},strings:{},unknownFn:null};"function"==typeof r.unknown&&(o.unknownFn=r.unknown),"boolean"==typeof r.boolean&&r.boolean?o.allBools=!0:[].concat(r.boolean).filter(Boolean).forEach((function(e){o.bools[e]=!0}));var i={};function s(e){return i[e].some((function(e){return o.bools[e]}))}Object.keys(r.alias||{}).forEach((function(e){i[e]=[].concat(r.alias[e]),i[e].forEach((function(t){i[t]=[e].concat(i[e].filter((function(e){return t!==e})))}))})),[].concat(r.string).filter(Boolean).forEach((function(e){o.strings[e]=!0,i[e]&&[].concat(i[e]).forEach((function(e){o.strings[e]=!0}))}));var l=r.default||{},c={_:[]};function a(e,t,r){for(var i=e,s=0;s<t.length-1;s++){var l=t[s];if(n(i,l))return;void 0===i[l]&&(i[l]={}),i[l]!==Object.prototype&&i[l]!==Number.prototype&&i[l]!==String.prototype||(i[l]={}),i[l]===Array.prototype&&(i[l]=[]),i=i[l]}var c=t[t.length-1];n(i,c)||(i!==Object.prototype&&i!==Number.prototype&&i!==String.prototype||(i={}),i===Array.prototype&&(i=[]),void 0===i[c]||o.bools[c]||"boolean"==typeof i[c]?i[c]=r:Array.isArray(i[c])?i[c].push(r):i[c]=[i[c],r])}function p(e,n,r){if(!r||!o.unknownFn||function(e,t){return o.allBools&&/^--[^=]+$/.test(t)||o.strings[e]||o.bools[e]||i[e]}(e,r)||!1!==o.unknownFn(r)){var s=!o.strings[e]&&t(n)?Number(n):n;a(c,e.split("."),s),(i[e]||[]).forEach((function(e){a(c,e.split("."),s)}))}}Object.keys(o.bools).forEach((function(e){p(e,void 0!==l[e]&&l[e])}));var u=[];-1!==e.indexOf("--")&&(u=e.slice(e.indexOf("--")+1),e=e.slice(0,e.indexOf("--")));for(var d=0;d<e.length;d++){var g,m,f=e[d];if(/^--.+=/.test(f)){var v=f.match(/^--([^=]+)=([\s\S]*)$/);g=v[1];var h=v[2];o.bools[g]&&(h="false"!==h),p(g,h,f)}else if(/^--no-.+/.test(f))p(g=f.match(/^--no-(.+)/)[1],!1,f);else if(/^--.+/.test(f))g=f.match(/^--(.+)/)[1],void 0===(m=e[d+1])||/^(-|--)[^-]/.test(m)||o.bools[g]||o.allBools||i[g]&&s(g)?/^(true|false)$/.test(m)?(p(g,"true"===m,f),d+=1):p(g,!o.strings[g]||"",f):(p(g,m,f),d+=1);else if(/^-[^-]+/.test(f)){for(var _=f.slice(1,-1).split(""),b=!1,S=0;S<_.length;S++)if("-"!==(m=f.slice(S+2))){if(/[A-Za-z]/.test(_[S])&&"="===m[0]){p(_[S],m.slice(1),f),b=!0;break}if(/[A-Za-z]/.test(_[S])&&/-?\d+(\.\d*)?(e-?\d+)?$/.test(m)){p(_[S],m,f),b=!0;break}if(_[S+1]&&_[S+1].match(/\W/)){p(_[S],f.slice(S+2),f),b=!0;break}p(_[S],!o.strings[_[S]]||"",f)}else p(_[S],m,f);g=f.slice(-1)[0],b||"-"===g||(!e[d+1]||/^(-|--)[^-]/.test(e[d+1])||o.bools[g]||i[g]&&s(g)?e[d+1]&&/^(true|false)$/.test(e[d+1])?(p(g,"true"===e[d+1],f),d+=1):p(g,!o.strings[g]||"",f):(p(g,e[d+1],f),d+=1))}else if(o.unknownFn&&!1===o.unknownFn(f)||c._.push(o.strings._||!t(f)?f:Number(f)),r.stopEarly){c._.push.apply(c._,e.slice(d+1));break}}return Object.keys(l).forEach((function(e){var t,n,r;t=c,n=e.split("."),r=t,n.slice(0,-1).forEach((function(e){r=r[e]||{}})),n[n.length-1]in r||(a(c,e.split("."),l[e]),(i[e]||[]).forEach((function(t){a(c,t.split("."),l[e])})))})),r["--"]?c["--"]=u.slice():u.forEach((function(e){c._.push(e)})),c}},757:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.help=void 0;const o=r(n(562)),i=r(n(147)),s=n(626),l=n(45),c=(0,o.default)(process.argv.slice(2));t.help=()=>{(0,l.printUsage)({name:"pol - Process list manager.",usage:[{name:"pol [options][command]",desc:"Process list (pol) manager accepts command and options."}],options:[{desc:"show help",switch:"-h, --help",type:"boolean"}],commands:[{desc:"boot init system",switch:"boot"},{desc:"start [service|--all]",switch:"start"},{desc:"restart [service|--all]",switch:"restart"},{desc:"stop [service|--all]",switch:"stop"},{desc:"list running [none|--all]",switch:"ps"}],version:i.default.version,copyright:"copyright@2023"}),process.exit(0)},(c.h||c.help)&&(0,t.help)(),(0,s.polDaemon)(c)},685:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pol=void 0;const r=n(473),o=n(522);t.pol=new class{constructor(){this.SERVICE_STATE={READY:{name:"SERVICE_STATE_READY",state:0},UP:{name:"SERVICE_STATE_UP",state:1},DOWN:{name:"SERVICE_STATE_DOWN",state:2},STOP:{name:"SERVICE_STATE_STOP",state:3}},this.defaults={CLI_PRE_INTERVAL:50,CLI_INTERVAL:200},this.running=!1,this.srv={},this.loginService=void 0}init(e,t){return this.srv[e]=this.srv[e]?this.srv[e]:{processes:[],path:t,name:e,state:0,interval:{before_onStart:void 0,after_onStart:void 0,before_onStop:void 0,after_onStop:void 0},cli:{after_onStart:{},before_onStart:{},after_onStop:{},before_onStop:{},after_onLogin:{},before_onLogin:{}},exec:{onStart:void 0,onLogin:void 0}},this.srv[e].state=0,this.srv[e].processes=[],this.srv[e]}startRunChecker(e,t,n,r="",i,s=void 0){const l=this.srv[e].interval,c=this.srv[e].cli[`${t}_${n}`],a=n.toLowerCase().includes("start")?"start":"stop";"before_onStart"==`${t}_${n}`&&s&&(this.srv[e].startResolver=s);const p=()=>{Object.keys(c).length?l[`${t}_${n}`]?i.write(`         waiting ${t} ${e} ${a} ...`):l[`${t}_${n}`]=setInterval(p,2e3):(l[`${t}_${n}`]&&(l[`${t}_${n}`]=clearInterval(l[`${t}_${n}`]),i.write(`[${o.term.fc.green}  OK  ${o.term.mc.resetAll}] ${e} is ${r} ...`)),s&&s())};Object.keys(c).length?setTimeout(p,500):s&&s()}stopRunChecker(e,t){var n,r;const o=this.srv[e].interval;(o[`before_on${t}`]||o[`after_on${t}`])&&(o[`before_on${t}`]&&(o[`before_on${t}`]=clearInterval(o[`before_on${t}`]),this.srv[e].startResolver&&(null===(r=(n=this.srv[e]).startResolver)||void 0===r||r.call(n))),o[`after_on${t}`]&&(o[`after_on${t}`]=clearInterval(o[`after_on${t}`])))}setRunning(e){this.srv[e].running=!0}addProcess(e,t,n){this.srv[e].processes.push({procId:t,procName:n})}addCli(e,n,r,o){switch(n){case"onStart":case"onLogin":case"onStop":("onStop"===n?t.pol.isStateStop(e):this.srv[e].exec[n])?this.srv[e].cli[`after_${n}`][`${r}`]=o:this.srv[e].cli[`before_${n}`][`${r}`]=o}}addExec(e,t,n,o){switch(t){case"onStart":case"onLogin":this.srv[e].exec[t]?(0,r.msgToLog)(`not possible to execute to exe in ${t}`,"pol   ",e):this.srv[e].exec[t]=o}}delCli(e,t,n){switch(t){case"onStart":case"onStop":case"onLogin":Object.keys(this.srv[e].cli[`before_${t}`]).forEach((n=>{delete this.srv[e].cli[`before_${t}`][n]})),Object.keys(this.srv[e].cli[`after_${t}`]).forEach((n=>{delete this.srv[e].cli[`after_${t}`][n]}))}}delExec(e,t,n){switch(t){case"onStart":case"onLogin":this.srv[e].exec[t]=void 0}}setSetup(e,t){this.srv[e].setup=t}setLoginService(e){this.loginService=this.srv[e]}getLoginService(){return this.loginService}stateInit(e){this.srv[e].state=this.SERVICE_STATE.READY.state}get(e){return this.srv[e]}isStateDown(e){return this.srv[e].state===this.SERVICE_STATE.DOWN.state}isStateStop(e){return this.srv[e].state===this.SERVICE_STATE.STOP.state}setStateDown(e){this.srv[e].state=this.SERVICE_STATE.DOWN.state}setStateStop(e){this.srv[e].state=this.SERVICE_STATE.STOP.state}getAllRunning(){return this.getServices().filter((e=>e.running))}getAllStopped(){return this.getServices().filter((e=>!e.running))}getServices(){return Object.values(this.srv).sort(((e,t)=>e.name.toUpperCase()<t.name.toUpperCase()?-1:e.name.toUpperCase()>t.name.toUpperCase()?1:0))}getNanoSecTime(){const e=process.hrtime();return 1e9*e[0]+e[1]}}},238:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.logFile=t.cliSplitByLine=t.log=t.TASK_INDENT=void 0;const o=n(81),i=r(n(358)),s=r(n(147)),l=n(685),c=n(473),a=n(522);function p(...e){const t=[...arguments];(0,o.spawnSync)(t.shift(),[...t],{encoding:"utf-8",stdio:"ignore"})}if(t.TASK_INDENT="        ",t.log={write:console.log,log:console.log,warn:console.warn,err:console.error,end:()=>{}},!i.default.existsSync(c.LOG_FILE_PATH)){try{i.default.accessSync(c.LOG_FILE_ROOT,i.default.constants.R_OK|i.default.constants.W_OK|i.default.constants.X_OK)}catch(e){t.log.log(`[${a.term.fc.red}REQUIRED${a.term.mc.resetAll}] Please create '/var/log/pol' folder with 'rw' access for the running user!`),process.exit(1)}p("touch",c.LOG_FILE_PATH)}const u=`${process.env.ZSH}/custom/plugins/pol`,d=`${u}/pol.plugin.${s.default.version}.version`;process.env.ZSH&&process.env.ZSH.endsWith(".oh-my-zsh")&&!i.default.existsSync(d)&&(p("mkdir","-p",`${u}`),p("touch",d),p("cp",`${__dirname}/../zsh-plugin/pol.plugin.zsh`,`${u}/pol.plugin.zsh`),p("cp",`${__dirname}/../zsh-plugin/plugin.js`,`${u}/plugin.js`),t.log.log(`[${a.term.fc.green}  INFO  ${a.term.mc.resetAll}] .oh-my-zsh custom plugin installed. Please add 'pol' to enabled plugin list in '~/.zshrc' file.`)),process.env.TZ=process.env.TZ?process.env.TZ:i.default.readFileSync("/etc/timezone").toString().split("\n")[0];const g=(e,t,n)=>{Object.defineProperty(e.cli,"noErr",{get:function(){return globalThis.service.__prop__.noErr=!0,e.cli}}),Object.defineProperty(e.cli,"splitByLine",{get:function(){return globalThis.service.__prop__.splitByLine=!0,e.cli}}),Object.defineProperty(e.cli,"splitAll",{get:function(){return globalThis.service.__prop__.splitAll=!0,e.cli}}),e.cli.wd=(t="")=>(globalThis.service.__prop__.cwd=t,e.cli),e.cli.eol=(t="")=>(globalThis.service.__prop__.eol=t,e.cli),e.cli.do=function(){return v([...arguments],this.serviceName)},e.toLog=function(e){(0,c.msgToLog)(e)},e.toLog=e.toLog.bind(Object.assign(Object.assign({},t),{type:n,controller:e})),e.cli.do=e.cli.do.bind(Object.assign(Object.assign({},t),{type:n,controller:e}))},m=(e,t,n)=>{Object.defineProperty(e.exec,"it",{get:function(){return globalThis.service.__prop__.it=!0,e.exec}}),e.exec.wd=(t="")=>(globalThis.service.__prop__.cwd=t,e.exec),e.exec.do=function(){return f([...arguments],this.serviceName)},e.exec.do=e.exec.do.bind(Object.assign(Object.assign({},t),{type:n,controller:e}))},f=(e,t)=>{var n;const r=e.shift(),i=[...e],s=l.pol.getNanoSecTime(),a=null===(n=(new Error).stack)||void 0===n?void 0:n.split("at ")[3].split(" ")[0].split(".")[1];let p=Object.assign({},globalThis.service.__prop__);globalThis.service.__prop__={};const u=Object.assign(Object.assign({},process.env),{POL_CL_ENV:`__POL_CL__${r}__${s}__EXEC__POL_CL__`}),d=(0,o.spawn)(r,i,{cwd:p.cwd,env:u,stdio:p.it?"inherit":void 0}),g=new Promise((e=>{var n,r;p.it||(null===(n=d.stdout)||void 0===n||n.on("data",(e=>{(0,c.msgToLog)(e,"outexe")})),null===(r=d.stderr)||void 0===r||r.on("data",(e=>{(0,c.msgToLog)(e,"errexe")}))),d.on("close",(n=>{l.pol.delExec(t,a,s),e(n)}))}));return l.pol.addExec(t,a,s,{prog:r,params:i,promise:g,options:p,timestamp:s}),g},v=(e,t)=>{var n;const r=[],i=e.shift(),s=[...e],c=l.pol.getNanoSecTime(),a=null===(n=(new Error).stack)||void 0===n?void 0:n.split("at ")[3].split(" ")[0].split(".")[1];let p=Object.assign({},globalThis.service.__prop__);globalThis.service.__prop__={};const u=Object.assign(Object.assign({},process.env),{POL_CL_ENV:`__POL_CL__${i}__${c}__CLI__POL_CL__`});if(l.pol.isStateDown(t)&&"onStart"===a)return Promise.resolve();const d=(0,o.spawn)(i,s,{cwd:p.cwd,env:u});return l.pol.addCli(t,a,c,{prog:i,params:s}),new Promise((e=>{let n="";d.stdout.on("data",(e=>{n+=e})),d.stderr.on("data",(e=>{p.noErr||(n+=e)})),d.on("close",(o=>{if(l.pol.delCli(t,a,c),p.splitAll||p.splitByLine){const t=n.split(p.eol?p.eol:"\n").filter((e=>e));p.splitByLine?e({o:t,c:o}):(t.forEach((e=>r.push(e.split(/[ \t]/)))),e({o:r,c:o}))}else e({o:n,c:o})}))}))};globalThis.service={set setup(e){var t,n;const r=Object.assign(Object.assign({},e),{serviceName:null===(n=null===(t=(new Error).stack)||void 0===t?void 0:t.split("at ")[2])||void 0===n?void 0:n.trim().split(".js:")[0].replace(/.*\//,""),ssOnStart:{cli:{},exec:{}},ssOnStop:{cli:{}},ssOnLogin:{cli:{},exec:{}}});g(r.ssOnStart,r,"start"),g(r.ssOnStop,r,"stop"),g(r.ssOnLogin,r,"login"),m(r.ssOnStart,r,"start"),m(r.ssOnLogin,r,"login"),l.pol.stateInit(r.serviceName),l.pol.setSetup(r.serviceName,r)},__prop__:{}},t.cliSplitByLine=function(...e){const t=[...arguments],n=(0,o.spawn)(t.shift(),[...t]);return new Promise((e=>{let t="";n.stdout.on("data",(e=>{t+=e})),n.stderr.on("data",(e=>{t+=e})),n.on("close",(n=>{const r=t.split("\n").filter((e=>e));e({o:r,c:n})}))}))},t.logFile={write:c.msgToLog,log:()=>{},warn:()=>{},err:()=>{},end:()=>{}},console.log=console.log.bind(global.console,t.TASK_INDENT),console.warn=console.warn.bind(global.console,t.TASK_INDENT),console.error=console.error.bind(global.console,t.TASK_INDENT),Date.prototype.ISOStrings=function(){const e=-this.getTimezoneOffset(),t=function(e){return(e<10?"0":"")+e},n=(e>=0?"+":"-")+t(Math.floor(Math.abs(e)/60))+":"+t(Math.abs(e)%60);return this.setTime(this.getTime()+60*e*1e3),this.toISOString().replace("Z",n)}},473:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.msgToLog=t.LOG_FILE_PATH=t.LOG_FILE_ROOT=void 0;const o=r(n(358));t.LOG_FILE_ROOT="/var/log/pol",t.LOG_FILE_PATH=`${t.LOG_FILE_ROOT}/pol.log`;const i=o.default.createWriteStream(t.LOG_FILE_PATH,{flags:"a"});t.msgToLog=(e,t="outlog",n)=>{const r={time:(new Date).ISOStrings(),level:t,service:n,message:e};i.write(`${JSON.stringify(r)}\n`)}},626:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function l(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,l)}c((r=r.apply(e,t||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.polDaemon=void 0;const i=o(n(358)),s=o(n(37)),l=n(757),c=n(685),a=n(238),p=n(302),u=n(522),d="possible options: [--all|service_name.service]",g=process.env.POL_CONFIG_FOLDER?[process.env.POL_CONFIG_FOLDER]:["/etc/pol"];g.push(`${s.default.homedir()}/.config/pol`);const m=Object.assign({},process.env);t.polDaemon=e=>r(void 0,void 0,void 0,(function*(){var t,n,o,s,f,v,h;const _=()=>r(void 0,void 0,void 0,(function*(){const e=yield(0,a.cliSplitByLine)("find",...g,"-name","*.service.js"),t=yield(0,a.cliSplitByLine)("readlink","-e",...g.map((e=>`${e}/login.service.target.js`))),n=yield(0,a.cliSplitByLine)("sh","-c",'ps aux | grep ".*node.*pol.*boot$"');c.pol.running=!(n.o.length<2),e.o.filter((e=>!e.includes("No such file or directory"))).map((e=>{var t,n;const r=null===(n=null===(t=null==e?void 0:e.split("/"))||void 0===t?void 0:t.pop())||void 0===n?void 0:n.replace(".js","");c.pol.init(r,e)}));const r=(yield(0,a.cliSplitByLine)("find","/proc","-maxdepth","2","-name","environ")).o.filter((e=>{try{return i.default.accessSync(e,i.default.constants.R_OK),!0}catch(e){return!1}}));for(const e of r)try{const t=i.default.readFileSync(e).toString();if(t.includes("__POL__")){const n=t.split("__POL_CL__")[1].split("__"),r=t.split("__POL__")[1].split("__");c.pol.setRunning(r[0]),c.pol.addProcess(r[0],e.split("/")[2],n[0])}}catch(e){}const o=require;for(const e of c.pol.getServices())o(e.path);t.o.forEach((e=>{var t,n;c.pol.setLoginService(null===(n=null===(t=null==e?void 0:e.split("/"))||void 0===t?void 0:t.pop())||void 0===n?void 0:n.replace(".js",""))}))}));yield _();const b=(e,t)=>r(void 0,void 0,void 0,(function*(){if(!e)return;if(!c.pol.getServices().some((t=>t.name===e||"--all"===e)))return void t.write(d);const n=[];return new Promise((r=>{var o,i,s,l,p;for(const r of c.pol.getServices()){if("--all"!==e&&r.name!==e)continue;let d;const g=c.pol.get(r.name);n.push(new Promise((e=>d=e))),c.pol.stateInit(r.name);try{if(c.pol.getAllRunning().some((e=>e.name===r.name))){t.write(`[${u.term.fc.yellow} WARN ${u.term.mc.resetAll}] ${r.name} is already running ...`),null===(i=null===(o=c.pol.get(r.name))||void 0===o?void 0:o.startResolver)||void 0===i||i.call(o);continue}(null===(s=g.setup)||void 0===s?void 0:s.onStart)&&(process.env=Object.assign(Object.assign({},m),{POL:`__POL__${r.name}__${c.pol.getNanoSecTime()}__POL__`}),t.write(`[${u.term.fc.green}  OK  ${u.term.mc.resetAll}] start ${r.name} ...`),g.setup.onStart(g.setup.ssOnStart).then((()=>{c.pol.startRunChecker(r.name,"after","onStart","started",a.logFile)})),c.pol.startRunChecker(r.name,"before","onStart","started",t,d))}catch(e){t.write(`[${u.term.fc.red}FAILED${u.term.mc.resetAll}] start ${r.name} ...`),t.write(`        ${e.stack}`),null===(p=null===(l=c.pol.get(r.name))||void 0===l?void 0:l.startResolver)||void 0===p||p.call(l)}}Promise.all(n).then((()=>{r(!0)}))}))})),S=(e,t)=>r(void 0,void 0,void 0,(function*(){if(!c.pol.getServices().some((t=>t.name===e||"--all"===e)))return void t.write(d);if(!c.pol.getAllRunning().some((t=>t.name===e))&&"--all"!==e)return void t.write(`[${u.term.fc.yellow} WARN ${u.term.mc.resetAll}] ${e} is already stopped ...`);if("--all"===e)for(const e of c.pol.getServices())c.pol.setStateDown(e.name);else c.pol.setStateDown(e);const n=[];return new Promise((o=>r(void 0,void 0,void 0,(function*(){var i;for(const o of c.pol.getAllRunning())if("--all"===e||e===o.name){let e=()=>{},s=()=>{},l=()=>{};const p=[new Promise((e=>s=e)),new Promise((e=>l=e))],d=e=>r(void 0,void 0,void 0,(function*(){let n="";c.pol.stopRunChecker(e.name,"Start");for(const r of e.processes){let o=a.TASK_INDENT;n!==e.name&&(n=e.name,o=`[${u.term.fc.green} STOP ${u.term.mc.resetAll}]`);const{c:i}=yield(0,a.cliSplitByLine)("kill",r.procId);0==i&&t.write(`${o} ${e.name} service with proc/pid[${r.procName}/${r.procId}] ...`)}}));n.push(new Promise((t=>e=t)));try{(null===(i=o.setup)||void 0===i?void 0:i.onStop)?(o.setup.ssOnStop.stopAll=()=>r(void 0,void 0,void 0,(function*(){yield d(o),c.pol.setStateStop(o.name),c.pol.startRunChecker(o.name,"after","onStop","stopped",t,l)})),o.setup.onStop(o.setup.ssOnStop),c.pol.startRunChecker(o.name,"before","onStop","stopped",t,s)):(s(),l(),yield d(o)),Promise.all(p).then((()=>{e()}))}catch(n){t.write(`[${u.term.fc.red}FAILED${u.term.mc.resetAll}] stop ${o.name} ...`),e()}}if("--all"===e)for(const e of c.pol.getAllStopped())t.write(`[${u.term.fc.yellow} WARN ${u.term.mc.resetAll}] ${e.name} is already stopped ...`);Promise.all(n).then((()=>{o()}))}))))}));switch(e._[0]){case"boot":if(c.pol.running&&(a.log.log("Another pol daemon is running!"),process.exit(1)),yield(0,p.serverCreate)(((e,t)=>r(void 0,void 0,void 0,(function*(){switch(e._[0]){case"stop":!e._.length||e._.length<2&&!e.all?(t.write(d),t.end()):(yield _(),yield S(e._[1]?e._[1]:e.all?"--all":null,t),t.end());break;case"start":!e._.length||e._.length<2&&!e.all?(t.write(d),t.end()):(yield _(),yield b(e._[1]?e._[1]:e.all?"--all":null,t),t.end());break;case"restart":!e._.length||e._.length<2&&!e.all?(t.write(d),t.end()):(yield _(),(yield S(e._[1]?e._[1]:e.all?"--all":null,t))&&(yield b(e._[1]?e._[1]:e.all?"--all":null,t)),t.end())}})))),yield b("--all",a.log),c.pol.getLoginService()){const e=()=>r(void 0,void 0,void 0,(function*(){yield _(),yield S("--all",a.log),(0,p.serverCleanup)()}));c.pol.isStateDown(null===(t=c.pol.getLoginService())||void 0===t?void 0:t.name)?yield e():(process.env=Object.assign(Object.assign({},m),{POL:`__POL__${null===(n=c.pol.getLoginService())||void 0===n?void 0:n.name}__${c.pol.getNanoSecTime()}__POL__`}),null===(f=null===(s=null===(o=c.pol.getLoginService())||void 0===o?void 0:o.setup)||void 0===s?void 0:s.onLogin)||void 0===f||f.call(s,null===(h=null===(v=c.pol.getLoginService())||void 0===v?void 0:v.setup)||void 0===h?void 0:h.ssOnLogin).then((()=>r(void 0,void 0,void 0,(function*(){var t,n,o,i,s;(null===(t=c.pol.getLoginService())||void 0===t?void 0:t.exec.onLogin)?null===(s=null===(i=null===(o=null===(n=c.pol.getLoginService())||void 0===n?void 0:n.exec)||void 0===o?void 0:o.onLogin)||void 0===i?void 0:i.promise)||void 0===s||s.then((()=>r(void 0,void 0,void 0,(function*(){yield e()})))):yield e()})))))}break;case"completion":if("zsh"===e._[1]&&process.env.ZSH&&process.env.ZSH.endsWith(".oh-my-zsh")){const e=`${process.env.ZSH}/custom/plugins/pol`;yield(0,a.cliSplitByLine)("mkdir","-p",`${e}`),yield(0,a.cliSplitByLine)("cp",`${__dirname}/../zsh-plugin/pol.plugin.zsh`,`${e}/pol.plugin.zsh`),yield(0,a.cliSplitByLine)("cp",`${__dirname}/../zsh-plugin/plugin.js`,`${e}/plugin.js`),a.log.log(`[${u.term.fc.green}  INFO  ${u.term.mc.resetAll}] .oh-my-zsh custom plugin installed. Please add 'pol' to enabled plugin list in '~/.zshrc' file.`)}break;case"ps":let i="";for(const e of c.pol.getAllRunning())for(const t of e.processes){let n=a.TASK_INDENT;i!==e.name&&(i=e.name,n=`[${u.term.fc.green} RUN ${u.term.mc.resetAll}] `),a.log.log(n,e.name,`service with proc/pid[${t.procName}/${t.procId}] ...`)}if(e.all)for(const e of c.pol.getAllStopped())a.log.log(`[${u.term.fc.yellow} STOP ${u.term.mc.resetAll}]`,e.name,"service ...");break;case"stop":case"start":case"restart":(yield(0,p.clientCreate)()).write(JSON.stringify(e));break;default:(0,l.help)()}}))},302:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function l(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,l)}c((r=r.apply(e,t||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.clientCreate=t.clientCleanup=t.serverCreate=t.serverCleanup=void 0;const i=o(n(358)),s=o(n(808)),l=n(238),c=n(473),a={},p=e=>{(0,c.msgToLog)(e,"pol   ")};var u,d,g=!1;const m="/tmp/pol.sock";t.serverCleanup=()=>{if(!g&&u){if(g=!0,p("Socket server: terminating"),Object.keys(a).length){let e=Object.keys(a);for(;e.length;){let t=e.pop();a[t].end()}}u.close()}},t.serverCreate=(e=((e,t)=>r(void 0,void 0,void 0,(function*(){}))))=>r(void 0,void 0,void 0,(function*(){return p("Socket server: checking for leftover socket"),i.default.existsSync(m)?(p("Socket server: removing leftover socket."),i.default.unlinkSync(m)):p("Socket sestringrver: no leftover socket found."),process.on("exit",t.serverCleanup),function(e,t=((e,t)=>r(this,void 0,void 0,(function*(){})))){let n;return p("Socket server: creating"),new Promise((o=>{u=s.default.createServer((function(e){p("Socket server: connection acknowledged");var n=Date.now().toString();a[n]=e,e.on("end",(function(){p("Socket server: client disconnected"),delete a[n]})),e.on("data",(e=>r(this,void 0,void 0,(function*(){const r=JSON.parse(e.toString());t(r,a[n])}))))})).listen(e).on("connection",(function(e){p("Socket server: client connected"),n=e})),o()}))}(m,e)})),t.clientCleanup=()=>{!g&&d&&(g=!0,p("Socket client: Terminating."),d.end())},t.clientCreate=()=>(process.on("exit",t.clientCleanup),new Promise((e=>{d=s.default.createConnection(m).on("connect",(()=>{e(d)})).on("data",(function(e){const t=e.toString();l.log.log(t)})).on("error",(function(e){l.log.log("pol daemon not running. run `pol boot` first!"),process.exit(1)})).on("close",(function(e){}))})))},522:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.term=void 0;const n={stdout:process.stdout,print:function(e=""){return n.stdout.write(e),n},bold:function(e,t=""){return n.print(n.mc.bold+t+e+n.mc.resetAll)},italic:function(e,t=""){return n.print(n.mc.italic+t+e+n.mc.resetAll)},underline:function(e,t=""){return n.print(n.mc.underline+t+e+n.mc.resetAll)},inverse:function(e,t=""){return n.print(n.mc.inverse+t+e+n.mc.resetAll)},strike:function(e,t=""){return n.print(n.mc.strike+t+e+n.mc.resetAll)},defaultColor:function(e){return n.print(n.fc.defaultColor+e+n.mc.resetAll)},black:function(e){return n.print(n.fc.black+e+n.mc.resetAll)},red:function(e){return n.print(n.fc.red+e+n.mc.resetAll)},green:function(e){return n.print(n.fc.green+e+n.mc.resetAll)},yellow:function(e){return n.print(n.fc.yellow+e+n.mc.resetAll)},blue:function(e){return n.print(n.fc.blue+e+n.mc.resetAll)},magenta:function(e){return n.print(n.fc.magenta+e+n.mc.resetAll)},cyan:function(e){return n.print(n.fc.cyan+e+n.mc.resetAll)},white:function(e){return n.print(n.fc.white+e+n.mc.resetAll)},brightBlack:function(e){return n.print(n.fc.brightBlack+e+n.mc.resetAll)},brightRed:function(e){return n.print(n.fc.brightRed+e+n.mc.resetAll)},brightGreen:function(e){return n.print(n.fc.brightGreen+e+n.mc.resetAll)},brightYellow:function(e){return n.print(n.fc.brightYellow+e+n.mc.resetAll)},brightBlue:function(e){return n.print(n.fc.brightBlue+e+n.mc.resetAll)},brightMagenta:function(e){return n.print(n.fc.brightMagenta+e+n.mc.resetAll)},brightCyan:function(e){return n.print(n.fc.brightCyan+e+n.mc.resetAll)},brightWhite:function(e){return n.print(n.fc.brightWhite+e+n.mc.resetAll)},customColor:function(e,t){const r=isNaN(e)?e:`[38;5;${e}m`;return n.print(r+t+n.mc.resetAll)},bgDefaultColor:function(e,t=""){return n.print(n.fc.brightWhite+t+e+n.mc.resetAll)},bgBlack:function(e,t=""){return n.print(n.bc.black+t+e+n.mc.resetAll)},bgRed:function(e,t=""){return n.print(n.bc.red+t+e+n.mc.resetAll)},bgGreen:function(e,t=""){return n.print(n.bc.green+t+e+n.mc.resetAll)},bgYellow:function(e,t=""){return n.print(n.bc.yellow+t+e+n.mc.resetAll)},bgBlue:function(e,t=""){return n.print(n.bc.blue+t+e+n.mc.resetAll)},bgMagenta:function(e,t=""){return n.print(n.bc.magenta+t+e+n.mc.resetAll)},bgCyan:function(e,t=""){return n.print(n.bc.cyan+t+e+n.mc.resetAll)},bgWhite:function(e,t=""){return n.print(n.bc.white+t+e+n.mc.resetAll)},bgBrightBlack:function(e,t=""){return n.print(n.bc.brightBlack+t+e+n.mc.resetAll)},bgBrightRed:function(e,t=""){return n.print(n.bc.brightRed+t+e+n.mc.resetAll)},bgBrightGreen:function(e,t=""){return n.print(n.bc.brightGreen+t+e+n.mc.resetAll)},bgBrightYellow:function(e,t=""){return n.print(n.bc.brightYellow+t+e+n.mc.resetAll)},bgBrightBlue:function(e,t=""){return n.print(n.bc.brightBlue+t+e+n.mc.resetAll)},bgBrightMagenta:function(e,t=""){return n.print(n.bc.brightMagenta+t+e+n.mc.resetAll)},bgBrightCyan:function(e,t=""){return n.print(n.bc.brightCyan+t+e+n.mc.resetAll)},bgBrightWhite:function(e,t=""){return n.print(n.bc.brightWhite+t+e+n.mc.resetAll)},customBgColor:function(e,t,r=""){const o=isNaN(e)?e.toString():`[48;5;${e}m`,i=isNaN(e)?e.toString():`[38;5;${e}m`;return n.print(o+i+t+n.mc.resetAll)},mc:{resetAll:"[0m[39m[49m",clearLineCursorRight:"[K",clearLine:"[2K",styleReset:"[0m",bold:"[1m",italic:"[3m",underline:"[4m",inverse:"[7m",strike:"[9m",cursorHide:"[?25l",cursorShow:"[?25h"},fc:{defaultColor:"[39m",black:"[30m",red:"[31m",green:"[32m",yellow:"[33m",blue:"[34m",magenta:"[35m",cyan:"[36m",white:"[37m",brightBlack:"[90m",brightRed:"[91m",brightGreen:"[92m",brightYellow:"[93m",brightBlue:"[94m",brightMagenta:"[95m",brightCyan:"[96m",brightWhite:"[97m",customColor:function(e){return`[38;5;${e}m`}},bc:{defaultColor:"[49m",black:"[40m",red:"[41m",green:"[42m",yellow:"[43m",blue:"[44m",magenta:"[45m",cyan:"[46m",white:"[47m",brightBlack:"[100m",brightRed:"[101m",brightGreen:"[102m",brightYellow:"[103m",brightBlue:"[104m",brightMagenta:"[105m",brightCyan:"[106m",brightWhite:"[107m",customBgColor:function(e){return`[48;5;${e}m`}}};t.term=n},45:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.printUsage=void 0;const r=n(522),o="    ",i="\n",s=(e="")=>void 0!==e&&e.length?e:void 0,l=(e,t=[],n)=>{t.length&&s(t[0].name)&&(r.term.print(r.term.mc.bold+i+e),t.forEach((e=>{r.term.print(r.term.mc.resetAll),n&&r.term.print(r.term.fc.brightWhite+r.term.mc.bold),r.term.print(`${o+e.name}`);const t=s(e.desc);t&&(r.term.print(r.term.mc.resetAll).print("\n"),r.term.print(`${o}${o}${t}`)),r.term.print(r.term.mc.resetAll).print("\n")})))};t.printUsage=(e={name:"",usage:[{name:"",desc:""}],options:[{switch:"",desc:"",type:""}],commands:[{switch:"",desc:""}],copyright:"copyright@2020",version:"0.0.1"})=>{if(l("NAME\n",[{name:e.name}]),l("USAGE\n",e.usage,!0),e.options&&e.options.length){let t=!1;e.options.forEach((e=>{e.switch.length&&(t||(t=!0,r.term.print(r.term.mc.bold+i+"OPTIONS\n"+r.term.mc.resetAll)),r.term.print(`${r.term.fc.brightWhite+r.term.mc.bold}${o+e.switch}\n`),r.term.print(`${r.term.mc.resetAll}${o}${o}${e.desc}`),e.type&&r.term.print(`${r.term.fc.cyan} [${e.type}]`),r.term.print("\n"))}))}if(e.commands&&e.commands.length){let t=!1;e.commands.forEach((e=>{e.switch.length&&(t||(t=!0,r.term.print(r.term.mc.bold+i+"COMMANDS\n"+r.term.mc.resetAll)),r.term.print(`${r.term.fc.brightWhite+r.term.mc.bold}${o+e.switch}\n`),r.term.print(`${r.term.mc.resetAll}${o}${o}${e.desc}`),r.term.print("\n"))}))}r.term.print(i),(e.version&&e.version.length||e.copyright&&e.copyright.length)&&r.term.print("== "),e.version&&e.version.length&&r.term.print(`v${e.version}`),e.copyright&&e.copyright.length&&(e.version&&e.version.length&&r.term.print(" - "),r.term.print(e.copyright)),(e.version&&e.version.length||e.copyright&&e.copyright.length)&&r.term.print(" ==\n\n")}},81:e=>{e.exports=require("child_process")},358:e=>{e.exports=require("fs")},808:e=>{e.exports=require("net")},37:e=>{e.exports=require("os")},147:e=>{e.exports=JSON.parse('{"name":"process-list-manager","version":"1.0.6","description":"Nodejs based init system called process list manager - pol","bin":{"pol":"./bin/pol.js"},"scripts":{"build":"webpack --mode production"},"author":"ui3o.com","license":"ISC","dependencies":{"minimist":"^1.2.8"},"devDependencies":{"@types/minimist":"^1.2.3","@types/node":"^20.7.0","ts-loader":"^9.4.4","ts-node":"^10.9.1","typescript":"^5.2.2","webpack":"^5.88.2","webpack-cli":"^5.1.4","webpack-shebang-plugin":"^1.1.8"}}')}},t={};!function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}(757)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,