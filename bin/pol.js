#!/usr/bin/env node

(()=>{"use strict";var e={562:e=>{function t(e){return"number"==typeof e||!!/^0x[0-9a-f]+$/i.test(e)||/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(e)}function n(e,t){return"constructor"===t&&"function"==typeof e[t]||"__proto__"===t}e.exports=function(e,o){o||(o={});var i={bools:{},strings:{},unknownFn:null};"function"==typeof o.unknown&&(i.unknownFn=o.unknown),"boolean"==typeof o.boolean&&o.boolean?i.allBools=!0:[].concat(o.boolean).filter(Boolean).forEach((function(e){i.bools[e]=!0}));var r={};function s(e){return r[e].some((function(e){return i.bools[e]}))}Object.keys(o.alias||{}).forEach((function(e){r[e]=[].concat(o.alias[e]),r[e].forEach((function(t){r[t]=[e].concat(r[e].filter((function(e){return t!==e})))}))})),[].concat(o.string).filter(Boolean).forEach((function(e){i.strings[e]=!0,r[e]&&[].concat(r[e]).forEach((function(e){i.strings[e]=!0}))}));var l=o.default||{},c={_:[]};function a(e,t,o){for(var r=e,s=0;s<t.length-1;s++){var l=t[s];if(n(r,l))return;void 0===r[l]&&(r[l]={}),r[l]!==Object.prototype&&r[l]!==Number.prototype&&r[l]!==String.prototype||(r[l]={}),r[l]===Array.prototype&&(r[l]=[]),r=r[l]}var c=t[t.length-1];n(r,c)||(r!==Object.prototype&&r!==Number.prototype&&r!==String.prototype||(r={}),r===Array.prototype&&(r=[]),void 0===r[c]||i.bools[c]||"boolean"==typeof r[c]?r[c]=o:Array.isArray(r[c])?r[c].push(o):r[c]=[r[c],o])}function p(e,n,o){if(!o||!i.unknownFn||function(e,t){return i.allBools&&/^--[^=]+$/.test(t)||i.strings[e]||i.bools[e]||r[e]}(e,o)||!1!==i.unknownFn(o)){var s=!i.strings[e]&&t(n)?Number(n):n;a(c,e.split("."),s),(r[e]||[]).forEach((function(e){a(c,e.split("."),s)}))}}Object.keys(i.bools).forEach((function(e){p(e,void 0!==l[e]&&l[e])}));var u=[];-1!==e.indexOf("--")&&(u=e.slice(e.indexOf("--")+1),e=e.slice(0,e.indexOf("--")));for(var d=0;d<e.length;d++){var m,g,f=e[d];if(/^--.+=/.test(f)){var v=f.match(/^--([^=]+)=([\s\S]*)$/);m=v[1];var h=v[2];i.bools[m]&&(h="false"!==h),p(m,h,f)}else if(/^--no-.+/.test(f))p(m=f.match(/^--no-(.+)/)[1],!1,f);else if(/^--.+/.test(f))m=f.match(/^--(.+)/)[1],void 0===(g=e[d+1])||/^(-|--)[^-]/.test(g)||i.bools[m]||i.allBools||r[m]&&s(m)?/^(true|false)$/.test(g)?(p(m,"true"===g,f),d+=1):p(m,!i.strings[m]||"",f):(p(m,g,f),d+=1);else if(/^-[^-]+/.test(f)){for(var _=f.slice(1,-1).split(""),b=!1,S=0;S<_.length;S++)if("-"!==(g=f.slice(S+2))){if(/[A-Za-z]/.test(_[S])&&"="===g[0]){p(_[S],g.slice(1),f),b=!0;break}if(/[A-Za-z]/.test(_[S])&&/-?\d+(\.\d*)?(e-?\d+)?$/.test(g)){p(_[S],g,f),b=!0;break}if(_[S+1]&&_[S+1].match(/\W/)){p(_[S],f.slice(S+2),f),b=!0;break}p(_[S],!i.strings[_[S]]||"",f)}else p(_[S],g,f);m=f.slice(-1)[0],b||"-"===m||(!e[d+1]||/^(-|--)[^-]/.test(e[d+1])||i.bools[m]||r[m]&&s(m)?e[d+1]&&/^(true|false)$/.test(e[d+1])?(p(m,"true"===e[d+1],f),d+=1):p(m,!i.strings[m]||"",f):(p(m,e[d+1],f),d+=1))}else if(i.unknownFn&&!1===i.unknownFn(f)||c._.push(i.strings._||!t(f)?f:Number(f)),o.stopEarly){c._.push.apply(c._,e.slice(d+1));break}}return Object.keys(l).forEach((function(e){var t,n,o;t=c,n=e.split("."),o=t,n.slice(0,-1).forEach((function(e){o=o[e]||{}})),n[n.length-1]in o||(a(c,e.split("."),l[e]),(r[e]||[]).forEach((function(t){a(c,t.split("."),l[e])})))})),o["--"]?c["--"]=u.slice():u.forEach((function(e){c._.push(e)})),c}},757:function(e,t,n){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.help=void 0;const i=o(n(562)),r=o(n(147)),s=n(509),l=n(45),c=n(727),a=(0,i.default)(process.argv.slice(2));t.help=()=>{(0,l.printUsage)({name:"pol - Process list manager.",usage:[{name:"pol [options][command]",desc:"Process list (pol) manager accepts command and options."}],options:[{desc:"show help",switch:"-h, --help",type:"boolean"}],commands:[{desc:"boot init system",switch:"boot"},{desc:"start [service|--all]",switch:"start"},{desc:"restart [service|--all]",switch:"restart"},{desc:"stop [service|--all]",switch:"stop"},{desc:"list running [none|--all]",switch:"ps"}],version:r.default.version,copyright:"copyright@2023"}),process.exit(0)},(a.h||a.help)&&(0,t.help)(),(0,c.isClientCommand)(a._[0])?(0,c.polClient)(a):(0,s.isServerCommand)(a._[0])?(0,s.polServer)(a):(0,t.help)()},685:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pol=void 0;const o=n(473),i=n(522);t.pol=new class{constructor(){this.SERVICE_STATE={READY:{name:"SERVICE_STATE_READY",state:0},UP:{name:"SERVICE_STATE_UP",state:1},DOWN:{name:"SERVICE_STATE_DOWN",state:2},STOP:{name:"SERVICE_STATE_STOP",state:3}},this.defaults={CLI_PRE_INTERVAL:50,CLI_INTERVAL:200},this.running=!1,this.srv={},this.loginService=void 0}init(e,t){return this.srv[e]=this.srv[e]?this.srv[e]:{processes:[],path:t,name:e,state:this.SERVICE_STATE.READY.state,interval:{before_onStart:void 0,after_onStart:void 0,before_onStop:void 0,after_onStop:void 0},cli:{after_onStart:{},before_onStart:{},after_onStop:{},before_onStop:{},after_onLogin:{},before_onLogin:{}},exec:{onStart:void 0,onLogin:void 0}},this.srv[e].processes=[],this.srv[e]}startRunChecker(e,t,n,o="",r,s=void 0){const l=this.srv[e].interval,c=this.srv[e].cli[`${t}_${n}`],a=n.toLowerCase().includes("start")?"start":"stop";"before_onStart"==`${t}_${n}`&&s&&(this.srv[e].startResolver=s);const p=()=>{Object.keys(c).length?(l[`${t}_${n}`]||(l[`${t}_${n}`]=setInterval(p,2e3)),r.write(`         waiting ${t} ${e} ${a} ...`)):(l[`${t}_${n}`]&&(l[`${t}_${n}`]=clearInterval(l[`${t}_${n}`]),r.write(`[${i.term.fc.green}  OK  ${i.term.mc.resetAll}] ${e} is ${o} ...`)),s&&s())};Object.keys(c).length?setTimeout(p,500):s&&s()}stopRunChecker(e,t){var n,o;const i=this.srv[e].interval;(i[`before_on${t}`]||i[`after_on${t}`])&&(i[`before_on${t}`]&&(i[`before_on${t}`]=clearInterval(i[`before_on${t}`]),this.srv[e].startResolver&&(null===(o=(n=this.srv[e]).startResolver)||void 0===o||o.call(n))),i[`after_on${t}`]&&(i[`after_on${t}`]=clearInterval(i[`after_on${t}`])))}setRunning(e){this.srv[e].running=!0}addProcess(e,t,n){this.srv[e].processes.push({procId:t,procName:n})}addCli(e,n,o,i){switch(n){case"onStart":case"onLogin":case"onStop":("onStop"===n?t.pol.isStateStop(e):this.srv[e].exec[n])?this.srv[e].cli[`after_${n}`][`${o}`]=i:this.srv[e].cli[`before_${n}`][`${o}`]=i}}addExec(e,t,n,i){switch(t){case"onStart":case"onLogin":this.srv[e].exec[t]?(0,o.msgToLog)(`not possible to execute to exe in ${t}`,"pol   ",e):this.srv[e].exec[t]=i}}delCli(e,t,n){switch(t){case"onStart":case"onStop":case"onLogin":Object.keys(this.srv[e].cli[`before_${t}`]).some((e=>e===`${n}`))?Object.keys(this.srv[e].cli[`before_${t}`]).forEach((o=>{o===`${n}`&&delete this.srv[e].cli[`before_${t}`][o]})):Object.keys(this.srv[e].cli[`after_${t}`]).forEach((o=>{o===`${n}`&&delete this.srv[e].cli[`after_${t}`][o]}))}}delExec(e,t){switch(t){case"onStart":case"onLogin":this.srv[e].exec[t]=void 0}}setSetup(e,t){this.srv[e].setup=t}setLoginService(e){this.loginService=this.srv[e]}getLoginService(){return this.loginService}stateInit(e){this.srv[e].state=this.SERVICE_STATE.READY.state}get(e){return this.srv[e]}isStateAfterDown(e){return this.srv[e].state>=this.SERVICE_STATE.DOWN.state}isStateStop(e){return this.srv[e].state===this.SERVICE_STATE.STOP.state}setStateReady(e){this.srv[e].state=this.SERVICE_STATE.READY.state,this.srv[e].running=!1}setStateDown(e){this.srv[e].state=this.SERVICE_STATE.DOWN.state}setStateStop(e){this.srv[e].state=this.SERVICE_STATE.STOP.state}getAllRunning(){return this.getServices().filter((e=>e.running))}getAllStopped(){return this.getServices().filter((e=>!e.running))}getServices(){return Object.values(this.srv).sort(((e,t)=>e.name.toUpperCase()<t.name.toUpperCase()?-1:e.name.toUpperCase()>t.name.toUpperCase()?1:0))}getNanoSecTime(){const e=process.hrtime();return 1e9*e[0]+e[1]}}},238:function(e,t,n){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(81),r=o(n(358)),s=o(n(147)),l=n(685),c=n(473),a=n(457),p=n(522),u=n(727);if(!r.default.existsSync(c.LOG_FILE_PATH)){try{r.default.accessSync(c.LOG_FILE_ROOT,r.default.constants.R_OK|r.default.constants.W_OK|r.default.constants.X_OK)}catch(e){c.log.log(`[${p.term.fc.red}REQUIRED${p.term.mc.resetAll}] Please create '/var/log/pol' folder with 'rw' access for the running user!`),process.exit(1)}(0,a.cliSplitByLineSync)("touch",c.LOG_FILE_PATH)}const d=`${process.env.ZSH}/custom/plugins/pol/pol.plugin.${s.default.version}.version`;process.env.ZSH&&process.env.ZSH.endsWith(".oh-my-zsh")&&!r.default.existsSync(d)&&((0,a.cliSplitByLineSync)("touch",d),(0,u.zshCompletionInit)());const m=(e,t,n)=>{Object.defineProperty(e.cli,"noErr",{get:function(){return globalThis.service.__prop__.noErr=!0,e.cli}}),Object.defineProperty(e.cli,"splitByLine",{get:function(){return globalThis.service.__prop__.splitByLine=!0,e.cli}}),Object.defineProperty(e.cli,"splitAll",{get:function(){return globalThis.service.__prop__.splitAll=!0,e.cli}}),e.cli.gid=(t="")=>(globalThis.service.__prop__.gid=t,e.cli),e.cli.uid=(t="")=>(globalThis.service.__prop__.uid=t,e.cli),e.cli.wd=(t="")=>(globalThis.service.__prop__.cwd=t,e.cli),e.cli.eol=(t="")=>(globalThis.service.__prop__.eol=t,e.cli),e.cli.do=function(){return v([...arguments],this.serviceName)},e.toLog=function(e){(0,c.msgToLog)(e)},e.toLog=e.toLog.bind(Object.assign(Object.assign({},t),{type:n,controller:e})),e.cli.do=e.cli.do.bind(Object.assign(Object.assign({},t),{type:n,controller:e}))},g=(e,t,n)=>{Object.defineProperty(e.exec,"it",{get:function(){return globalThis.service.__prop__.it=!0,e.exec}}),e.exec.gid=(t="")=>(globalThis.service.__prop__.gid=t,e.exec),e.exec.uid=(t="")=>(globalThis.service.__prop__.uid=t,e.exec),e.exec.wd=(t="")=>(globalThis.service.__prop__.cwd=t,e.exec),e.exec.do=function(){return f([...arguments],this.serviceName)},e.exec.do=e.exec.do.bind(Object.assign(Object.assign({},t),{type:n,controller:e}))},f=(e,t)=>{var n;const o=e.shift(),r=[...e],s=l.pol.getNanoSecTime(),p=null===(n=(new Error).stack)||void 0===n?void 0:n.split("at ")[3].split(" ")[0].split(".")[1];let u=Object.assign({},globalThis.service.__prop__);globalThis.service.__prop__={};const d=Object.assign(Object.assign({},process.env),{POL_CL_ENV:`__POL_CL__${o}__${s}__EXEC__POL_CL__`});if(l.pol.isStateAfterDown(t)||l.pol.get(t).exec[p])return Promise.resolve();if(u.gid){const e=(0,a.cliSplitByLineSync)("id","-g",`${u.gid}`);u.gid=e.c?void 0:Number(e.o[0])}if(u.uid){const e=(0,a.cliSplitByLineSync)("id","-u",`${u.uid}`);u.uid=e.c?void 0:Number(e.o[0])}const m=(0,i.spawn)(o,r,{cwd:u.cwd,env:d,stdio:u.it?"inherit":void 0,gid:u.gid,uid:u.uid}),g=new Promise((e=>{var n,o;u.it||(null===(n=m.stdout)||void 0===n||n.on("data",(e=>{(0,c.msgToLog)(e.toString(),"outexe")})),null===(o=m.stderr)||void 0===o||o.on("data",(e=>{(0,c.msgToLog)(e.toString(),"errexe")}))),m.on("close",(n=>{e(n),l.pol.delExec(t,p)}))}));return l.pol.addExec(t,p,s,{prog:o,params:r,promise:g,options:u,timestamp:s}),g},v=(e,t)=>{var n;const o=[],r=e.shift(),s=[...e],c=l.pol.getNanoSecTime(),p=null===(n=(new Error).stack)||void 0===n?void 0:n.split("at ")[3].split(" ")[0].split(".")[1];let u=Object.assign({},globalThis.service.__prop__);globalThis.service.__prop__={};const d=Object.assign(Object.assign({},process.env),{POL_CL_ENV:`__POL_CL__${r}__${c}__CLI__POL_CL__`});if(l.pol.isStateAfterDown(t)&&"onStop"!=p)return Promise.resolve();if(u.gid){const e=(0,a.cliSplitByLineSync)("id","-g",`${u.gid}`);u.gid=e.c?void 0:Number(e.o[0])}if(u.uid){const e=(0,a.cliSplitByLineSync)("id","-u",`${u.uid}`);u.uid=e.c?void 0:Number(e.o[0])}const m=(0,i.spawn)(r,s,{cwd:u.cwd,env:d,gid:u.gid,uid:u.uid});return l.pol.addCli(t,p,c,{prog:r,params:s}),new Promise((e=>{let n="";m.stdout.on("data",(e=>{n+=e})),m.stderr.on("data",(e=>{u.noErr||(n+=e)})),m.on("close",(i=>{if(u.splitAll||u.splitByLine){const t=n.split(u.eol?u.eol:"\n").filter((e=>e));u.splitByLine?e({o:t,c:i}):(t.forEach((e=>o.push(e.split(/[ \t]/)))),e({o,c:i}))}else e({o:n,c:i});l.pol.delCli(t,p,c)}))}))};globalThis.service={set setup(e){var t,n;const o=Object.assign(Object.assign({},e),{serviceName:null===(n=null===(t=(new Error).stack)||void 0===t?void 0:t.split("at ")[2])||void 0===n?void 0:n.trim().split(".js:")[0].replace(/.*\//,""),ssOnStart:{cli:{},exec:{}},ssOnStop:{cli:{}},ssOnLogin:{cli:{},exec:{}}});m(o.ssOnStart,o,"start"),m(o.ssOnStop,o,"stop"),m(o.ssOnLogin,o,"login"),g(o.ssOnStart,o,"start"),g(o.ssOnLogin,o,"login"),l.pol.stateInit(o.serviceName),l.pol.setSetup(o.serviceName,o)},__prop__:{}}},473:function(e,t,n){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.logFile=t.log=t.msgToLog=t.logFileInit=t.LOG_FILE_PATH=t.LOG_FILE_ROOT=t.TASK_INDENT=void 0;const i=o(n(358));let r;t.TASK_INDENT="        ",t.LOG_FILE_ROOT="/var/log/pol",t.LOG_FILE_PATH=`${t.LOG_FILE_ROOT}/pol.log`,t.logFileInit=()=>{r=i.default.createWriteStream(t.LOG_FILE_PATH,{flags:"a"})},t.msgToLog=(e,t="outlog",n)=>{const o={time:(new Date).ISOStrings(),level:t,service:n,message:e};null==r||r.write(`${JSON.stringify(o)}\n`)},t.log={write:console.log,log:console.log,warn:console.warn,err:console.error,end:()=>{}},t.logFile={write:t.msgToLog,log:()=>{},warn:()=>{},err:()=>{},end:()=>{}},console.log=console.log.bind(global.console,t.TASK_INDENT),console.warn=console.warn.bind(global.console,t.TASK_INDENT),console.error=console.error.bind(global.console,t.TASK_INDENT),Date.prototype.ISOStrings=function(){const e=-this.getTimezoneOffset(),t=function(e){return(e<10?"0":"")+e},n=(e>=0?"+":"-")+t(Math.floor(Math.abs(e)/60))+":"+t(Math.abs(e)%60);return this.setTime(this.getTime()+60*e*1e3),this.toISOString().replace("Z",n)}},727:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function s(e){try{c(o.next(e))}catch(e){r(e)}}function l(e){try{c(o.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,l)}c((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.polClient=t.zshCompletionInit=t.isClientCommand=t.ClientCommand=void 0;const i=n(757),r=n(473),s=n(302),l=n(457),c=n(522);var a;!function(e){e.completion="completion",e.ps="ps",e.daemon="daemon",e.stop="stop",e.start="start",e.restart="restart"}(a||(t.ClientCommand=a={})),t.isClientCommand=e=>{if(Object.values(a).includes(e))return!0};let p=!1;t.zshCompletionInit=()=>{if(!p&&process.env.ZSH&&process.env.ZSH.endsWith(".oh-my-zsh")){p=!0;const e=`${process.env.ZSH}/custom/plugins/pol`;(0,l.cliSplitByLineSync)("mkdir","-p",`${e}`),(0,l.cliSplitByLineSync)("cp",`${__dirname}/../zsh-plugin/pol.plugin.zsh`,`${e}/pol.plugin.zsh`),(0,l.cliSplitByLineSync)("cp",`${__dirname}/../zsh-plugin/plugin.js`,`${e}/plugin.js`),r.log.log(`[${c.term.fc.green}  INFO  ${c.term.mc.resetAll}] .oh-my-zsh custom plugin installed. Please add 'pol' to enabled plugin list in '~/.zshrc' file.`)}},t.polClient=e=>o(void 0,void 0,void 0,(function*(){switch(e._[0]){case a.completion:"zsh"===e._[1]&&(0,t.zshCompletionInit)();break;case a.ps:case a.daemon:case a.stop:case a.start:case a.restart:(yield(0,s.clientCreate)()).write(JSON.stringify(e));break;default:(0,i.help)()}}))},509:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function s(e){try{c(o.next(e))}catch(e){r(e)}}function l(e){try{c(o.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,l)}c((o=o.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.polServer=t.isServerCommand=void 0;const r=i(n(358)),s=i(n(37)),l=n(757),c=n(685);n(238);const a=n(473),p=n(727),u=n(302),d=n(457),m=n(522),g="possible options: [--all|service_name.service]",f=process.env.POL_CONFIG_FOLDER?[process.env.POL_CONFIG_FOLDER]:["/etc/pol"];f.push(`${s.default.homedir()}/.config/pol`);const v=Object.assign({},process.env);var h;!function(e){e.boot="boot"}(h||(h={})),t.isServerCommand=e=>!!Object.values(p.ClientCommand).includes(e)||!!Object.values(h).includes(e)||void 0,t.polServer=e=>o(void 0,void 0,void 0,(function*(){var t,n,i,s,_,b,S;process.env.TZ=process.env.TZ?process.env.TZ:r.default.readFileSync("/etc/timezone").toString().split("\n")[0],(0,a.logFileInit)();const y=()=>o(void 0,void 0,void 0,(function*(){const e=yield(0,d.cliSplitByLine)("find",...f,"-name","*.service.js"),t=yield(0,d.cliSplitByLine)("readlink","-e",...f.map((e=>`${e}/login.service.target.js`))),n=yield(0,d.cliSplitByLine)("sh","-c",'ps aux | grep ".*node.*pol.*boot$"');c.pol.running=!(n.o.length<2),e.o.filter((e=>!e.includes("No such file or directory"))).map((e=>{var t,n;const o=null===(n=null===(t=null==e?void 0:e.split("/"))||void 0===t?void 0:t.pop())||void 0===n?void 0:n.replace(".js","");c.pol.init(o,e)}));const o=(yield(0,d.cliSplitByLine)("find","/proc","-maxdepth","2","-name","environ")).o.filter((e=>{try{return r.default.accessSync(e,r.default.constants.R_OK),!0}catch(e){return!1}}));for(const e of o)try{const t=r.default.readFileSync(e).toString();if(t.includes("__POL__")){const n=t.split("__POL_CL__")[1].split("__"),o=t.split("__POL__")[1].split("__");c.pol.setRunning(o[0]),c.pol.addProcess(o[0],e.split("/")[2],n[0])}}catch(e){}const i=require;for(const e of c.pol.getServices())i(e.path);t.o.forEach((e=>{var t,n;c.pol.setLoginService(null===(n=null===(t=null==e?void 0:e.split("/"))||void 0===t?void 0:t.pop())||void 0===n?void 0:n.replace(".js",""))}))})),w=(e,t)=>o(void 0,void 0,void 0,(function*(){if(!e)return;if(!c.pol.getServices().some((t=>t.name===e||"--all"===e)))return void t.write(g);const n=[];return new Promise((o=>{var i,r,s;for(const o of c.pol.getServices()){if("--all"!==e&&o.name!==e)continue;let l=()=>{};const p=c.pol.get(o.name);n.push(new Promise((e=>l=e))),c.pol.stateInit(o.name);try{if(c.pol.getAllRunning().some((e=>e.name===o.name))){t.write(`[${m.term.fc.yellow} WARN ${m.term.mc.resetAll}] ${o.name} is already running ...`),l();continue}(null===(i=p.setup)||void 0===i?void 0:i.onStart)?(process.env=Object.assign(Object.assign({},v),{POL:`__POL__${o.name}__${c.pol.getNanoSecTime()}__POL__`}),t.write(`[${m.term.fc.green}  OK  ${m.term.mc.resetAll}] start ${o.name} ...`),p.setup.onStart(p.setup.ssOnStart).then((()=>{c.pol.startRunChecker(o.name,"after","onStart","started",a.logFile)})),c.pol.startRunChecker(o.name,"before","onStart","started",t,l)):l()}catch(e){t.write(`[${m.term.fc.red}FAILED${m.term.mc.resetAll}] start ${o.name} ...`),t.write(`        ${e.stack}`),null===(s=null===(r=c.pol.get(o.name))||void 0===r?void 0:r.startResolver)||void 0===s||s.call(r)}}Promise.all(n).then((()=>{o(!0)}))}))})),$=(e,t,n)=>o(void 0,void 0,void 0,(function*(){if(!c.pol.getServices().some((t=>t.name===e||"--all"===e)))return void t.write(g);if(!c.pol.getAllRunning().some((t=>t.name===e))&&"--all"!==e)return void t.write(`[${m.term.fc.yellow} WARN ${m.term.mc.resetAll}] ${e} is already stopped ...`);const i=c.pol.getAllStopped().map((e=>({name:e.name})));if("--all"===e)for(const e of c.pol.getServices())c.pol.setStateDown(e.name);else c.pol.setStateDown(e);const r=[];return new Promise((s=>o(void 0,void 0,void 0,(function*(){var l;for(const i of c.pol.getAllRunning())if("--all"===e||e===i.name){let e=()=>{},s=()=>{},p=()=>{};const u=[new Promise((e=>s=e)),new Promise((e=>p=e))],g=e=>o(void 0,void 0,void 0,(function*(){var o,i;const r=[...Object.values(e.cli.before_onStart).map((e=>e.promise)),...Object.values(e.cli.after_onStart).map((e=>e.promise)),...Object.values(e.cli.before_onLogin).map((e=>e.promise)),...Object.values(e.cli.after_onLogin).map((e=>e.promise)),null===(o=e.exec.onStart)||void 0===o?void 0:o.promise,null===(i=e.exec.onLogin)||void 0===i?void 0:i.promise];let s="";c.pol.stopRunChecker(e.name,"Start");for(const o of e.processes){let i=a.TASK_INDENT;s!==e.name&&(s=e.name,i=`[${m.term.fc.green} STOP ${m.term.mc.resetAll}]`);const r=n?["kill","-9",o.procId]:["kill",o.procId],{c:l}=yield(0,d.cliSplitByLine)(...r);0==l&&t.write(`${i} ${e.name} service with proc/pid[${o.procName}/${o.procId}] ...`)}yield Promise.all(r)}));r.push(new Promise((t=>e=t)));try{(null===(l=i.setup)||void 0===l?void 0:l.onStop)?(i.setup.ssOnStop.stopAll=()=>o(void 0,void 0,void 0,(function*(){yield g(i),c.pol.setStateStop(i.name),c.pol.startRunChecker(i.name,"after","onStop","stopped",t,p)})),i.setup.onStop(i.setup.ssOnStop),c.pol.startRunChecker(i.name,"before","onStop","stopped",t,s)):(yield g(i),s(),p()),Promise.all(u).then((()=>{e(),setTimeout((()=>{c.pol.setStateReady(i.name)}))}))}catch(n){t.write(`[${m.term.fc.red}FAILED${m.term.mc.resetAll}] stop ${i.name} ...`),e()}}if("--all"===e)for(const e of i)t.write(`[${m.term.fc.yellow} WARN ${m.term.mc.resetAll}] ${e.name} is already stopped ...`);Promise.all(r).then((()=>{s()}))}))))}));let O=!0;if(process.on("SIGINT",(()=>o(void 0,void 0,void 0,(function*(){O&&(O=!1,yield y(),yield $("--all",a.log),(0,u.serverCleanup)())})))),e._[0]===h.boot){if(yield y(),c.pol.running&&(a.log.log("Another pol daemon is running!"),process.exit(1)),yield(0,u.serverCreate)(((e,t)=>o(void 0,void 0,void 0,(function*(){switch(e._[0]){case p.ClientCommand.daemon:if(!e._.length||e._.length<2)t.write(g),t.end();else if("shutdown"===e._[1]){const e={err:()=>{},warn:()=>{},log:()=>{},write:e=>{a.log.write(e),t.write(e)},end:()=>{}};yield y(),yield $("--all",e),t.end(),(0,u.serverCleanup)()}break;case p.ClientCommand.stop:!e._.length||e._.length<2&&!e.all?(t.write(g),t.end()):(yield y(),yield $(e._[1]?e._[1]:e.all?"--all":null,t,e.force),t.end());break;case p.ClientCommand.start:!e._.length||e._.length<2&&!e.all?(t.write(g),t.end()):(yield y(),yield w(e._[1]?e._[1]:e.all?"--all":null,t),t.end());break;case p.ClientCommand.restart:!e._.length||e._.length<2&&!e.all?(t.write(g),t.end()):(yield y(),yield $(e._[1]?e._[1]:e.all?"--all":null,t,e.force),setTimeout((()=>o(void 0,void 0,void 0,(function*(){yield w(e._[1]?e._[1]:e.all?"--all":null,t),t.end()})))));break;case p.ClientCommand.ps:yield y();let n="";for(const e of c.pol.getAllRunning())for(const o of e.processes){let i=a.TASK_INDENT;n!==e.name&&(n=e.name,i=`[${m.term.fc.green} RUN ${m.term.mc.resetAll}] `),t.write(`${i}  ${e.name} service with proc/pid[${o.procName}/${o.procId}] ...\n`)}if(e.all)for(const e of c.pol.getAllStopped())t.write(`[${m.term.fc.yellow} STOP ${m.term.mc.resetAll}] ${e.name} service ...`);t.end()}})))),yield w("--all",a.log),c.pol.getLoginService()){const e=()=>o(void 0,void 0,void 0,(function*(){yield y(),yield $("--all",a.log),(0,u.serverCleanup)()}));c.pol.isStateAfterDown(null===(t=c.pol.getLoginService())||void 0===t?void 0:t.name)?yield e():(process.env=Object.assign(Object.assign({},v),{POL:`__POL__${null===(n=c.pol.getLoginService())||void 0===n?void 0:n.name}__${c.pol.getNanoSecTime()}__POL__`}),null===(_=null===(s=null===(i=c.pol.getLoginService())||void 0===i?void 0:i.setup)||void 0===s?void 0:s.onLogin)||void 0===_||_.call(s,null===(S=null===(b=c.pol.getLoginService())||void 0===b?void 0:b.setup)||void 0===S?void 0:S.ssOnLogin).then((()=>o(void 0,void 0,void 0,(function*(){var t,n,i,r,s;(null===(t=c.pol.getLoginService())||void 0===t?void 0:t.exec.onLogin)?null===(s=null===(r=null===(i=null===(n=c.pol.getLoginService())||void 0===n?void 0:n.exec)||void 0===i?void 0:i.onLogin)||void 0===r?void 0:r.promise)||void 0===s||s.then((()=>o(void 0,void 0,void 0,(function*(){yield e()})))):yield e()})))))}}else(0,l.help)()}))},302:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function s(e){try{c(o.next(e))}catch(e){r(e)}}function l(e){try{c(o.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,l)}c((o=o.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.clientCreate=t.clientCleanup=t.serverCreate=t.serverCleanup=void 0;const r=i(n(358)),s=i(n(808)),l=n(473),c={},a=e=>{(0,l.msgToLog)(e,"pol   ")};var p,u,d=!1;const m="/tmp/pol.sock";t.serverCleanup=()=>{if(!d&&p){if(d=!0,a("Socket server: terminating"),Object.keys(c).length){let e=Object.keys(c);for(;e.length;){let t=e.pop();c[t].end()}}p.close()}},t.serverCreate=(e=((e,t)=>o(void 0,void 0,void 0,(function*(){}))))=>o(void 0,void 0,void 0,(function*(){return a("Socket server: checking for leftover socket"),r.default.existsSync(m)?(a("Socket server: removing leftover socket."),r.default.unlinkSync(m)):a("Socket server: no leftover socket found."),process.on("exit",t.serverCleanup),function(e,t=((e,t)=>o(this,void 0,void 0,(function*(){})))){let n;return a("Socket server: creating"),new Promise((i=>{p=s.default.createServer((function(e){a("Socket server: connection acknowledged");var n=Date.now().toString();c[n]=e,e.on("end",(function(){a("Socket server: client disconnected"),delete c[n]})),e.on("data",(e=>o(this,void 0,void 0,(function*(){const o=JSON.parse(e.toString());t(o,c[n])})))),e.on("error",(e=>o(this,void 0,void 0,(function*(){delete c[n]}))))})).listen(e,(()=>{r.default.chmodSync(e,"777")})).on("connection",(function(e){a("Socket server: client connected"),n=e})),i()}))}(m,e)})),t.clientCleanup=()=>{!d&&u&&(d=!0,u.end())},t.clientCreate=()=>(process.on("exit",t.clientCleanup),new Promise((e=>{u=s.default.createConnection(m).on("connect",(()=>{e(u)})).on("data",(function(e){const t=e.toString();l.log.log(t)})).on("error",(function(e){l.log.log("pol daemon not running. run `pol boot` first!",e),process.exit(1)})).on("close",(function(e){}))})))},457:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.cliSplitByLine=t.cliSplitByLineSync=void 0;const o=n(81);t.cliSplitByLineSync=function(...e){const t=[...arguments],n=(0,o.spawnSync)(t.shift(),[...t]);return{o:n.stdout.toString().split("\n").filter((e=>e)),c:n.status}},t.cliSplitByLine=function(...e){const t=[...arguments],n=(0,o.spawn)(t.shift(),[...t]);return new Promise((e=>{let t="";n.stdout.on("data",(e=>{t+=e})),n.stderr.on("data",(e=>{t+=e})),n.on("close",(n=>{const o=t.split("\n").filter((e=>e));e({o,c:n})}))}))}},522:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.term=void 0;const n={stdout:process.stdout,print:function(e=""){return n.stdout.write(e),n},bold:function(e,t=""){return n.print(n.mc.bold+t+e+n.mc.resetAll)},italic:function(e,t=""){return n.print(n.mc.italic+t+e+n.mc.resetAll)},underline:function(e,t=""){return n.print(n.mc.underline+t+e+n.mc.resetAll)},inverse:function(e,t=""){return n.print(n.mc.inverse+t+e+n.mc.resetAll)},strike:function(e,t=""){return n.print(n.mc.strike+t+e+n.mc.resetAll)},defaultColor:function(e){return n.print(n.fc.defaultColor+e+n.mc.resetAll)},black:function(e){return n.print(n.fc.black+e+n.mc.resetAll)},red:function(e){return n.print(n.fc.red+e+n.mc.resetAll)},green:function(e){return n.print(n.fc.green+e+n.mc.resetAll)},yellow:function(e){return n.print(n.fc.yellow+e+n.mc.resetAll)},blue:function(e){return n.print(n.fc.blue+e+n.mc.resetAll)},magenta:function(e){return n.print(n.fc.magenta+e+n.mc.resetAll)},cyan:function(e){return n.print(n.fc.cyan+e+n.mc.resetAll)},white:function(e){return n.print(n.fc.white+e+n.mc.resetAll)},brightBlack:function(e){return n.print(n.fc.brightBlack+e+n.mc.resetAll)},brightRed:function(e){return n.print(n.fc.brightRed+e+n.mc.resetAll)},brightGreen:function(e){return n.print(n.fc.brightGreen+e+n.mc.resetAll)},brightYellow:function(e){return n.print(n.fc.brightYellow+e+n.mc.resetAll)},brightBlue:function(e){return n.print(n.fc.brightBlue+e+n.mc.resetAll)},brightMagenta:function(e){return n.print(n.fc.brightMagenta+e+n.mc.resetAll)},brightCyan:function(e){return n.print(n.fc.brightCyan+e+n.mc.resetAll)},brightWhite:function(e){return n.print(n.fc.brightWhite+e+n.mc.resetAll)},customColor:function(e,t){const o=isNaN(e)?e:`[38;5;${e}m`;return n.print(o+t+n.mc.resetAll)},bgDefaultColor:function(e,t=""){return n.print(n.fc.brightWhite+t+e+n.mc.resetAll)},bgBlack:function(e,t=""){return n.print(n.bc.black+t+e+n.mc.resetAll)},bgRed:function(e,t=""){return n.print(n.bc.red+t+e+n.mc.resetAll)},bgGreen:function(e,t=""){return n.print(n.bc.green+t+e+n.mc.resetAll)},bgYellow:function(e,t=""){return n.print(n.bc.yellow+t+e+n.mc.resetAll)},bgBlue:function(e,t=""){return n.print(n.bc.blue+t+e+n.mc.resetAll)},bgMagenta:function(e,t=""){return n.print(n.bc.magenta+t+e+n.mc.resetAll)},bgCyan:function(e,t=""){return n.print(n.bc.cyan+t+e+n.mc.resetAll)},bgWhite:function(e,t=""){return n.print(n.bc.white+t+e+n.mc.resetAll)},bgBrightBlack:function(e,t=""){return n.print(n.bc.brightBlack+t+e+n.mc.resetAll)},bgBrightRed:function(e,t=""){return n.print(n.bc.brightRed+t+e+n.mc.resetAll)},bgBrightGreen:function(e,t=""){return n.print(n.bc.brightGreen+t+e+n.mc.resetAll)},bgBrightYellow:function(e,t=""){return n.print(n.bc.brightYellow+t+e+n.mc.resetAll)},bgBrightBlue:function(e,t=""){return n.print(n.bc.brightBlue+t+e+n.mc.resetAll)},bgBrightMagenta:function(e,t=""){return n.print(n.bc.brightMagenta+t+e+n.mc.resetAll)},bgBrightCyan:function(e,t=""){return n.print(n.bc.brightCyan+t+e+n.mc.resetAll)},bgBrightWhite:function(e,t=""){return n.print(n.bc.brightWhite+t+e+n.mc.resetAll)},customBgColor:function(e,t,o=""){const i=isNaN(e)?e.toString():`[48;5;${e}m`,r=isNaN(e)?e.toString():`[38;5;${e}m`;return n.print(i+r+t+n.mc.resetAll)},mc:{resetAll:"[0m[39m[49m",clearLineCursorRight:"[K",clearLine:"[2K",styleReset:"[0m",bold:"[1m",italic:"[3m",underline:"[4m",inverse:"[7m",strike:"[9m",cursorHide:"[?25l",cursorShow:"[?25h"},fc:{defaultColor:"[39m",black:"[30m",red:"[31m",green:"[32m",yellow:"[33m",blue:"[34m",magenta:"[35m",cyan:"[36m",white:"[37m",brightBlack:"[90m",brightRed:"[91m",brightGreen:"[92m",brightYellow:"[93m",brightBlue:"[94m",brightMagenta:"[95m",brightCyan:"[96m",brightWhite:"[97m",customColor:function(e){return`[38;5;${e}m`}},bc:{defaultColor:"[49m",black:"[40m",red:"[41m",green:"[42m",yellow:"[43m",blue:"[44m",magenta:"[45m",cyan:"[46m",white:"[47m",brightBlack:"[100m",brightRed:"[101m",brightGreen:"[102m",brightYellow:"[103m",brightBlue:"[104m",brightMagenta:"[105m",brightCyan:"[106m",brightWhite:"[107m",customBgColor:function(e){return`[48;5;${e}m`}}};t.term=n},45:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.printUsage=void 0;const o=n(522),i="    ",r="\n",s=(e="")=>void 0!==e&&e.length?e:void 0,l=(e,t=[],n)=>{t.length&&s(t[0].name)&&(o.term.print(o.term.mc.bold+r+e),t.forEach((e=>{o.term.print(o.term.mc.resetAll),n&&o.term.print(o.term.fc.brightWhite+o.term.mc.bold),o.term.print(`${i+e.name}`);const t=s(e.desc);t&&(o.term.print(o.term.mc.resetAll).print("\n"),o.term.print(`${i}${i}${t}`)),o.term.print(o.term.mc.resetAll).print("\n")})))};t.printUsage=(e={name:"",usage:[{name:"",desc:""}],options:[{switch:"",desc:"",type:""}],commands:[{switch:"",desc:""}],copyright:"copyright@2020",version:"0.0.1"})=>{if(l("NAME\n",[{name:e.name}]),l("USAGE\n",e.usage,!0),e.options&&e.options.length){let t=!1;e.options.forEach((e=>{e.switch.length&&(t||(t=!0,o.term.print(o.term.mc.bold+r+"OPTIONS\n"+o.term.mc.resetAll)),o.term.print(`${o.term.fc.brightWhite+o.term.mc.bold}${i+e.switch}\n`),o.term.print(`${o.term.mc.resetAll}${i}${i}${e.desc}`),e.type&&o.term.print(`${o.term.fc.cyan} [${e.type}]`),o.term.print("\n"))}))}if(e.commands&&e.commands.length){let t=!1;e.commands.forEach((e=>{e.switch.length&&(t||(t=!0,o.term.print(o.term.mc.bold+r+"COMMANDS\n"+o.term.mc.resetAll)),o.term.print(`${o.term.fc.brightWhite+o.term.mc.bold}${i+e.switch}\n`),o.term.print(`${o.term.mc.resetAll}${i}${i}${e.desc}`),o.term.print("\n"))}))}o.term.print(r),(e.version&&e.version.length||e.copyright&&e.copyright.length)&&o.term.print("== "),e.version&&e.version.length&&o.term.print(`v${e.version}`),e.copyright&&e.copyright.length&&(e.version&&e.version.length&&o.term.print(" - "),o.term.print(e.copyright)),(e.version&&e.version.length||e.copyright&&e.copyright.length)&&o.term.print(" ==\n\n")}},81:e=>{e.exports=require("child_process")},358:e=>{e.exports=require("fs")},808:e=>{e.exports=require("net")},37:e=>{e.exports=require("os")},147:e=>{e.exports=JSON.parse('{"name":"process-list-manager","version":"1.2.4","description":"Nodejs based init system called process list manager - pol","bin":{"pol":"./bin/pol.js","pol_init":"./wrapper/init.py"},"scripts":{"build":"webpack --mode production","test":"echo test missing!"},"author":"ui3o.com","license":"ISC","dependencies":{"minimist":"^1.2.8"},"devDependencies":{"@types/minimist":"^1.2.3","@types/node":"^20.7.0","ts-loader":"^9.4.4","ts-node":"^10.9.1","typescript":"^5.2.2","webpack":"^5.88.2","webpack-cli":"^5.1.4","webpack-shebang-plugin":"^1.1.8"}}')}},t={};!function n(o){var i=t[o];if(void 0!==i)return i.exports;var r=t[o]={exports:{}};return e[o].call(r.exports,r,r.exports,n),r.exports}(757)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVEsZ0IsVUNBekJyWixFQUFPQyxRQUFVb1osUUFBUSxLLFVDQXpCclosRUFBT0MsUUFBVW9aLFFBQVEsTSxTQ0F6QnJaLEVBQU9DLFFBQVVvWixRQUFRLEsscWtCQ0NyQkMsRUFBMkIsQ0FBQyxHQUdoQyxTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCdlgsSUFBakJ3WCxFQUNILE9BQU9BLEVBQWF4WixRQUdyQixJQUFJRCxFQUFTc1osRUFBeUJFLEdBQVksQ0FHakR2WixRQUFTLENBQUMsR0FPWCxPQUhBeVosRUFBb0JGLEdBQVVHLEtBQUszWixFQUFPQyxRQUFTRCxFQUFRQSxFQUFPQyxRQUFTc1osR0FHcEV2WixFQUFPQyxPQUNmLENDbkIwQnNaLENBQW9CLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9jZXNzLWxpc3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9taW5pbWlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcm9jZXNzLWxpc3QtbWFuYWdlci8uL2VudHJ5L3BvbC50cyIsIndlYnBhY2s6Ly9wcm9jZXNzLWxpc3QtbWFuYWdlci8uL3NyYy9kYWVtb24udHMiLCJ3ZWJwYWNrOi8vcHJvY2Vzcy1saXN0LW1hbmFnZXIvLi9zcmMvZ2xvYmFsLnRzIiwid2VicGFjazovL3Byb2Nlc3MtbGlzdC1tYW5hZ2VyLy4vc3JjL2xvZ2dlci50cyIsIndlYnBhY2s6Ly9wcm9jZXNzLWxpc3QtbWFuYWdlci8uL3NyYy9wb2wuY2xpZW50LnRzIiwid2VicGFjazovL3Byb2Nlc3MtbGlzdC1tYW5hZ2VyLy4vc3JjL3BvbC5zZXJ2ZXIudHMiLCJ3ZWJwYWNrOi8vcHJvY2Vzcy1saXN0LW1hbmFnZXIvLi9zcmMvc29ja2V0LnRzIiwid2VicGFjazovL3Byb2Nlc3MtbGlzdC1tYW5hZ2VyLy4vc3JjL3NwYXduLnRzIiwid2VicGFjazovL3Byb2Nlc3MtbGlzdC1tYW5hZ2VyLy4vc3JjL3Rlcm0udHMiLCJ3ZWJwYWNrOi8vcHJvY2Vzcy1saXN0LW1hbmFnZXIvLi9zcmMvdXNhZ2UudHMiLCJ3ZWJwYWNrOi8vcHJvY2Vzcy1saXN0LW1hbmFnZXIvZXh0ZXJuYWwgbm9kZS1jb21tb25qcyBcImNoaWxkX3Byb2Nlc3NcIiIsIndlYnBhY2s6Ly9wcm9jZXNzLWxpc3QtbWFuYWdlci9leHRlcm5hbCBub2RlLWNvbW1vbmpzIFwiZnNcIiIsIndlYnBhY2s6Ly9wcm9jZXNzLWxpc3QtbWFuYWdlci9leHRlcm5hbCBub2RlLWNvbW1vbmpzIFwibmV0XCIiLCJ3ZWJwYWNrOi8vcHJvY2Vzcy1saXN0LW1hbmFnZXIvZXh0ZXJuYWwgbm9kZS1jb21tb25qcyBcIm9zXCIiLCJ3ZWJwYWNrOi8vcHJvY2Vzcy1saXN0LW1hbmFnZXIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcHJvY2Vzcy1saXN0LW1hbmFnZXIvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gaGFzS2V5KG9iaiwga2V5cykge1xuXHR2YXIgbyA9IG9iajtcblx0a2V5cy5zbGljZSgwLCAtMSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0byA9IG9ba2V5XSB8fCB7fTtcblx0fSk7XG5cblx0dmFyIGtleSA9IGtleXNba2V5cy5sZW5ndGggLSAxXTtcblx0cmV0dXJuIGtleSBpbiBvO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcih4KSB7XG5cdGlmICh0eXBlb2YgeCA9PT0gJ251bWJlcicpIHsgcmV0dXJuIHRydWU7IH1cblx0aWYgKCgvXjB4WzAtOWEtZl0rJC9pKS50ZXN0KHgpKSB7IHJldHVybiB0cnVlOyB9XG5cdHJldHVybiAoL15bLStdPyg/OlxcZCsoPzpcXC5cXGQqKT98XFwuXFxkKykoZVstK10/XFxkKyk/JC8pLnRlc3QoeCk7XG59XG5cbmZ1bmN0aW9uIGlzQ29uc3RydWN0b3JPclByb3RvKG9iaiwga2V5KSB7XG5cdHJldHVybiAoa2V5ID09PSAnY29uc3RydWN0b3InICYmIHR5cGVvZiBvYmpba2V5XSA9PT0gJ2Z1bmN0aW9uJykgfHwga2V5ID09PSAnX19wcm90b19fJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJncywgb3B0cykge1xuXHRpZiAoIW9wdHMpIHsgb3B0cyA9IHt9OyB9XG5cblx0dmFyIGZsYWdzID0ge1xuXHRcdGJvb2xzOiB7fSxcblx0XHRzdHJpbmdzOiB7fSxcblx0XHR1bmtub3duRm46IG51bGwsXG5cdH07XG5cblx0aWYgKHR5cGVvZiBvcHRzLnVua25vd24gPT09ICdmdW5jdGlvbicpIHtcblx0XHRmbGFncy51bmtub3duRm4gPSBvcHRzLnVua25vd247XG5cdH1cblxuXHRpZiAodHlwZW9mIG9wdHMuYm9vbGVhbiA9PT0gJ2Jvb2xlYW4nICYmIG9wdHMuYm9vbGVhbikge1xuXHRcdGZsYWdzLmFsbEJvb2xzID0gdHJ1ZTtcblx0fSBlbHNlIHtcblx0XHRbXS5jb25jYXQob3B0cy5ib29sZWFuKS5maWx0ZXIoQm9vbGVhbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRmbGFncy5ib29sc1trZXldID0gdHJ1ZTtcblx0XHR9KTtcblx0fVxuXG5cdHZhciBhbGlhc2VzID0ge307XG5cblx0ZnVuY3Rpb24gYWxpYXNJc0Jvb2xlYW4oa2V5KSB7XG5cdFx0cmV0dXJuIGFsaWFzZXNba2V5XS5zb21lKGZ1bmN0aW9uICh4KSB7XG5cdFx0XHRyZXR1cm4gZmxhZ3MuYm9vbHNbeF07XG5cdFx0fSk7XG5cdH1cblxuXHRPYmplY3Qua2V5cyhvcHRzLmFsaWFzIHx8IHt9KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRhbGlhc2VzW2tleV0gPSBbXS5jb25jYXQob3B0cy5hbGlhc1trZXldKTtcblx0XHRhbGlhc2VzW2tleV0uZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuXHRcdFx0YWxpYXNlc1t4XSA9IFtrZXldLmNvbmNhdChhbGlhc2VzW2tleV0uZmlsdGVyKGZ1bmN0aW9uICh5KSB7XG5cdFx0XHRcdHJldHVybiB4ICE9PSB5O1xuXHRcdFx0fSkpO1xuXHRcdH0pO1xuXHR9KTtcblxuXHRbXS5jb25jYXQob3B0cy5zdHJpbmcpLmZpbHRlcihCb29sZWFuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRmbGFncy5zdHJpbmdzW2tleV0gPSB0cnVlO1xuXHRcdGlmIChhbGlhc2VzW2tleV0pIHtcblx0XHRcdFtdLmNvbmNhdChhbGlhc2VzW2tleV0pLmZvckVhY2goZnVuY3Rpb24gKGspIHtcblx0XHRcdFx0ZmxhZ3Muc3RyaW5nc1trXSA9IHRydWU7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xuXG5cdHZhciBkZWZhdWx0cyA9IG9wdHMuZGVmYXVsdCB8fCB7fTtcblxuXHR2YXIgYXJndiA9IHsgXzogW10gfTtcblxuXHRmdW5jdGlvbiBhcmdEZWZpbmVkKGtleSwgYXJnKSB7XG5cdFx0cmV0dXJuIChmbGFncy5hbGxCb29scyAmJiAoL14tLVtePV0rJC8pLnRlc3QoYXJnKSlcblx0XHRcdHx8IGZsYWdzLnN0cmluZ3Nba2V5XVxuXHRcdFx0fHwgZmxhZ3MuYm9vbHNba2V5XVxuXHRcdFx0fHwgYWxpYXNlc1trZXldO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2V0S2V5KG9iaiwga2V5cywgdmFsdWUpIHtcblx0XHR2YXIgbyA9IG9iajtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoIC0gMTsgaSsrKSB7XG5cdFx0XHR2YXIga2V5ID0ga2V5c1tpXTtcblx0XHRcdGlmIChpc0NvbnN0cnVjdG9yT3JQcm90byhvLCBrZXkpKSB7IHJldHVybjsgfVxuXHRcdFx0aWYgKG9ba2V5XSA9PT0gdW5kZWZpbmVkKSB7IG9ba2V5XSA9IHt9OyB9XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG9ba2V5XSA9PT0gT2JqZWN0LnByb3RvdHlwZVxuXHRcdFx0XHR8fCBvW2tleV0gPT09IE51bWJlci5wcm90b3R5cGVcblx0XHRcdFx0fHwgb1trZXldID09PSBTdHJpbmcucHJvdG90eXBlXG5cdFx0XHQpIHtcblx0XHRcdFx0b1trZXldID0ge307XG5cdFx0XHR9XG5cdFx0XHRpZiAob1trZXldID09PSBBcnJheS5wcm90b3R5cGUpIHsgb1trZXldID0gW107IH1cblx0XHRcdG8gPSBvW2tleV07XG5cdFx0fVxuXG5cdFx0dmFyIGxhc3RLZXkgPSBrZXlzW2tleXMubGVuZ3RoIC0gMV07XG5cdFx0aWYgKGlzQ29uc3RydWN0b3JPclByb3RvKG8sIGxhc3RLZXkpKSB7IHJldHVybjsgfVxuXHRcdGlmIChcblx0XHRcdG8gPT09IE9iamVjdC5wcm90b3R5cGVcblx0XHRcdHx8IG8gPT09IE51bWJlci5wcm90b3R5cGVcblx0XHRcdHx8IG8gPT09IFN0cmluZy5wcm90b3R5cGVcblx0XHQpIHtcblx0XHRcdG8gPSB7fTtcblx0XHR9XG5cdFx0aWYgKG8gPT09IEFycmF5LnByb3RvdHlwZSkgeyBvID0gW107IH1cblx0XHRpZiAob1tsYXN0S2V5XSA9PT0gdW5kZWZpbmVkIHx8IGZsYWdzLmJvb2xzW2xhc3RLZXldIHx8IHR5cGVvZiBvW2xhc3RLZXldID09PSAnYm9vbGVhbicpIHtcblx0XHRcdG9bbGFzdEtleV0gPSB2YWx1ZTtcblx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob1tsYXN0S2V5XSkpIHtcblx0XHRcdG9bbGFzdEtleV0ucHVzaCh2YWx1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9bbGFzdEtleV0gPSBbb1tsYXN0S2V5XSwgdmFsdWVdO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIHNldEFyZyhrZXksIHZhbCwgYXJnKSB7XG5cdFx0aWYgKGFyZyAmJiBmbGFncy51bmtub3duRm4gJiYgIWFyZ0RlZmluZWQoa2V5LCBhcmcpKSB7XG5cdFx0XHRpZiAoZmxhZ3MudW5rbm93bkZuKGFyZykgPT09IGZhbHNlKSB7IHJldHVybjsgfVxuXHRcdH1cblxuXHRcdHZhciB2YWx1ZSA9ICFmbGFncy5zdHJpbmdzW2tleV0gJiYgaXNOdW1iZXIodmFsKVxuXHRcdFx0PyBOdW1iZXIodmFsKVxuXHRcdFx0OiB2YWw7XG5cdFx0c2V0S2V5KGFyZ3YsIGtleS5zcGxpdCgnLicpLCB2YWx1ZSk7XG5cblx0XHQoYWxpYXNlc1trZXldIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG5cdFx0XHRzZXRLZXkoYXJndiwgeC5zcGxpdCgnLicpLCB2YWx1ZSk7XG5cdFx0fSk7XG5cdH1cblxuXHRPYmplY3Qua2V5cyhmbGFncy5ib29scykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0c2V0QXJnKGtleSwgZGVmYXVsdHNba2V5XSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBkZWZhdWx0c1trZXldKTtcblx0fSk7XG5cblx0dmFyIG5vdEZsYWdzID0gW107XG5cblx0aWYgKGFyZ3MuaW5kZXhPZignLS0nKSAhPT0gLTEpIHtcblx0XHRub3RGbGFncyA9IGFyZ3Muc2xpY2UoYXJncy5pbmRleE9mKCctLScpICsgMSk7XG5cdFx0YXJncyA9IGFyZ3Muc2xpY2UoMCwgYXJncy5pbmRleE9mKCctLScpKTtcblx0fVxuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBhcmcgPSBhcmdzW2ldO1xuXHRcdHZhciBrZXk7XG5cdFx0dmFyIG5leHQ7XG5cblx0XHRpZiAoKC9eLS0uKz0vKS50ZXN0KGFyZykpIHtcblx0XHRcdC8vIFVzaW5nIFtcXHNcXFNdIGluc3RlYWQgb2YgLiBiZWNhdXNlIGpzIGRvZXNuJ3Qgc3VwcG9ydCB0aGVcblx0XHRcdC8vICdkb3RhbGwnIHJlZ2V4IG1vZGlmaWVyLiBTZWU6XG5cdFx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMDY4MzA4LzEzMjE2XG5cdFx0XHR2YXIgbSA9IGFyZy5tYXRjaCgvXi0tKFtePV0rKT0oW1xcc1xcU10qKSQvKTtcblx0XHRcdGtleSA9IG1bMV07XG5cdFx0XHR2YXIgdmFsdWUgPSBtWzJdO1xuXHRcdFx0aWYgKGZsYWdzLmJvb2xzW2tleV0pIHtcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZSAhPT0gJ2ZhbHNlJztcblx0XHRcdH1cblx0XHRcdHNldEFyZyhrZXksIHZhbHVlLCBhcmcpO1xuXHRcdH0gZWxzZSBpZiAoKC9eLS1uby0uKy8pLnRlc3QoYXJnKSkge1xuXHRcdFx0a2V5ID0gYXJnLm1hdGNoKC9eLS1uby0oLispLylbMV07XG5cdFx0XHRzZXRBcmcoa2V5LCBmYWxzZSwgYXJnKTtcblx0XHR9IGVsc2UgaWYgKCgvXi0tLisvKS50ZXN0KGFyZykpIHtcblx0XHRcdGtleSA9IGFyZy5tYXRjaCgvXi0tKC4rKS8pWzFdO1xuXHRcdFx0bmV4dCA9IGFyZ3NbaSArIDFdO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXh0ICE9PSB1bmRlZmluZWRcblx0XHRcdFx0JiYgISgvXigtfC0tKVteLV0vKS50ZXN0KG5leHQpXG5cdFx0XHRcdCYmICFmbGFncy5ib29sc1trZXldXG5cdFx0XHRcdCYmICFmbGFncy5hbGxCb29sc1xuXHRcdFx0XHQmJiAoYWxpYXNlc1trZXldID8gIWFsaWFzSXNCb29sZWFuKGtleSkgOiB0cnVlKVxuXHRcdFx0KSB7XG5cdFx0XHRcdHNldEFyZyhrZXksIG5leHQsIGFyZyk7XG5cdFx0XHRcdGkgKz0gMTtcblx0XHRcdH0gZWxzZSBpZiAoKC9eKHRydWV8ZmFsc2UpJC8pLnRlc3QobmV4dCkpIHtcblx0XHRcdFx0c2V0QXJnKGtleSwgbmV4dCA9PT0gJ3RydWUnLCBhcmcpO1xuXHRcdFx0XHRpICs9IDE7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZXRBcmcoa2V5LCBmbGFncy5zdHJpbmdzW2tleV0gPyAnJyA6IHRydWUsIGFyZyk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICgoL14tW14tXSsvKS50ZXN0KGFyZykpIHtcblx0XHRcdHZhciBsZXR0ZXJzID0gYXJnLnNsaWNlKDEsIC0xKS5zcGxpdCgnJyk7XG5cblx0XHRcdHZhciBicm9rZW4gPSBmYWxzZTtcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgbGV0dGVycy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRuZXh0ID0gYXJnLnNsaWNlKGogKyAyKTtcblxuXHRcdFx0XHRpZiAobmV4dCA9PT0gJy0nKSB7XG5cdFx0XHRcdFx0c2V0QXJnKGxldHRlcnNbal0sIG5leHQsIGFyZyk7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoKC9bQS1aYS16XS8pLnRlc3QobGV0dGVyc1tqXSkgJiYgbmV4dFswXSA9PT0gJz0nKSB7XG5cdFx0XHRcdFx0c2V0QXJnKGxldHRlcnNbal0sIG5leHQuc2xpY2UoMSksIGFyZyk7XG5cdFx0XHRcdFx0YnJva2VuID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHQoL1tBLVphLXpdLykudGVzdChsZXR0ZXJzW2pdKVxuXHRcdFx0XHRcdCYmICgvLT9cXGQrKFxcLlxcZCopPyhlLT9cXGQrKT8kLykudGVzdChuZXh0KVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRzZXRBcmcobGV0dGVyc1tqXSwgbmV4dCwgYXJnKTtcblx0XHRcdFx0XHRicm9rZW4gPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGxldHRlcnNbaiArIDFdICYmIGxldHRlcnNbaiArIDFdLm1hdGNoKC9cXFcvKSkge1xuXHRcdFx0XHRcdHNldEFyZyhsZXR0ZXJzW2pdLCBhcmcuc2xpY2UoaiArIDIpLCBhcmcpO1xuXHRcdFx0XHRcdGJyb2tlbiA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2V0QXJnKGxldHRlcnNbal0sIGZsYWdzLnN0cmluZ3NbbGV0dGVyc1tqXV0gPyAnJyA6IHRydWUsIGFyZyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0a2V5ID0gYXJnLnNsaWNlKC0xKVswXTtcblx0XHRcdGlmICghYnJva2VuICYmIGtleSAhPT0gJy0nKSB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRhcmdzW2kgKyAxXVxuXHRcdFx0XHRcdCYmICEoL14oLXwtLSlbXi1dLykudGVzdChhcmdzW2kgKyAxXSlcblx0XHRcdFx0XHQmJiAhZmxhZ3MuYm9vbHNba2V5XVxuXHRcdFx0XHRcdCYmIChhbGlhc2VzW2tleV0gPyAhYWxpYXNJc0Jvb2xlYW4oa2V5KSA6IHRydWUpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHNldEFyZyhrZXksIGFyZ3NbaSArIDFdLCBhcmcpO1xuXHRcdFx0XHRcdGkgKz0gMTtcblx0XHRcdFx0fSBlbHNlIGlmIChhcmdzW2kgKyAxXSAmJiAoL14odHJ1ZXxmYWxzZSkkLykudGVzdChhcmdzW2kgKyAxXSkpIHtcblx0XHRcdFx0XHRzZXRBcmcoa2V5LCBhcmdzW2kgKyAxXSA9PT0gJ3RydWUnLCBhcmcpO1xuXHRcdFx0XHRcdGkgKz0gMTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZXRBcmcoa2V5LCBmbGFncy5zdHJpbmdzW2tleV0gPyAnJyA6IHRydWUsIGFyZyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCFmbGFncy51bmtub3duRm4gfHwgZmxhZ3MudW5rbm93bkZuKGFyZykgIT09IGZhbHNlKSB7XG5cdFx0XHRcdGFyZ3YuXy5wdXNoKGZsYWdzLnN0cmluZ3MuXyB8fCAhaXNOdW1iZXIoYXJnKSA/IGFyZyA6IE51bWJlcihhcmcpKTtcblx0XHRcdH1cblx0XHRcdGlmIChvcHRzLnN0b3BFYXJseSkge1xuXHRcdFx0XHRhcmd2Ll8ucHVzaC5hcHBseShhcmd2Ll8sIGFyZ3Muc2xpY2UoaSArIDEpKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0T2JqZWN0LmtleXMoZGVmYXVsdHMpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcblx0XHRpZiAoIWhhc0tleShhcmd2LCBrLnNwbGl0KCcuJykpKSB7XG5cdFx0XHRzZXRLZXkoYXJndiwgay5zcGxpdCgnLicpLCBkZWZhdWx0c1trXSk7XG5cblx0XHRcdChhbGlhc2VzW2tdIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG5cdFx0XHRcdHNldEtleShhcmd2LCB4LnNwbGl0KCcuJyksIGRlZmF1bHRzW2tdKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSk7XG5cblx0aWYgKG9wdHNbJy0tJ10pIHtcblx0XHRhcmd2WyctLSddID0gbm90RmxhZ3Muc2xpY2UoKTtcblx0fSBlbHNlIHtcblx0XHRub3RGbGFncy5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG5cdFx0XHRhcmd2Ll8ucHVzaChrKTtcblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiBhcmd2O1xufTtcbiIsIlwidXNlIHN0cmljdFwiXG5pbXBvcnQgbWluaW1pc3QgZnJvbSAnbWluaW1pc3QnO1xuaW1wb3J0IHBhY2thZ2VKc29uIGZyb20gXCIuLi9wYWNrYWdlLmpzb25cIjtcbmltcG9ydCB7IGlzU2VydmVyQ29tbWFuZCwgcG9sU2VydmVyIH0gZnJvbSBcIi4uL3NyYy9wb2wuc2VydmVyXCI7XG5pbXBvcnQgeyBwcmludFVzYWdlIH0gZnJvbSBcIi4uL3NyYy91c2FnZVwiO1xuaW1wb3J0IHsgaXNDbGllbnRDb21tYW5kLCBwb2xDbGllbnQgfSBmcm9tICcuLi9zcmMvcG9sLmNsaWVudCc7XG5jb25zdCBhcmd2ID0gbWluaW1pc3QocHJvY2Vzcy5hcmd2LnNsaWNlKDIpKTtcblxuZXhwb3J0IGNvbnN0IGhlbHAgPSAoKSA9PiB7XG4gICAgcHJpbnRVc2FnZSh7XG4gICAgICAgIG5hbWU6ICdwb2wgLSBQcm9jZXNzIGxpc3QgbWFuYWdlci4nLFxuICAgICAgICB1c2FnZTogW1xuICAgICAgICAgICAgeyBuYW1lOiBgcG9sIFtvcHRpb25zXVtjb21tYW5kXWAsIGRlc2M6ICdQcm9jZXNzIGxpc3QgKHBvbCkgbWFuYWdlciBhY2NlcHRzIGNvbW1hbmQgYW5kIG9wdGlvbnMuJyB9XG4gICAgICAgIF0sXG4gICAgICAgIG9wdGlvbnM6IFtcbiAgICAgICAgICAgIHsgZGVzYzogJ3Nob3cgaGVscCcsIHN3aXRjaDogJy1oLCAtLWhlbHAnLCB0eXBlOiAnYm9vbGVhbicgfVxuICAgICAgICBdLFxuICAgICAgICBjb21tYW5kczogW1xuICAgICAgICAgICAgeyBkZXNjOiBcImJvb3QgaW5pdCBzeXN0ZW1cIiwgc3dpdGNoOiAnYm9vdCcgfSxcbiAgICAgICAgICAgIHsgZGVzYzogXCJzdGFydCBbc2VydmljZXwtLWFsbF1cIiwgc3dpdGNoOiAnc3RhcnQnIH0sXG4gICAgICAgICAgICB7IGRlc2M6IFwicmVzdGFydCBbc2VydmljZXwtLWFsbF1cIiwgc3dpdGNoOiAncmVzdGFydCcgfSxcbiAgICAgICAgICAgIHsgZGVzYzogXCJzdG9wIFtzZXJ2aWNlfC0tYWxsXVwiLCBzd2l0Y2g6ICdzdG9wJyB9LFxuICAgICAgICAgICAgeyBkZXNjOiBcImxpc3QgcnVubmluZyBbbm9uZXwtLWFsbF1cIiwgc3dpdGNoOiAncHMnIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHZlcnNpb246IHBhY2thZ2VKc29uLnZlcnNpb24sXG4gICAgICAgIGNvcHlyaWdodDogJ2NvcHlyaWdodEAyMDIzJ1xuICAgIH0pO1xuICAgIHByb2Nlc3MuZXhpdCgwKTtcbn1cbmlmIChhcmd2LmggfHwgYXJndi5oZWxwKSB7XG4gICAgaGVscCgpO1xufVxuXG5pZiAoaXNDbGllbnRDb21tYW5kKGFyZ3YuX1swXSkpIHtcbiAgICBwb2xDbGllbnQoYXJndik7XG59IGVsc2UgaWYgKGlzU2VydmVyQ29tbWFuZChhcmd2Ll9bMF0pKSB7XG4gICAgcG9sU2VydmVyKGFyZ3YpO1xufSBlbHNlIHtcbiAgICBoZWxwKCk7XG59XG4iLCJpbXBvcnQgbmV0IGZyb20gJ25ldCc7XG5pbXBvcnQgeyBtc2dUb0xvZyB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IHRlcm0gfSBmcm9tIFwiLi90ZXJtXCI7XG5cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBPTF9TRVRVUCB7XG4gICAgc2VydmljZU5hbWU/OiBzdHJpbmdcbiAgICBzc09uU3RhcnQ6IFBPTF9TRVRVUF9TVEFSVFxuICAgIHNzT25TdG9wOiBQT0xfU0VUVVBfU1RPUFxuICAgIHNzT25Mb2dpbjogUE9MX1NFVFVQX1NUQVJUXG4gICAgb25TdGFydD86IChzczogUE9MX1NFVFVQX1NUQVJUKSA9PiBQcm9taXNlPGFueT5cbiAgICBvblN0b3A/OiAoc3M6IFBPTF9TRVRVUF9TVE9QKSA9PiBQcm9taXNlPGFueT5cbiAgICBvbkxvZ2luPzogKHNzOiBQT0xfU0VUVVBfU1RBUlQpID0+IFByb21pc2U8YW55PlxufVxuXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQT0xfU0VUVVBfU1RBUlQge1xuICAgIGNsaTogUE9MX1NFVFVQX0NMSVxuICAgIGV4ZWM6IFBPTF9TRVRVUF9FWEVDXG4gICAgdG9Mb2c/OiAoc3RyOiBzdHJpbmcpID0+IGFueVxufVxuXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQT0xfU0VUVVBfU1RPUCB7XG4gICAgY2xpOiBQT0xfU0VUVVBfQ0xJXG4gICAgc3RvcEFsbD86ICgpID0+IFByb21pc2U8dm9pZD5cbiAgICB0b0xvZz86IChzdHI6IHN0cmluZykgPT4gYW55XG59XG5cbmV4cG9ydCB0eXBlIFBPTF9DTEJfTUVUSE9EID0gKHZhbHVlPzogdW5rbm93bikgPT4gdm9pZFxuXG5cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBPTF9MT0dHRVIge1xuICAgIHdyaXRlOiAoLi4uZGF0YTogYW55W10pID0+IGFueVxuICAgIGxvZzogKC4uLmRhdGE6IGFueVtdKSA9PiBhbnlcbiAgICB3YXJuOiAoLi4uZGF0YTogYW55W10pID0+IGFueVxuICAgIGVycjogKC4uLmRhdGE6IGFueVtdKSA9PiBhbnlcbiAgICBlbmQ6IFBPTF9DTEJfTUVUSE9EXG59XG5cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBPTF9TRVRVUF9DTEkge1xuICAgIG5vRXJyPzogUE9MX1NFVFVQX0NMSVxuICAgIHNwbGl0QnlMaW5lPzogUE9MX1NFVFVQX0NMSVxuICAgIHNwbGl0QWxsPzogUE9MX1NFVFVQX0NMSVxuICAgIHdkPzogKHdkOiBzdHJpbmcpID0+IFBPTF9TRVRVUF9DTElcbiAgICBnaWQ/OiAoZ2lkOiBzdHJpbmcpID0+IFBPTF9TRVRVUF9DTElcbiAgICB1aWQ/OiAodWlkOiBzdHJpbmcpID0+IFBPTF9TRVRVUF9DTElcbiAgICBlb2w/OiAoZW9sOiBzdHJpbmcpID0+IFBPTF9TRVRVUF9DTElcbiAgICBkbz86IFBPTF9DTEJfTUVUSE9EXG59XG5cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBPTF9TRVRVUF9FWEVDIHtcbiAgICBpdD86IFBPTF9TRVRVUF9FWEVDXG4gICAgd2Q/OiAod2Q6IHN0cmluZykgPT4gUE9MX1NFVFVQX0VYRUNcbiAgICB1aWQ/OiAodWlkOiBzdHJpbmcpID0+IFBPTF9TRVRVUF9FWEVDXG4gICAgZ2lkPzogKGdpZDogc3RyaW5nKSA9PiBQT0xfU0VUVVBfRVhFQ1xuICAgIGRvPzogUE9MX0NMQl9NRVRIT0Rcbn1cblxuZGVjbGFyZSBpbnRlcmZhY2UgU0VSVklDRVNfREVGIHtcbiAgICBbbmFtZTogc3RyaW5nXTogU0VSVklDRV9ERUZcbn1cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFNFUlZJQ0VfREVGIHtcbiAgICBuYW1lOiBzdHJpbmdcbiAgICBzZXR1cD86IFBPTF9TRVRVUFxuICAgIHBhdGg/OiBzdHJpbmdcbiAgICBydW5uaW5nPzogYm9vbGVhblxuICAgIHN0YXJ0ZWRBdD86IG51bWJlclxuICAgIHN0YXJ0UmVzb2x2ZXI/OiAoKSA9PiB2b2lkXG4gICAgLyoqXG4gICAgICogU0VSVklDRV9TVEFURV9SRUFEWSA9IDAgLS0gYmVmb3JlT25TdGFydFxuICAgICAqIFNFUlZJQ0VfU1RBVEVfVVAgPSAxIC0tIGFmdGVyT25TdGFydEV4ZWNcbiAgICAgKiBTRVJWSUNFX1NUQVRFX0RPV04gPSAyIC0tIGJlZm9yZU9uU3RvcFxuICAgICAqIFNFUlZJQ0VfU1RBVEVfU1RPUCA9IDMgLS0gYWZ0ZXJTdG9wQWxsXG4gICAgICovXG4gICAgc3RhdGU6IG51bWJlclxuICAgIHByb2Nlc3NlczogQXJyYXk8UlVOTklOR19QUk9DRVNTX0RFRj5cbiAgICBpbnRlcnZhbDoge1xuICAgICAgICBiZWZvcmVfb25TdGFydDogTm9kZUpTLlRpbWVvdXQgfCB2b2lkXG4gICAgICAgIGFmdGVyX29uU3RhcnQ6IE5vZGVKUy5UaW1lb3V0IHwgdm9pZFxuICAgICAgICBiZWZvcmVfb25TdG9wOiBOb2RlSlMuVGltZW91dCB8IHZvaWRcbiAgICAgICAgYWZ0ZXJfb25TdG9wOiBOb2RlSlMuVGltZW91dCB8IHZvaWRcbiAgICB9LFxuICAgIGNsaTogQ0xJX0RFRixcbiAgICBleGVjOiBFWEVDX0RFRlxufVxuXG5kZWNsYXJlIGludGVyZmFjZSBSVU5OSU5HX1BST0NFU1NfREVGIHtcbiAgICBwcm9jSWQ6IHN0cmluZ1xuICAgIHByb2NOYW1lOiBzdHJpbmdcbn1cblxuZGVjbGFyZSBpbnRlcmZhY2UgRVhFQ19ERUYge1xuICAgIG9uU3RhcnQ6IFNQQVdOX0RFRiB8IHVuZGVmaW5lZFxuICAgIG9uTG9naW46IFNQQVdOX0RFRiB8IHVuZGVmaW5lZFxufVxuXG5cbmRlY2xhcmUgaW50ZXJmYWNlIENMSV9ERUYge1xuICAgIGJlZm9yZV9vblN0YXJ0OiBTUEFXTlNfREVGXG4gICAgYWZ0ZXJfb25TdGFydDogU1BBV05TX0RFRlxuICAgIGJlZm9yZV9vblN0b3A6IFNQQVdOU19ERUZcbiAgICBhZnRlcl9vblN0b3A6IFNQQVdOU19ERUZcbiAgICBiZWZvcmVfb25Mb2dpbjogU1BBV05TX0RFRlxuICAgIGFmdGVyX29uTG9naW46IFNQQVdOU19ERUZcbn1cblxuZGVjbGFyZSBpbnRlcmZhY2UgU1BBV05TX0RFRiB7XG4gICAgW25hbWU6IHN0cmluZ106IFNQQVdOX0RFRlxuXG59XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBTUEFXTl9ERUYge1xuICAgIHByb2c/OiBzdHJpbmdcbiAgICBwYXJhbXM/OiBzdHJpbmdbXVxuICAgIHByb21pc2U/OiBQcm9taXNlPGFueT5cbiAgICBvcHRpb25zPzogYW55XG4gICAgdGltZXN0YW1wPzogbnVtYmVyXG59XG5cblxuY2xhc3MgUG9sRGFlbW9uQ2xhc3Mge1xuXG4gICAgcHJpdmF0ZSBTRVJWSUNFX1NUQVRFID0ge1xuICAgICAgICBSRUFEWTogeyBuYW1lOiBcIlNFUlZJQ0VfU1RBVEVfUkVBRFlcIiwgc3RhdGU6IDAgfSxcbiAgICAgICAgVVA6IHsgbmFtZTogXCJTRVJWSUNFX1NUQVRFX1VQXCIsIHN0YXRlOiAxIH0sXG4gICAgICAgIERPV046IHsgbmFtZTogXCJTRVJWSUNFX1NUQVRFX0RPV05cIiwgc3RhdGU6IDIgfSxcbiAgICAgICAgU1RPUDogeyBuYW1lOiBcIlNFUlZJQ0VfU1RBVEVfU1RPUFwiLCBzdGF0ZTogMyB9XG4gICAgfTtcblxuICAgIHByaXZhdGUgZGVmYXVsdHMgPSB7XG4gICAgICAgIENMSV9QUkVfSU5URVJWQUw6IDUwLFxuICAgICAgICBDTElfSU5URVJWQUw6IDIwMFxuICAgIH07XG5cblxuICAgIHB1YmxpYyBydW5uaW5nID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBzcnY6IFNFUlZJQ0VTX0RFRiA9IHt9O1xuICAgIHByaXZhdGUgbG9naW5TZXJ2aWNlOiBTRVJWSUNFX0RFRiB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICBwdWJsaWMgaW5pdChzZXJ2aWNlTmFtZTogc3RyaW5nLCBwYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zcnZbc2VydmljZU5hbWVdID0gdGhpcy5zcnZbc2VydmljZU5hbWVdID8gdGhpcy5zcnZbc2VydmljZU5hbWVdIDoge1xuICAgICAgICAgICAgcHJvY2Vzc2VzOiBbXSxcbiAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICBuYW1lOiBzZXJ2aWNlTmFtZSxcbiAgICAgICAgICAgIHN0YXRlOiB0aGlzLlNFUlZJQ0VfU1RBVEUuUkVBRFkuc3RhdGUsXG4gICAgICAgICAgICBpbnRlcnZhbDoge1xuICAgICAgICAgICAgICAgIGJlZm9yZV9vblN0YXJ0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgYWZ0ZXJfb25TdGFydDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGJlZm9yZV9vblN0b3A6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBhZnRlcl9vblN0b3A6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGk6IHtcbiAgICAgICAgICAgICAgICBhZnRlcl9vblN0YXJ0OiB7fSxcbiAgICAgICAgICAgICAgICBiZWZvcmVfb25TdGFydDoge30sXG4gICAgICAgICAgICAgICAgYWZ0ZXJfb25TdG9wOiB7fSxcbiAgICAgICAgICAgICAgICBiZWZvcmVfb25TdG9wOiB7fSxcbiAgICAgICAgICAgICAgICBhZnRlcl9vbkxvZ2luOiB7fSxcbiAgICAgICAgICAgICAgICBiZWZvcmVfb25Mb2dpbjoge31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBleGVjOiB7XG4gICAgICAgICAgICAgICAgb25TdGFydDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIG9uTG9naW46IHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNydltzZXJ2aWNlTmFtZV0ucHJvY2Vzc2VzID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLnNydltzZXJ2aWNlTmFtZV07XG4gICAgfVxuXG4gICAgLy8gc3RhcnRSdW5DaGVja2VyKHNlcnZpY2UubmFtZSwgJ2JlZm9yZScsICdvblN0YXJ0JywgJ3N0YXJ0ZWQnLCBsb2dnZXIsIHNlcnZpY2VTdGFydFJlc29sdmVyKTtcbiAgICBzdGFydFJ1bkNoZWNrZXIoc2VydmljZU5hbWU6IHN0cmluZywgcHJlUG9zdFN0YXRlOiAnYmVmb3JlJyB8ICdhZnRlcicsIHN0YXRlOiAnb25TdGFydCcgfCAnb25TdG9wJywgbXNnID0gXCJcIiwgbG9nZ2VyOiBQT0xfTE9HR0VSIHwgbmV0LlNvY2tldCwgcmVzb2x2ZXI6IFBPTF9DTEJfTUVUSE9EIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGludGVydmFsID0gdGhpcy5zcnZbc2VydmljZU5hbWVdLmludGVydmFsO1xuICAgICAgICBjb25zdCBjbGkgPSB0aGlzLnNydltzZXJ2aWNlTmFtZV0uY2xpW2Ake3ByZVBvc3RTdGF0ZX1fJHtzdGF0ZX1gXTtcbiAgICAgICAgY29uc3QgcnVuU3RhdGUgPSBzdGF0ZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKFwic3RhcnRcIikgPyBcInN0YXJ0XCIgOiBcInN0b3BcIjtcblxuICAgICAgICBpZiAoYCR7cHJlUG9zdFN0YXRlfV8ke3N0YXRlfWAgPT09ICdiZWZvcmVfb25TdGFydCcgJiYgcmVzb2x2ZXIpXG4gICAgICAgICAgICB0aGlzLnNydltzZXJ2aWNlTmFtZV0uc3RhcnRSZXNvbHZlciA9IHJlc29sdmVyO1xuXG4gICAgICAgIGNvbnN0IHJ1bkNoZWNrZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoY2xpKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWludGVydmFsW2Ake3ByZVBvc3RTdGF0ZX1fJHtzdGF0ZX1gXSkge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbFtgJHtwcmVQb3N0U3RhdGV9XyR7c3RhdGV9YF0gPSBzZXRJbnRlcnZhbChydW5DaGVja2VyLCAyMDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9nZ2VyLndyaXRlKGAgICAgICAgICB3YWl0aW5nICR7cHJlUG9zdFN0YXRlfSAke3NlcnZpY2VOYW1lfSAke3J1blN0YXRlfSAuLi5gKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGludGVydmFsW2Ake3ByZVBvc3RTdGF0ZX1fJHtzdGF0ZX1gXSkge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbFtgJHtwcmVQb3N0U3RhdGV9XyR7c3RhdGV9YF0gPSBjbGVhckludGVydmFsKGludGVydmFsW2Ake3ByZVBvc3RTdGF0ZX1fJHtzdGF0ZX1gXSEpO1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIud3JpdGUoYFske3Rlcm0uZmMuZ3JlZW59ICBPSyAgJHt0ZXJtLm1jLnJlc2V0QWxsfV0gJHtzZXJ2aWNlTmFtZX0gaXMgJHttc2d9IC4uLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZXIpIHJlc29sdmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoY2xpKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuQ2hlY2tlciwgNTAwKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHJlc29sdmVyKSByZXNvbHZlcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RvcFJ1bkNoZWNrZXIoc2VydmljZU5hbWU6IHN0cmluZywgc3RhZ2U6ICdTdGFydCcpIHtcbiAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSB0aGlzLnNydltzZXJ2aWNlTmFtZV0uaW50ZXJ2YWw7XG5cbiAgICAgICAgaWYgKGludGVydmFsW2BiZWZvcmVfb24ke3N0YWdlfWBdIHx8IGludGVydmFsW2BhZnRlcl9vbiR7c3RhZ2V9YF0pIHtcblxuICAgICAgICAgICAgaWYgKGludGVydmFsW2BiZWZvcmVfb24ke3N0YWdlfWBdKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJ2YWxbYGJlZm9yZV9vbiR7c3RhZ2V9YF0gPSBjbGVhckludGVydmFsKGludGVydmFsW2BiZWZvcmVfb24ke3N0YWdlfWBdISk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3J2W3NlcnZpY2VOYW1lXS5zdGFydFJlc29sdmVyKSB0aGlzLnNydltzZXJ2aWNlTmFtZV0uc3RhcnRSZXNvbHZlcj8uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW50ZXJ2YWxbYGFmdGVyX29uJHtzdGFnZX1gXSkge1xuICAgICAgICAgICAgICAgIGludGVydmFsW2BhZnRlcl9vbiR7c3RhZ2V9YF0gPSBjbGVhckludGVydmFsKGludGVydmFsW2BhZnRlcl9vbiR7c3RhZ2V9YF0hKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldFJ1bm5pbmcoc2VydmljZU5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLnNydltzZXJ2aWNlTmFtZV0ucnVubmluZyA9IHRydWU7XG4gICAgfVxuXG5cbiAgICBhZGRQcm9jZXNzKHNlcnZpY2VOYW1lOiBzdHJpbmcsIHByb2NJZDogc3RyaW5nLCBwcm9jTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc3J2W3NlcnZpY2VOYW1lXS5wcm9jZXNzZXMucHVzaCh7IHByb2NJZCwgcHJvY05hbWUgfSk7XG4gICAgfVxuXG4gICAgYWRkQ2xpKHNlcnZpY2VOYW1lOiBzdHJpbmcsIGZ1bmNOYW1lOiBzdHJpbmcsIHRpbWVzdGFtcDogbnVtYmVyLCBzcGF3bjogU1BBV05fREVGKSB7XG4gICAgICAgIHN3aXRjaCAoZnVuY05hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ29uU3RhcnQnOlxuICAgICAgICAgICAgY2FzZSAnb25Mb2dpbic6XG4gICAgICAgICAgICBjYXNlICdvblN0b3AnOlxuICAgICAgICAgICAgICAgIGNvbnN0IGFmdGVyID0gZnVuY05hbWUgPT09ICdvblN0b3AnID8gcG9sLmlzU3RhdGVTdG9wKHNlcnZpY2VOYW1lKSA6IHRoaXMuc3J2W3NlcnZpY2VOYW1lXS5leGVjW2Z1bmNOYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAoYWZ0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcnZbc2VydmljZU5hbWVdLmNsaVtgYWZ0ZXJfJHtmdW5jTmFtZX1gXVtgJHt0aW1lc3RhbXB9YF0gPSBzcGF3bjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNydltzZXJ2aWNlTmFtZV0uY2xpW2BiZWZvcmVfJHtmdW5jTmFtZX1gXVtgJHt0aW1lc3RhbXB9YF0gPSBzcGF3bjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRFeGVjKHNlcnZpY2VOYW1lOiBzdHJpbmcsIGZ1bmNOYW1lOiBzdHJpbmcsIHRpbWVzdGFtcDogbnVtYmVyLCBzcGF3bjogU1BBV05fREVGKSB7XG4gICAgICAgIHN3aXRjaCAoZnVuY05hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ29uU3RhcnQnOlxuICAgICAgICAgICAgY2FzZSAnb25Mb2dpbic6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3J2W3NlcnZpY2VOYW1lXS5leGVjW2Z1bmNOYW1lXSlcbiAgICAgICAgICAgICAgICAgICAgbXNnVG9Mb2coYG5vdCBwb3NzaWJsZSB0byBleGVjdXRlIHRvIGV4ZSBpbiAke2Z1bmNOYW1lfWAsICdwb2wgICAnLCBzZXJ2aWNlTmFtZSlcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3J2W3NlcnZpY2VOYW1lXS5leGVjW2Z1bmNOYW1lXSA9IHNwYXduO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVsQ2xpKHNlcnZpY2VOYW1lOiBzdHJpbmcsIGZ1bmNOYW1lOiBzdHJpbmcsIHRpbWVzdGFtcDogbnVtYmVyKSB7XG4gICAgICAgIHN3aXRjaCAoZnVuY05hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ29uU3RhcnQnOlxuICAgICAgICAgICAgY2FzZSAnb25TdG9wJzpcbiAgICAgICAgICAgIGNhc2UgJ29uTG9naW4nOlxuICAgICAgICAgICAgICAgIGNvbnN0IGlzQmVmb3JlID0gT2JqZWN0LmtleXModGhpcy5zcnZbc2VydmljZU5hbWVdLmNsaVtgYmVmb3JlXyR7ZnVuY05hbWV9YF0pLnNvbWUoayA9PiBrID09PSBgJHt0aW1lc3RhbXB9YCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzQmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuc3J2W3NlcnZpY2VOYW1lXS5jbGlbYGJlZm9yZV8ke2Z1bmNOYW1lfWBdKS5mb3JFYWNoKGsgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT09IGAke3RpbWVzdGFtcH1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnNydltzZXJ2aWNlTmFtZV0uY2xpW2BiZWZvcmVfJHtmdW5jTmFtZX1gXVtrXTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5zcnZbc2VydmljZU5hbWVdLmNsaVtgYWZ0ZXJfJHtmdW5jTmFtZX1gXSkuZm9yRWFjaChrID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrID09PSBgJHt0aW1lc3RhbXB9YClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5zcnZbc2VydmljZU5hbWVdLmNsaVtgYWZ0ZXJfJHtmdW5jTmFtZX1gXVtrXTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVsRXhlYyhzZXJ2aWNlTmFtZTogc3RyaW5nLCBmdW5jTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHN3aXRjaCAoZnVuY05hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ29uU3RhcnQnOlxuICAgICAgICAgICAgY2FzZSAnb25Mb2dpbic6XG4gICAgICAgICAgICAgICAgdGhpcy5zcnZbc2VydmljZU5hbWVdLmV4ZWNbZnVuY05hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0U2V0dXAoc2VydmljZU5hbWU6IHN0cmluZywgc2V0dXA6IFBPTF9TRVRVUCkge1xuICAgICAgICB0aGlzLnNydltzZXJ2aWNlTmFtZV0uc2V0dXAgPSBzZXR1cDtcbiAgICB9XG5cbiAgICBzZXRMb2dpblNlcnZpY2Uoc2VydmljZU5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLmxvZ2luU2VydmljZSA9IHRoaXMuc3J2W3NlcnZpY2VOYW1lXTtcbiAgICB9XG5cbiAgICBnZXRMb2dpblNlcnZpY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvZ2luU2VydmljZTtcbiAgICB9XG5cbiAgICBzdGF0ZUluaXQoc2VydmljZU5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLnNydltzZXJ2aWNlTmFtZV0uc3RhdGUgPSB0aGlzLlNFUlZJQ0VfU1RBVEUuUkVBRFkuc3RhdGU7XG4gICAgfVxuXG4gICAgZ2V0KHNlcnZpY2VOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3J2W3NlcnZpY2VOYW1lXTtcbiAgICB9XG5cbiAgICBpc1N0YXRlQWZ0ZXJEb3duKHNlcnZpY2VOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3J2W3NlcnZpY2VOYW1lXS5zdGF0ZSA+PSB0aGlzLlNFUlZJQ0VfU1RBVEUuRE9XTi5zdGF0ZTtcbiAgICB9XG5cbiAgICBpc1N0YXRlU3RvcChzZXJ2aWNlTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNydltzZXJ2aWNlTmFtZV0uc3RhdGUgPT09IHRoaXMuU0VSVklDRV9TVEFURS5TVE9QLnN0YXRlO1xuICAgIH1cblxuXG4gICAgc2V0U3RhdGVSZWFkeShzZXJ2aWNlTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc3J2W3NlcnZpY2VOYW1lXS5zdGF0ZSA9IHRoaXMuU0VSVklDRV9TVEFURS5SRUFEWS5zdGF0ZTtcbiAgICAgICAgdGhpcy5zcnZbc2VydmljZU5hbWVdLnJ1bm5pbmcgPSBmYWxzZTtcblxuICAgIH1cblxuXG4gICAgc2V0U3RhdGVEb3duKHNlcnZpY2VOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zcnZbc2VydmljZU5hbWVdLnN0YXRlID0gdGhpcy5TRVJWSUNFX1NUQVRFLkRPV04uc3RhdGU7XG4gICAgfVxuXG4gICAgc2V0U3RhdGVTdG9wKHNlcnZpY2VOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zcnZbc2VydmljZU5hbWVdLnN0YXRlID0gdGhpcy5TRVJWSUNFX1NUQVRFLlNUT1Auc3RhdGU7XG4gICAgfVxuXG4gICAgZ2V0QWxsUnVubmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2VydmljZXMoKS5maWx0ZXIocyA9PiBzLnJ1bm5pbmcpXG4gICAgfVxuXG4gICAgZ2V0QWxsU3RvcHBlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2VydmljZXMoKS5maWx0ZXIocyA9PiAhcy5ydW5uaW5nKVxuICAgIH1cblxuICAgIGdldFNlcnZpY2VzKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLnNydikuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgaWYgKGEubmFtZS50b1VwcGVyQ2FzZSgpIDwgYi5uYW1lLnRvVXBwZXJDYXNlKCkpIHJldHVybiAtMTtcbiAgICAgICAgICAgIGlmIChhLm5hbWUudG9VcHBlckNhc2UoKSA+IGIubmFtZS50b1VwcGVyQ2FzZSgpKSByZXR1cm4gMTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXROYW5vU2VjVGltZSgpIHtcbiAgICAgICAgY29uc3QgaHJUaW1lID0gcHJvY2Vzcy5ocnRpbWUoKTtcbiAgICAgICAgcmV0dXJuIGhyVGltZVswXSAqIDEwMDAwMDAwMDAgKyBoclRpbWVbMV07XG4gICAgfVxuXG5cbn1cblxuZXhwb3J0IGNvbnN0IHBvbCA9IG5ldyBQb2xEYWVtb25DbGFzcygpO1xuIiwiaW1wb3J0IHsgc3Bhd24gfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcGFja2FnZUpzb24gZnJvbSBcIi4uL3BhY2thZ2UuanNvblwiO1xuaW1wb3J0IHsgUE9MX1NFVFVQLCBQT0xfU0VUVVBfU1RBUlQsIFBPTF9TRVRVUF9TVE9QLCBwb2wgfSBmcm9tICcuL2RhZW1vbic7XG5pbXBvcnQgeyBMT0dfRklMRV9QQVRILCBMT0dfRklMRV9ST09ULCBsb2csIG1zZ1RvTG9nIH0gZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgY2xpU3BsaXRCeUxpbmVTeW5jIH0gZnJvbSAnLi9zcGF3bic7XG5pbXBvcnQgeyB0ZXJtIH0gZnJvbSAnLi90ZXJtJztcbmltcG9ydCB7IHpzaENvbXBsZXRpb25Jbml0IH0gZnJvbSAnLi9wb2wuY2xpZW50JztcblxuaWYgKCFmcy5leGlzdHNTeW5jKExPR19GSUxFX1BBVEgpKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgZnMuYWNjZXNzU3luYyhMT0dfRklMRV9ST09ULCBmcy5jb25zdGFudHMuUl9PSyB8IGZzLmNvbnN0YW50cy5XX09LIHwgZnMuY29uc3RhbnRzLlhfT0spO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZy5sb2coYFske3Rlcm0uZmMucmVkfVJFUVVJUkVEJHt0ZXJtLm1jLnJlc2V0QWxsfV0gUGxlYXNlIGNyZWF0ZSAnL3Zhci9sb2cvcG9sJyBmb2xkZXIgd2l0aCAncncnIGFjY2VzcyBmb3IgdGhlIHJ1bm5pbmcgdXNlciFgKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgIH1cbiAgICBjbGlTcGxpdEJ5TGluZVN5bmMoYHRvdWNoYCwgTE9HX0ZJTEVfUEFUSCk7XG59XG5cbi8vIHpzaCBwbHVnaW4gc2V0dXBcbmNvbnN0IHBvbFBsdWdpbkZvbGRlciA9IGAke3Byb2Nlc3MuZW52LlpTSH0vY3VzdG9tL3BsdWdpbnMvcG9sYDtcbmNvbnN0IHBvbFBsdWdpblZlcnNpb24gPSBgJHtwb2xQbHVnaW5Gb2xkZXJ9L3BvbC5wbHVnaW4uJHtwYWNrYWdlSnNvbi52ZXJzaW9ufS52ZXJzaW9uYDtcbmlmIChwcm9jZXNzLmVudi5aU0ggJiYgcHJvY2Vzcy5lbnYuWlNILmVuZHNXaXRoKCcub2gtbXktenNoJykgJiYgIWZzLmV4aXN0c1N5bmMocG9sUGx1Z2luVmVyc2lvbikpIHtcbiAgICBjbGlTcGxpdEJ5TGluZVN5bmMoYHRvdWNoYCwgcG9sUGx1Z2luVmVyc2lvbik7XG4gICAgenNoQ29tcGxldGlvbkluaXQoKTtcbn1cblxuLy8gZ2VuZXJhdGUgc3RhbmRhcmQgY2xpIGFuZCB0b0xvZyBvYmplY3RzXG5jb25zdCBjbGlHZW5lcmF0b3IgPSAoY29udHJvbGxlcjogUE9MX1NFVFVQX1NUQVJUIHwgUE9MX1NFVFVQX1NUT1AsIGJpbmRPYmplY3Q6IGFueSwgdHlwZTogYW55KSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnRyb2xsZXIuY2xpLCAnbm9FcnInLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyBnbG9iYWxUaGlzLnNlcnZpY2UuX19wcm9wX18ubm9FcnIgPSB0cnVlOyByZXR1cm4gY29udHJvbGxlci5jbGk7IH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udHJvbGxlci5jbGksICdzcGxpdEJ5TGluZScsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IGdsb2JhbFRoaXMuc2VydmljZS5fX3Byb3BfXy5zcGxpdEJ5TGluZSA9IHRydWU7IHJldHVybiBjb250cm9sbGVyLmNsaTsgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb250cm9sbGVyLmNsaSwgJ3NwbGl0QWxsJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgZ2xvYmFsVGhpcy5zZXJ2aWNlLl9fcHJvcF9fLnNwbGl0QWxsID0gdHJ1ZTsgcmV0dXJuIGNvbnRyb2xsZXIuY2xpOyB9XG4gICAgfSk7XG4gICAgY29udHJvbGxlci5jbGkuZ2lkID0gKGdpZCA9ICcnKSA9PiB7IGdsb2JhbFRoaXMuc2VydmljZS5fX3Byb3BfXy5naWQgPSBnaWQ7IHJldHVybiBjb250cm9sbGVyLmNsaTsgfTtcbiAgICBjb250cm9sbGVyLmNsaS51aWQgPSAodWlkID0gJycpID0+IHsgZ2xvYmFsVGhpcy5zZXJ2aWNlLl9fcHJvcF9fLnVpZCA9IHVpZDsgcmV0dXJuIGNvbnRyb2xsZXIuY2xpOyB9O1xuICAgIGNvbnRyb2xsZXIuY2xpLndkID0gKHdkID0gJycpID0+IHsgZ2xvYmFsVGhpcy5zZXJ2aWNlLl9fcHJvcF9fLmN3ZCA9IHdkOyByZXR1cm4gY29udHJvbGxlci5jbGk7IH07XG4gICAgY29udHJvbGxlci5jbGkuZW9sID0gKGVvbCA9ICcnKSA9PiB7IGdsb2JhbFRoaXMuc2VydmljZS5fX3Byb3BfXy5lb2wgPSBlb2w7IHJldHVybiBjb250cm9sbGVyLmNsaTsgfTtcbiAgICBjb250cm9sbGVyLmNsaS5kbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNsaURvKFsuLi5hcmd1bWVudHNdLCAodGhpcyBhcyBQT0xfU0VUVVApLnNlcnZpY2VOYW1lISlcbiAgICB9XG4gICAgY29udHJvbGxlci50b0xvZyA9IGZ1bmN0aW9uIChzdHI6IHN0cmluZykge1xuICAgICAgICBtc2dUb0xvZyhzdHIpO1xuICAgIH1cbiAgICAvLyBiaW5kIHNlcnZpY2UgbmFtZVxuICAgIGNvbnRyb2xsZXIudG9Mb2cgPSBjb250cm9sbGVyLnRvTG9nLmJpbmQoeyAuLi5iaW5kT2JqZWN0LCB0eXBlLCBjb250cm9sbGVyIH0pO1xuICAgIGNvbnRyb2xsZXIuY2xpLmRvID0gY29udHJvbGxlci5jbGkuZG8uYmluZCh7IC4uLmJpbmRPYmplY3QsIHR5cGUsIGNvbnRyb2xsZXIgfSk7XG59XG5cbi8vIGdlbmVyYXRlIHN0YW5kYXJkIGV4ZWMgYW5kIHRvTG9nIG9iamVjdHNcbmNvbnN0IGV4ZWNHZW5lcmF0b3IgPSAoY29udHJvbGxlcjogUE9MX1NFVFVQX1NUQVJULCBiaW5kT2JqZWN0OiBhbnksIHR5cGU6IGFueSkgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb250cm9sbGVyLmV4ZWMsICdpdCcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IGdsb2JhbFRoaXMuc2VydmljZS5fX3Byb3BfXy5pdCA9IHRydWU7IHJldHVybiBjb250cm9sbGVyLmV4ZWM7IH1cbiAgICB9KTtcblxuICAgIGNvbnRyb2xsZXIuZXhlYy5naWQgPSAoZ2lkID0gJycpID0+IHsgZ2xvYmFsVGhpcy5zZXJ2aWNlLl9fcHJvcF9fLmdpZCA9IGdpZDsgcmV0dXJuIGNvbnRyb2xsZXIuZXhlYzsgfTtcbiAgICBjb250cm9sbGVyLmV4ZWMudWlkID0gKHVpZCA9ICcnKSA9PiB7IGdsb2JhbFRoaXMuc2VydmljZS5fX3Byb3BfXy51aWQgPSB1aWQ7IHJldHVybiBjb250cm9sbGVyLmV4ZWM7IH07XG4gICAgY29udHJvbGxlci5leGVjLndkID0gKHdkID0gJycpID0+IHsgZ2xvYmFsVGhpcy5zZXJ2aWNlLl9fcHJvcF9fLmN3ZCA9IHdkOyByZXR1cm4gY29udHJvbGxlci5leGVjOyB9O1xuICAgIGNvbnRyb2xsZXIuZXhlYy5kbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGV4ZWNEbyhbLi4uYXJndW1lbnRzXSwgKHRoaXMgYXMgUE9MX1NFVFVQKS5zZXJ2aWNlTmFtZSEpXG4gICAgfVxuICAgIC8vIGJpbmQgc2VydmljZSBuYW1lXG4gICAgY29udHJvbGxlci5leGVjLmRvID0gY29udHJvbGxlci5leGVjLmRvLmJpbmQoeyAuLi5iaW5kT2JqZWN0LCB0eXBlLCBjb250cm9sbGVyIH0pO1xufVxuXG5jb25zdCBleGVjRG8gPSAoY21kOiBzdHJpbmdbXSwgc2VydmljZU5hbWU6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHByb2cgPSBjbWQuc2hpZnQoKTtcbiAgICBjb25zdCBwYXJhbXMgPSBbLi4uY21kXTtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBwb2wuZ2V0TmFub1NlY1RpbWUoKTtcbiAgICBjb25zdCBmdW5jTmFtZSA9IG5ldyBFcnJvcigpLnN0YWNrPy5zcGxpdChcImF0IFwiKVszXS5zcGxpdCgnICcpWzBdLnNwbGl0KCcuJylbMV07XG4gICAgbGV0IG9wdGlvbnMgPSB7IC4uLmdsb2JhbFRoaXMuc2VydmljZS5fX3Byb3BfXyB9O1xuICAgIGdsb2JhbFRoaXMuc2VydmljZS5fX3Byb3BfXyA9IHt9O1xuICAgIGNvbnN0IGVudiA9IHtcbiAgICAgICAgLi4ucHJvY2Vzcy5lbnYsXG4gICAgICAgIFBPTF9DTF9FTlY6IGBfX1BPTF9DTF9fJHtwcm9nfV9fJHt0aW1lc3RhbXB9X19FWEVDX19QT0xfQ0xfX2BcbiAgICB9XG5cbiAgICAvLyAgbXVsdGlwbGUgZXhlYyBub3QgYWxsb3dlZFxuICAgIGlmIChwb2wuaXNTdGF0ZUFmdGVyRG93bihzZXJ2aWNlTmFtZSkgfHwgcG9sLmdldChzZXJ2aWNlTmFtZSkuZXhlY1tmdW5jTmFtZSEgYXMgJ29uU3RhcnQnIHwgJ29uTG9naW4nXSlcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuXG4gICAgaWYgKG9wdGlvbnMuZ2lkKSB7XG4gICAgICAgIGNvbnN0IGdpZCA9IGNsaVNwbGl0QnlMaW5lU3luYygnaWQnLCAnLWcnLCBgJHtvcHRpb25zLmdpZH1gKTtcbiAgICAgICAgb3B0aW9ucy5naWQgPSAhZ2lkLmMgPyBOdW1iZXIoZ2lkLm9bMF0pIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnVpZCkge1xuICAgICAgICBjb25zdCB1aWQgPSBjbGlTcGxpdEJ5TGluZVN5bmMoJ2lkJywgJy11JywgYCR7b3B0aW9ucy51aWR9YCk7XG4gICAgICAgIG9wdGlvbnMudWlkID0gIXVpZC5jID8gTnVtYmVyKHVpZC5vWzBdKSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjb25zdCBzcGF3bkNtZCA9IHNwYXduKHByb2chLCBwYXJhbXMsIHsgY3dkOiBvcHRpb25zLmN3ZCwgZW52LCBzdGRpbzogb3B0aW9ucy5pdCA/ICdpbmhlcml0JyA6IHVuZGVmaW5lZCwgZ2lkOiBvcHRpb25zLmdpZCwgdWlkOiBvcHRpb25zLnVpZCB9KTtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UocmVzID0+IHtcbiAgICAgICAgaWYgKCFvcHRpb25zLml0KSB7XG4gICAgICAgICAgICBzcGF3bkNtZC5zdGRvdXQ/Lm9uKCdkYXRhJywgZGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgbXNnVG9Mb2coZGF0YS50b1N0cmluZygpLCAnb3V0ZXhlJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNwYXduQ21kLnN0ZGVycj8ub24oJ2RhdGEnLCBkYXRhID0+IHtcbiAgICAgICAgICAgICAgICBtc2dUb0xvZyhkYXRhLnRvU3RyaW5nKCksICdlcnJleGUnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHNwYXduQ21kLm9uKCdjbG9zZScsIChjKSA9PiB7XG4gICAgICAgICAgICByZXMoYyk7XG4gICAgICAgICAgICBwb2wuZGVsRXhlYyhzZXJ2aWNlTmFtZSwgZnVuY05hbWUhKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcG9sLmFkZEV4ZWMoc2VydmljZU5hbWUsIGZ1bmNOYW1lISwgdGltZXN0YW1wLCB7IHByb2csIHBhcmFtcywgcHJvbWlzZSwgb3B0aW9ucywgdGltZXN0YW1wIH0pXG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbmNvbnN0IGNsaURvID0gKGNtZDogc3RyaW5nW10sIHNlcnZpY2VOYW1lOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBsaW5lczogc3RyaW5nW11bXSA9IFtdO1xuICAgIGNvbnN0IHByb2cgPSBjbWQuc2hpZnQoKTtcbiAgICBjb25zdCBwYXJhbXMgPSBbLi4uY21kXTtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBwb2wuZ2V0TmFub1NlY1RpbWUoKTtcbiAgICBjb25zdCBmdW5jTmFtZSA9IG5ldyBFcnJvcigpLnN0YWNrPy5zcGxpdChcImF0IFwiKVszXS5zcGxpdCgnICcpWzBdLnNwbGl0KCcuJylbMV07XG4gICAgbGV0IG9wdGlvbnMgPSB7IC4uLmdsb2JhbFRoaXMuc2VydmljZS5fX3Byb3BfXyB9O1xuICAgIGdsb2JhbFRoaXMuc2VydmljZS5fX3Byb3BfXyA9IHt9O1xuICAgIGNvbnN0IGVudiA9IHtcbiAgICAgICAgLi4ucHJvY2Vzcy5lbnYsXG4gICAgICAgIFBPTF9DTF9FTlY6IGBfX1BPTF9DTF9fJHtwcm9nfV9fJHt0aW1lc3RhbXB9X19DTElfX1BPTF9DTF9fYFxuICAgIH1cbiAgICBpZiAocG9sLmlzU3RhdGVBZnRlckRvd24oc2VydmljZU5hbWUpICYmIGZ1bmNOYW1lICE9IFwib25TdG9wXCIpXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblxuICAgIGlmIChvcHRpb25zLmdpZCkge1xuICAgICAgICBjb25zdCBnaWQgPSBjbGlTcGxpdEJ5TGluZVN5bmMoJ2lkJywgJy1nJywgYCR7b3B0aW9ucy5naWR9YCk7XG4gICAgICAgIG9wdGlvbnMuZ2lkID0gIWdpZC5jID8gTnVtYmVyKGdpZC5vWzBdKSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy51aWQpIHtcbiAgICAgICAgY29uc3QgdWlkID0gY2xpU3BsaXRCeUxpbmVTeW5jKCdpZCcsICctdScsIGAke29wdGlvbnMudWlkfWApO1xuICAgICAgICBvcHRpb25zLnVpZCA9ICF1aWQuYyA/IE51bWJlcih1aWQub1swXSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3Qgc3Bhd25DbWQgPSBzcGF3bihwcm9nISwgcGFyYW1zLCB7IGN3ZDogb3B0aW9ucy5jd2QsIGVudiwgZ2lkOiBvcHRpb25zLmdpZCwgdWlkOiBvcHRpb25zLnVpZCB9KTtcbiAgICAvLyBjbGlSdW5zW3NldHVwLnR5cGVdW3RpbWVzdGFtcF0gPSB7IHByb2csIHBhcmFtcyB9O1xuICAgIHBvbC5hZGRDbGkoc2VydmljZU5hbWUsIGZ1bmNOYW1lISwgdGltZXN0YW1wLCB7IHByb2csIHBhcmFtcyB9KTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzID0+IHtcbiAgICAgICAgbGV0IF9vdXQgPSAnJztcbiAgICAgICAgc3Bhd25DbWQuc3Rkb3V0Lm9uKCdkYXRhJywgZGF0YSA9PiB7XG4gICAgICAgICAgICBfb3V0ICs9IGRhdGE7XG4gICAgICAgIH0pO1xuICAgICAgICBzcGF3bkNtZC5zdGRlcnIub24oJ2RhdGEnLCBkYXRhID0+IHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5ub0VycikgX291dCArPSBkYXRhO1xuICAgICAgICB9KTtcblxuICAgICAgICBzcGF3bkNtZC5vbignY2xvc2UnLCAoYykgPT4ge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3BsaXRBbGwgfHwgb3B0aW9ucy5zcGxpdEJ5TGluZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IF9saW5lcyA9IF9vdXQuc3BsaXQob3B0aW9ucy5lb2wgPyBvcHRpb25zLmVvbCA6ICdcXG4nKS5maWx0ZXIobCA9PiBsKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zcGxpdEJ5TGluZSkgcmVzKHsgbzogX2xpbmVzLCBjIH0pO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfbGluZXMuZm9yRWFjaChsID0+IGxpbmVzLnB1c2gobC5zcGxpdCgvWyBcXHRdLykpKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzKHsgbzogbGluZXMsIGMgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJlcyh7IG86IF9vdXQsIGMgfSk7XG4gICAgICAgICAgICBwb2wuZGVsQ2xpKHNlcnZpY2VOYW1lLCBmdW5jTmFtZSEsIHRpbWVzdGFtcCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEN1c3RvbUdsb2JhbCB7XG4gICAgc2VydmljZTogYW55O1xufVxuXG5kZWNsYXJlIGNvbnN0IGdsb2JhbFRoaXM6IHtcbiAgICBzZXJ2aWNlOiBhbnk7XG59O1xuXG5cbmdsb2JhbFRoaXMuc2VydmljZSA9IHtcbiAgICBzZXQgc2V0dXAoc2V0dXA6IFBPTF9TRVRVUCkge1xuICAgICAgICBjb25zdCBfc2V0dXA6IFBPTF9TRVRVUCA9IHtcbiAgICAgICAgICAgIC4uLnNldHVwLFxuICAgICAgICAgICAgc2VydmljZU5hbWU6IChuZXcgRXJyb3IoKS5zdGFjaz8uc3BsaXQoXCJhdCBcIilbMl0pPy50cmltKCkuc3BsaXQoJy5qczonKVswXS5yZXBsYWNlKC8uKlxcLy8sICcnKSxcbiAgICAgICAgICAgIHNzT25TdGFydDoge1xuICAgICAgICAgICAgICAgIGNsaToge30sXG4gICAgICAgICAgICAgICAgZXhlYzoge31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzc09uU3RvcDoge1xuICAgICAgICAgICAgICAgIGNsaToge30sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3NPbkxvZ2luOiB7XG4gICAgICAgICAgICAgICAgY2xpOiB7fSxcbiAgICAgICAgICAgICAgICBleGVjOiB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGV4dGVuZCBfc2V0dXBcbiAgICAgICAgY2xpR2VuZXJhdG9yKF9zZXR1cC5zc09uU3RhcnQsIF9zZXR1cCwgXCJzdGFydFwiKTtcbiAgICAgICAgY2xpR2VuZXJhdG9yKF9zZXR1cC5zc09uU3RvcCwgX3NldHVwLCBcInN0b3BcIik7XG4gICAgICAgIGNsaUdlbmVyYXRvcihfc2V0dXAuc3NPbkxvZ2luLCBfc2V0dXAsIFwibG9naW5cIik7XG4gICAgICAgIGV4ZWNHZW5lcmF0b3IoX3NldHVwLnNzT25TdGFydCwgX3NldHVwLCBcInN0YXJ0XCIpO1xuICAgICAgICBleGVjR2VuZXJhdG9yKF9zZXR1cC5zc09uTG9naW4sIF9zZXR1cCwgXCJsb2dpblwiKTtcbiAgICAgICAgcG9sLnN0YXRlSW5pdChfc2V0dXAuc2VydmljZU5hbWUhKTtcbiAgICAgICAgcG9sLnNldFNldHVwKF9zZXR1cC5zZXJ2aWNlTmFtZSEsIF9zZXR1cCk7XG4gICAgfSxcbiAgICBfX3Byb3BfXzoge30sXG59XG4iLCJpbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHsgUE9MX0xPR0dFUiB9IGZyb20gJy4vZGFlbW9uJztcblxuLy8gbG9nIHNldHVwXG5leHBvcnQgY29uc3QgVEFTS19JTkRFTlQgPSBgICAgICAgICBgO1xuZXhwb3J0IGNvbnN0IExPR19GSUxFX1JPT1QgPSAnL3Zhci9sb2cvcG9sJztcbmV4cG9ydCBjb25zdCBMT0dfRklMRV9QQVRIID0gYCR7TE9HX0ZJTEVfUk9PVH0vcG9sLmxvZ2A7XG5sZXQgbG9nX2ZpbGU6IGZzLldyaXRlU3RyZWFtIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG5leHBvcnQgY29uc3QgbG9nRmlsZUluaXQgPSAoKSA9PiB7XG4gICAgbG9nX2ZpbGUgPSBmcy5jcmVhdGVXcml0ZVN0cmVhbShMT0dfRklMRV9QQVRILCB7IGZsYWdzOiAnYScgfSk7XG59XG5cbmV4cG9ydCBjb25zdCBtc2dUb0xvZyA9IChtZXNzYWdlOiBzdHJpbmcsIGxldmVsID0gJ291dGxvZycsIHNlcnZpY2U/OiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBsb2cgPSB7XG4gICAgICAgIHRpbWU6IG5ldyBEYXRlKCkuSVNPU3RyaW5ncygpLFxuICAgICAgICBsZXZlbCxcbiAgICAgICAgc2VydmljZSxcbiAgICAgICAgbWVzc2FnZVxuICAgIH1cbiAgICBsb2dfZmlsZT8ud3JpdGUoYCR7SlNPTi5zdHJpbmdpZnkobG9nKX1cXG5gKTtcbn1cblxuZXhwb3J0IGNvbnN0IGxvZzogUE9MX0xPR0dFUiA9IHtcbiAgICB3cml0ZTogY29uc29sZS5sb2csXG4gICAgbG9nOiBjb25zb2xlLmxvZyxcbiAgICB3YXJuOiBjb25zb2xlLndhcm4sXG4gICAgZXJyOiBjb25zb2xlLmVycm9yLFxuICAgIGVuZDogKCkgPT4geyB9XG59O1xuXG5leHBvcnQgY29uc3QgbG9nRmlsZTogUE9MX0xPR0dFUiA9IHtcbiAgICB3cml0ZTogbXNnVG9Mb2csXG4gICAgbG9nOiAoKSA9PiB7IH0sXG4gICAgd2FybjogKCkgPT4geyB9LFxuICAgIGVycjogKCkgPT4geyB9LFxuICAgIGVuZDogKCkgPT4geyB9XG59O1xuXG5jb25zb2xlLmxvZyA9IGNvbnNvbGVbXCJsb2dcIl0uYmluZChnbG9iYWwuY29uc29sZSwgVEFTS19JTkRFTlQpO1xuY29uc29sZS53YXJuID0gY29uc29sZVtcIndhcm5cIl0uYmluZChnbG9iYWwuY29uc29sZSwgVEFTS19JTkRFTlQpO1xuY29uc29sZS5lcnJvciA9IGNvbnNvbGVbXCJlcnJvclwiXS5iaW5kKGdsb2JhbC5jb25zb2xlLCBUQVNLX0lOREVOVCk7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBpbnRlcmZhY2UgRGF0ZSB7XG4gICAgICAgIElTT1N0cmluZ3M6ICgpID0+IHN0cmluZ1xuICAgIH1cbn1cblxuLy8gRGF0ZSBvdmVycmlkZXNcbkRhdGUucHJvdG90eXBlLklTT1N0cmluZ3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgdHpvID0gLXRoaXMuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBjb25zdCBkaWYgPSB0em8gPj0gMCA/ICcrJyA6ICctJztcbiAgICBjb25zdCBwYWQgPSBmdW5jdGlvbiAobnVtOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIChudW0gPCAxMCA/ICcwJyA6ICcnKSArIG51bTtcbiAgICB9O1xuICAgIGNvbnN0IHpvbmUgPSBkaWYgKyBwYWQoTWF0aC5mbG9vcihNYXRoLmFicyh0em8pIC8gNjApKSArICc6JyArIHBhZChNYXRoLmFicyh0em8pICUgNjApXG4gICAgdGhpcy5zZXRUaW1lKHRoaXMuZ2V0VGltZSgpICsgKHR6byAqIDYwICogMTAwMCkpO1xuICAgIHJldHVybiB0aGlzLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgnWicsIHpvbmUpO1xufVxuIiwiaW1wb3J0IG1pbmltaXN0IGZyb20gJ21pbmltaXN0JztcbmltcG9ydCB7IGhlbHAgfSBmcm9tICcuLi9lbnRyeS9wb2wnO1xuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgY2xpZW50Q3JlYXRlIH0gZnJvbSAnLi9zb2NrZXQnO1xuaW1wb3J0IHsgY2xpU3BsaXRCeUxpbmVTeW5jIH0gZnJvbSAnLi9zcGF3bic7XG5pbXBvcnQgeyB0ZXJtIH0gZnJvbSAnLi90ZXJtJztcblxuZXhwb3J0IGVudW0gQ2xpZW50Q29tbWFuZCB7XG4gICAgXCJjb21wbGV0aW9uXCIgPSBcImNvbXBsZXRpb25cIixcbiAgICBcInBzXCIgPSBcInBzXCIsXG4gICAgXCJkYWVtb25cIiA9IFwiZGFlbW9uXCIsXG4gICAgXCJzdG9wXCIgPSBcInN0b3BcIixcbiAgICBcInN0YXJ0XCIgPSBcInN0YXJ0XCIsXG4gICAgXCJyZXN0YXJ0XCIgPSBcInJlc3RhcnRcIixcbn07XG5cbmV4cG9ydCBjb25zdCBpc0NsaWVudENvbW1hbmQgPSAoY21kOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoT2JqZWN0LnZhbHVlcyhDbGllbnRDb21tYW5kKS5pbmNsdWRlcyhjbWQgYXMgYW55KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cblxubGV0IHpzaENvbXBsZXRpb25Jbml0RXhlY3V0ZWQgPSBmYWxzZTtcbmV4cG9ydCBjb25zdCB6c2hDb21wbGV0aW9uSW5pdCA9ICgpID0+IHtcbiAgICBpZiAoIXpzaENvbXBsZXRpb25Jbml0RXhlY3V0ZWQgJiYgcHJvY2Vzcy5lbnYuWlNIICYmIHByb2Nlc3MuZW52LlpTSC5lbmRzV2l0aCgnLm9oLW15LXpzaCcpKSB7XG4gICAgICAgIHpzaENvbXBsZXRpb25Jbml0RXhlY3V0ZWQgPSB0cnVlO1xuICAgICAgICBjb25zdCBwb2xQbHVnaW5Gb2xkZXIgPSBgJHtwcm9jZXNzLmVudi5aU0h9L2N1c3RvbS9wbHVnaW5zL3BvbGA7XG4gICAgICAgIGNsaVNwbGl0QnlMaW5lU3luYyhgbWtkaXJgLCBgLXBgLCBgJHtwb2xQbHVnaW5Gb2xkZXJ9YCk7XG4gICAgICAgIGNsaVNwbGl0QnlMaW5lU3luYyhgY3BgLCBgJHtfX2Rpcm5hbWV9Ly4uL3pzaC1wbHVnaW4vcG9sLnBsdWdpbi56c2hgLCBgJHtwb2xQbHVnaW5Gb2xkZXJ9L3BvbC5wbHVnaW4uenNoYCk7XG4gICAgICAgIGNsaVNwbGl0QnlMaW5lU3luYyhgY3BgLCBgJHtfX2Rpcm5hbWV9Ly4uL3pzaC1wbHVnaW4vcGx1Z2luLmpzYCwgYCR7cG9sUGx1Z2luRm9sZGVyfS9wbHVnaW4uanNgKTtcbiAgICAgICAgbG9nLmxvZyhgWyR7dGVybS5mYy5ncmVlbn0gIElORk8gICR7dGVybS5tYy5yZXNldEFsbH1dIC5vaC1teS16c2ggY3VzdG9tIHBsdWdpbiBpbnN0YWxsZWQuIFBsZWFzZSBhZGQgJ3BvbCcgdG8gZW5hYmxlZCBwbHVnaW4gbGlzdCBpbiAnfi8uenNocmMnIGZpbGUuYCk7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgcG9sQ2xpZW50ID0gYXN5bmMgKGFyZ3Y6IG1pbmltaXN0LlBhcnNlZEFyZ3MpID0+IHtcblxuICAgIHN3aXRjaCAoYXJndi5fWzBdKSB7XG4gICAgICAgIGNhc2UgQ2xpZW50Q29tbWFuZC5jb21wbGV0aW9uOlxuICAgICAgICAgICAgaWYgKGFyZ3YuX1sxXSA9PT0gJ3pzaCcpIHtcbiAgICAgICAgICAgICAgICB6c2hDb21wbGV0aW9uSW5pdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQ2xpZW50Q29tbWFuZC5wczpcbiAgICAgICAgY2FzZSBDbGllbnRDb21tYW5kLmRhZW1vbjpcbiAgICAgICAgY2FzZSBDbGllbnRDb21tYW5kLnN0b3A6XG4gICAgICAgIGNhc2UgQ2xpZW50Q29tbWFuZC5zdGFydDpcbiAgICAgICAgY2FzZSBDbGllbnRDb21tYW5kLnJlc3RhcnQ6XG4gICAgICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCBjbGllbnRDcmVhdGUoKTtcbiAgICAgICAgICAgIGNsaWVudC53cml0ZShKU09OLnN0cmluZ2lmeShhcmd2KSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGhlbHAoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cbiIsImltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgbWluaW1pc3QgZnJvbSAnbWluaW1pc3QnO1xuaW1wb3J0IG5ldCBmcm9tICduZXQnO1xuaW1wb3J0IG9zIGZyb20gXCJvc1wiO1xuaW1wb3J0IHsgaGVscCB9IGZyb20gJy4uL2VudHJ5L3BvbCc7XG5pbXBvcnQgeyBwb2wsIFBPTF9DTEJfTUVUSE9ELCBQT0xfTE9HR0VSLCBTRVJWSUNFX0RFRiB9IGZyb20gJy4vZGFlbW9uJztcbmltcG9ydCBcIi4vZ2xvYmFsXCI7XG5pbXBvcnQgeyBsb2csIGxvZ0ZpbGUsIGxvZ0ZpbGVJbml0LCBUQVNLX0lOREVOVCB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IENsaWVudENvbW1hbmQgfSBmcm9tICcuL3BvbC5jbGllbnQnO1xuaW1wb3J0IHsgY2xpZW50Q3JlYXRlLCBzZXJ2ZXJDbGVhbnVwLCBzZXJ2ZXJDcmVhdGUgfSBmcm9tICcuL3NvY2tldCc7XG5pbXBvcnQgeyBjbGlTcGxpdEJ5TGluZSB9IGZyb20gJy4vc3Bhd24nO1xuaW1wb3J0IHsgdGVybSB9IGZyb20gJy4vdGVybSc7XG5cbmNvbnN0IFBPTF9EQUVNT05fUlVOTklOR19NU0cgPSBgQW5vdGhlciBwb2wgZGFlbW9uIGlzIHJ1bm5pbmchYDtcbmNvbnN0IFBPU1NJQkxFX09QVElPTlNfTVNHID0gYHBvc3NpYmxlIG9wdGlvbnM6IFstLWFsbHxzZXJ2aWNlX25hbWUuc2VydmljZV1gO1xuY29uc3QgUE9MX0NPTkZJR19GT0xERVIgPSBwcm9jZXNzLmVudi5QT0xfQ09ORklHX0ZPTERFUiA/IFtwcm9jZXNzLmVudi5QT0xfQ09ORklHX0ZPTERFUl0gOiBbXCIvZXRjL3BvbFwiXTtcblBPTF9DT05GSUdfRk9MREVSLnB1c2goYCR7b3MuaG9tZWRpcigpfS8uY29uZmlnL3BvbGApO1xuY29uc3QgZW52cyA9IHsgLi4ucHJvY2Vzcy5lbnYgfTtcblxuZW51bSBTZXJ2ZXJDb21tYW5kIHtcblx0Ym9vdCA9IFwiYm9vdFwiXG59XG5cbmV4cG9ydCBjb25zdCBpc1NlcnZlckNvbW1hbmQgPSAoY21kOiBzdHJpbmcpID0+IHtcblx0aWYgKE9iamVjdC52YWx1ZXMoQ2xpZW50Q29tbWFuZCkuaW5jbHVkZXMoY21kIGFzIGFueSkpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRpZiAoT2JqZWN0LnZhbHVlcyhTZXJ2ZXJDb21tYW5kKS5pbmNsdWRlcyhjbWQgYXMgYW55KSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBwb2xTZXJ2ZXIgPSBhc3luYyAoYXJndjogbWluaW1pc3QuUGFyc2VkQXJncykgPT4ge1xuXG5cdHByb2Nlc3MuZW52LlRaID0gcHJvY2Vzcy5lbnYuVFogPyBwcm9jZXNzLmVudi5UWiA6IGZzLnJlYWRGaWxlU3luYygnL2V0Yy90aW1lem9uZScpLnRvU3RyaW5nKCkuc3BsaXQoJ1xcbicpWzBdO1xuXG5cdGxvZ0ZpbGVJbml0KCk7XG5cblx0Y29uc3QgbG9va3VwID0gYXN5bmMgKCkgPT4ge1xuXHRcdGNvbnN0IF9ycyA9IGF3YWl0IGNsaVNwbGl0QnlMaW5lKCdmaW5kJywgLi4uUE9MX0NPTkZJR19GT0xERVIsICctbmFtZScsICcqLnNlcnZpY2UuanMnKTtcblx0XHRjb25zdCBfbG9naW5TZXJ2aWNlID0gYXdhaXQgY2xpU3BsaXRCeUxpbmUoJ3JlYWRsaW5rJywgYC1lYCwgLi4uUE9MX0NPTkZJR19GT0xERVIubWFwKGYgPT4gYCR7Zn0vbG9naW4uc2VydmljZS50YXJnZXQuanNgKSk7XG5cdFx0Y29uc3QgX3BvbERhZW1vblJ1bm5pbmdDaGVjayA9IGF3YWl0IGNsaVNwbGl0QnlMaW5lKCdzaCcsIGAtY2AsIGBwcyBhdXggfCBncmVwIFwiLipub2RlLipwb2wuKmJvb3QkXCJgKTtcblx0XHRwb2wucnVubmluZyA9IF9wb2xEYWVtb25SdW5uaW5nQ2hlY2suby5sZW5ndGggPCAyID8gZmFsc2UgOiB0cnVlO1xuXG5cdFx0X3JzLm8uZmlsdGVyKHIgPT4gIXIuaW5jbHVkZXMoJ05vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnknKSkubWFwKHIgPT4ge1xuXHRcdFx0Y29uc3QgbmFtZSA9IHI/LnNwbGl0KCcvJyk/LnBvcCgpPy5yZXBsYWNlKCcuanMnLCAnJyk7XG5cdFx0XHRwb2wuaW5pdChuYW1lISwgcik7XG5cdFx0fSk7XG5cblxuXHRcdGNvbnN0IF9wcm9jID0gYXdhaXQgY2xpU3BsaXRCeUxpbmUoJ2ZpbmQnLCAnL3Byb2MnLCAnLW1heGRlcHRoJywgJzInLCAnLW5hbWUnLCAnZW52aXJvbicpO1xuXHRcdGNvbnN0IF9ydW5uaW5nX2VudnMgPSBfcHJvYy5vLmZpbHRlcihlID0+IHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGZzLmFjY2Vzc1N5bmMoZSwgZnMuY29uc3RhbnRzLlJfT0spO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRmb3IgKGNvbnN0IGVudkZpbGUgb2YgX3J1bm5pbmdfZW52cykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29uc3QgYnVmZmVyID0gZnMucmVhZEZpbGVTeW5jKGVudkZpbGUpO1xuXHRcdFx0XHRjb25zdCBmaWxlQ29udGVudCA9IGJ1ZmZlci50b1N0cmluZygpO1xuXHRcdFx0XHRpZiAoZmlsZUNvbnRlbnQuaW5jbHVkZXMoXCJfX1BPTF9fXCIpKSB7XG5cdFx0XHRcdFx0Y29uc3Qgc3ViUHJvY0luZm8gPSBmaWxlQ29udGVudC5zcGxpdCgnX19QT0xfQ0xfXycpO1xuXHRcdFx0XHRcdGNvbnN0IHByb2NJbmZvID0gc3ViUHJvY0luZm9bMV0uc3BsaXQoXCJfX1wiKTtcblx0XHRcdFx0XHRjb25zdCBfc3J2SW5mbyA9IGZpbGVDb250ZW50LnNwbGl0KCdfX1BPTF9fJyk7XG5cdFx0XHRcdFx0Y29uc3Qgc3J2SW5mbyA9IF9zcnZJbmZvWzFdLnNwbGl0KFwiX19cIik7XG5cdFx0XHRcdFx0cG9sLnNldFJ1bm5pbmcoc3J2SW5mb1swXSk7XG5cdFx0XHRcdFx0cG9sLmFkZFByb2Nlc3Moc3J2SW5mb1swXSwgZW52RmlsZS5zcGxpdCgnLycpWzJdLCBwcm9jSW5mb1swXSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7IH1cblx0XHR9XG5cblxuXHRcdC8vIHJlcXVpcmUgYWxsIHNlcnZpY2UgZmlsZVxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRjb25zdCBkeW5hbWljUmVxdWlyZSA9ICh0eXBlb2YgX193ZWJwYWNrX3JlcXVpcmVfXyA9PT0gJ2Z1bmN0aW9uJykgPyBfX25vbl93ZWJwYWNrX3JlcXVpcmVfXyA6IHJlcXVpcmVcblx0XHRmb3IgKGNvbnN0IHNlcnZpY2Ugb2YgcG9sLmdldFNlcnZpY2VzKCkpIHtcblx0XHRcdGR5bmFtaWNSZXF1aXJlKHNlcnZpY2UucGF0aCEpO1xuXHRcdH1cblxuXHRcdF9sb2dpblNlcnZpY2Uuby5mb3JFYWNoKHMgPT4ge1xuXHRcdFx0cG9sLnNldExvZ2luU2VydmljZShzPy5zcGxpdCgnLycpPy5wb3AoKT8ucmVwbGFjZSgnLmpzJywgJycpISk7XG5cdFx0fSk7XG5cblx0fVxuXG5cdC8vIHN0YXJ0IHByb2Nlc3MgaW1wbGVtZW50YXRpb25cblx0Y29uc3Qgc3RhcnQgPSBhc3luYyAoc2VydmljZU5hbWU6IHN0cmluZyB8IG51bGwsIGxvZ2dlcjogUE9MX0xPR0dFUiB8IG5ldC5Tb2NrZXQpID0+IHtcblx0XHRpZiAoIXNlcnZpY2VOYW1lKSByZXR1cm47XG5cdFx0aWYgKCFwb2wuZ2V0U2VydmljZXMoKS5zb21lKHMgPT4gcy5uYW1lID09PSBzZXJ2aWNlTmFtZSB8fCBzZXJ2aWNlTmFtZSA9PT0gXCItLWFsbFwiKSkge1xuXHRcdFx0bG9nZ2VyLndyaXRlKFBPU1NJQkxFX09QVElPTlNfTVNHKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBwcm9taXNlQWxsU2VydmljZTogQXJyYXk8UHJvbWlzZTxhbnk+PiA9IFtdO1xuXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG5cdFx0XHRmb3IgKGNvbnN0IHNlcnZpY2Ugb2YgcG9sLmdldFNlcnZpY2VzKCkpIHtcblx0XHRcdFx0aWYgKHNlcnZpY2VOYW1lICE9PSBcIi0tYWxsXCIgJiYgc2VydmljZS5uYW1lICE9PSBzZXJ2aWNlTmFtZSkgY29udGludWU7XG5cblx0XHRcdFx0bGV0IHNlcnZpY2VTdGFydFJlc29sdmVyOiBQT0xfQ0xCX01FVEhPRCA9ICgpID0+IHsgfTtcblx0XHRcdFx0Y29uc3Qgc3J2ID0gcG9sLmdldChzZXJ2aWNlLm5hbWUpO1xuXHRcdFx0XHRwcm9taXNlQWxsU2VydmljZS5wdXNoKG5ldyBQcm9taXNlKHIgPT4gc2VydmljZVN0YXJ0UmVzb2x2ZXIgPSByKSk7XG5cdFx0XHRcdHBvbC5zdGF0ZUluaXQoc2VydmljZS5uYW1lKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGlmIChwb2wuZ2V0QWxsUnVubmluZygpLnNvbWUocyA9PiBzLm5hbWUgPT09IHNlcnZpY2UubmFtZSkpIHtcblx0XHRcdFx0XHRcdGxvZ2dlci53cml0ZShgWyR7dGVybS5mYy55ZWxsb3d9IFdBUk4gJHt0ZXJtLm1jLnJlc2V0QWxsfV0gJHtzZXJ2aWNlLm5hbWV9IGlzIGFscmVhZHkgcnVubmluZyAuLi5gKTtcblx0XHRcdFx0XHRcdHNlcnZpY2VTdGFydFJlc29sdmVyKCk7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHNydi5zZXR1cD8ub25TdGFydCkge1xuXHRcdFx0XHRcdFx0cHJvY2Vzcy5lbnYgPSB7XG5cdFx0XHRcdFx0XHRcdC4uLmVudnMsXG5cdFx0XHRcdFx0XHRcdFBPTDogYF9fUE9MX18ke3NlcnZpY2UubmFtZX1fXyR7cG9sLmdldE5hbm9TZWNUaW1lKCl9X19QT0xfX2Bcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRsb2dnZXIud3JpdGUoYFske3Rlcm0uZmMuZ3JlZW59ICBPSyAgJHt0ZXJtLm1jLnJlc2V0QWxsfV0gc3RhcnQgJHtzZXJ2aWNlLm5hbWV9IC4uLmApO1xuXHRcdFx0XHRcdFx0c3J2LnNldHVwLm9uU3RhcnQoc3J2LnNldHVwLnNzT25TdGFydCkudGhlbigoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE8gaGFuZGxlIHJlc3RhcnRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETyBoYW5kbGUgaWYgaGFzIHByZSBzdGFydGVkIGNsaVxuXHRcdFx0XHRcdFx0XHRwb2wuc3RhcnRSdW5DaGVja2VyKHNlcnZpY2UubmFtZSwgJ2FmdGVyJywgJ29uU3RhcnQnLCAnc3RhcnRlZCcsIGxvZ0ZpbGUpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRwb2wuc3RhcnRSdW5DaGVja2VyKHNlcnZpY2UubmFtZSwgJ2JlZm9yZScsICdvblN0YXJ0JywgJ3N0YXJ0ZWQnLCBsb2dnZXIsIHNlcnZpY2VTdGFydFJlc29sdmVyKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VydmljZVN0YXJ0UmVzb2x2ZXIoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdFx0bG9nZ2VyLndyaXRlKGBbJHt0ZXJtLmZjLnJlZH1GQUlMRUQke3Rlcm0ubWMucmVzZXRBbGx9XSBzdGFydCAke3NlcnZpY2UubmFtZX0gLi4uYCk7XG5cdFx0XHRcdFx0bG9nZ2VyLndyaXRlKGAgICAgICAgICR7KGVycm9yIGFzIEVycm9yKS5zdGFja31gKTtcblx0XHRcdFx0XHRwb2wuZ2V0KHNlcnZpY2UubmFtZSk/LnN0YXJ0UmVzb2x2ZXI/LigpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRQcm9taXNlLmFsbChwcm9taXNlQWxsU2VydmljZSkudGhlbigoKSA9PiB7XG5cdFx0XHRcdHJlc29sdmUodHJ1ZSk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIHN0b3AgcHJvY2VzcyBpbXBsZW1lbnRhdGlvblxuXHRjb25zdCBzdG9wID0gYXN5bmMgKHNlcnZpY2VOYW1lOiBzdHJpbmcgfCBudWxsLCBsb2dnZXI6IFBPTF9MT0dHRVIgfCBuZXQuU29ja2V0LCBmb3JjZT86IGJvb2xlYW4pID0+IHtcblx0XHRpZiAoIXBvbC5nZXRTZXJ2aWNlcygpLnNvbWUocyA9PiBzLm5hbWUgPT09IHNlcnZpY2VOYW1lIHx8IHNlcnZpY2VOYW1lID09PSAnLS1hbGwnKSkge1xuXHRcdFx0bG9nZ2VyLndyaXRlKFBPU1NJQkxFX09QVElPTlNfTVNHKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKCFwb2wuZ2V0QWxsUnVubmluZygpLnNvbWUocyA9PiBzLm5hbWUgPT09IHNlcnZpY2VOYW1lKSAmJiBzZXJ2aWNlTmFtZSAhPT0gJy0tYWxsJykge1xuXHRcdFx0bG9nZ2VyLndyaXRlKGBbJHt0ZXJtLmZjLnllbGxvd30gV0FSTiAke3Rlcm0ubWMucmVzZXRBbGx9XSAke3NlcnZpY2VOYW1lfSBpcyBhbHJlYWR5IHN0b3BwZWQgLi4uYCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGNvbnN0IHN0b3BwZWRTZXJ2aWNlcyA9IHBvbC5nZXRBbGxTdG9wcGVkKCkubWFwKHMgPT4geyByZXR1cm4geyBuYW1lOiBzLm5hbWUgfSB9KTtcblx0XHRpZiAoc2VydmljZU5hbWUgPT09ICctLWFsbCcpIHtcblx0XHRcdGZvciAoY29uc3Qgc3J2IG9mIHBvbC5nZXRTZXJ2aWNlcygpKSB7XG5cdFx0XHRcdHBvbC5zZXRTdGF0ZURvd24oc3J2Lm5hbWUpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRwb2wuc2V0U3RhdGVEb3duKHNlcnZpY2VOYW1lISk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcHJvbWlzZUFsbFNlcnZpY2U6IFByb21pc2U8YW55PltdID0gW107XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlOiBQT0xfQ0xCX01FVEhPRCkgPT4ge1xuXHRcdFx0Zm9yIChjb25zdCBzcnYgb2YgcG9sLmdldEFsbFJ1bm5pbmcoKSkge1xuXHRcdFx0XHRpZiAoc2VydmljZU5hbWUgPT09ICctLWFsbCcgfHwgc2VydmljZU5hbWUgPT09IHNydi5uYW1lKSB7XG5cdFx0XHRcdFx0bGV0IHNlcnZpY2VTdG9wUmVzb2x2ZXI6IFBPTF9DTEJfTUVUSE9EID0gKCkgPT4geyB9LFxuXHRcdFx0XHRcdFx0cHJlU3RvcFJlc29sdmVyOiBQT0xfQ0xCX01FVEhPRCA9ICgpID0+IHsgfSxcblx0XHRcdFx0XHRcdHBvc3RTdG9wUmVzb2x2ZXI6IFBPTF9DTEJfTUVUSE9EID0gKCkgPT4geyB9O1xuXHRcdFx0XHRcdGNvbnN0IHByb21pc2VBbGxQcmVQb3N0U3RvcERvbmUgPSBbXG5cdFx0XHRcdFx0XHRuZXcgUHJvbWlzZShyID0+IHByZVN0b3BSZXNvbHZlciA9IHIpLFxuXHRcdFx0XHRcdFx0bmV3IFByb21pc2UociA9PiBwb3N0U3RvcFJlc29sdmVyID0gcildO1xuXG5cdFx0XHRcdFx0Y29uc3QgX3N0b3AgPSBhc3luYyAoc2VydmljZTogU0VSVklDRV9ERUYpID0+IHtcblx0XHRcdFx0XHRcdGNvbnN0IHBlbmRpbmdQcm9taXNlcyA9IFtcblx0XHRcdFx0XHRcdFx0Li4uT2JqZWN0LnZhbHVlcyhzZXJ2aWNlLmNsaS5iZWZvcmVfb25TdGFydCkubWFwKHMgPT4gcy5wcm9taXNlKSxcblx0XHRcdFx0XHRcdFx0Li4uT2JqZWN0LnZhbHVlcyhzZXJ2aWNlLmNsaS5hZnRlcl9vblN0YXJ0KS5tYXAocyA9PiBzLnByb21pc2UpLFxuXHRcdFx0XHRcdFx0XHQuLi5PYmplY3QudmFsdWVzKHNlcnZpY2UuY2xpLmJlZm9yZV9vbkxvZ2luKS5tYXAocyA9PiBzLnByb21pc2UpLFxuXHRcdFx0XHRcdFx0XHQuLi5PYmplY3QudmFsdWVzKHNlcnZpY2UuY2xpLmFmdGVyX29uTG9naW4pLm1hcChzID0+IHMucHJvbWlzZSksXG5cdFx0XHRcdFx0XHRcdHNlcnZpY2UuZXhlYy5vblN0YXJ0Py5wcm9taXNlLFxuXHRcdFx0XHRcdFx0XHRzZXJ2aWNlLmV4ZWMub25Mb2dpbj8ucHJvbWlzZSxcblx0XHRcdFx0XHRcdF07XG5cdFx0XHRcdFx0XHRsZXQgc3J2ID0gXCJcIjtcblx0XHRcdFx0XHRcdHBvbC5zdG9wUnVuQ2hlY2tlcihzZXJ2aWNlLm5hbWUsICdTdGFydCcpO1xuXHRcdFx0XHRcdFx0Zm9yIChjb25zdCBwIG9mIHNlcnZpY2UucHJvY2Vzc2VzKSB7XG5cdFx0XHRcdFx0XHRcdGxldCBoZWFkTXNnID0gVEFTS19JTkRFTlQ7XG5cdFx0XHRcdFx0XHRcdGlmIChzcnYgIT09IHNlcnZpY2UubmFtZSkge1xuXHRcdFx0XHRcdFx0XHRcdHNydiA9IHNlcnZpY2UubmFtZTtcblx0XHRcdFx0XHRcdFx0XHRoZWFkTXNnID0gYFske3Rlcm0uZmMuZ3JlZW59IFNUT1AgJHt0ZXJtLm1jLnJlc2V0QWxsfV1gO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGtpbGwgPSBmb3JjZSA/IFsna2lsbCcsICctOScsIHAucHJvY0lkXSA6IFsna2lsbCcsIHAucHJvY0lkXTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgeyBjIH0gPSBhd2FpdCBjbGlTcGxpdEJ5TGluZSguLi5raWxsKTtcblx0XHRcdFx0XHRcdFx0aWYgKGMgPT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdGxvZ2dlci53cml0ZShgJHtoZWFkTXNnfSAke3NlcnZpY2UubmFtZX0gc2VydmljZSB3aXRoIHByb2MvcGlkWyR7cC5wcm9jTmFtZX0vJHtwLnByb2NJZH1dIC4uLmApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRhd2FpdCBQcm9taXNlLmFsbChwZW5kaW5nUHJvbWlzZXMpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHByb21pc2VBbGxTZXJ2aWNlLnB1c2gobmV3IFByb21pc2UociA9PiAoc2VydmljZVN0b3BSZXNvbHZlciBhcyBhbnkpID0gcikpO1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRpZiAoc3J2LnNldHVwPy5vblN0b3ApIHtcblx0XHRcdFx0XHRcdFx0c3J2LnNldHVwLnNzT25TdG9wLnN0b3BBbGwgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVE9ETyBoYW5kbGUgaWYgaGFzIHByZSBzdGFydGVkIGNsaVxuXHRcdFx0XHRcdFx0XHRcdGF3YWl0IF9zdG9wKHNydik7XG5cdFx0XHRcdFx0XHRcdFx0cG9sLnNldFN0YXRlU3RvcChzcnYubmFtZSk7XG5cdFx0XHRcdFx0XHRcdFx0cG9sLnN0YXJ0UnVuQ2hlY2tlcihzcnYubmFtZSwgJ2FmdGVyJywgJ29uU3RvcCcsICdzdG9wcGVkJywgbG9nZ2VyLCBwb3N0U3RvcFJlc29sdmVyKTtcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdFx0c3J2LnNldHVwLm9uU3RvcChzcnYuc2V0dXAuc3NPblN0b3ApO1xuXHRcdFx0XHRcdFx0XHRwb2wuc3RhcnRSdW5DaGVja2VyKHNydi5uYW1lLCAnYmVmb3JlJywgJ29uU3RvcCcsICdzdG9wcGVkJywgbG9nZ2VyLCBwcmVTdG9wUmVzb2x2ZXIpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0YXdhaXQgX3N0b3Aoc3J2KTtcblx0XHRcdFx0XHRcdFx0cHJlU3RvcFJlc29sdmVyKCk7IHBvc3RTdG9wUmVzb2x2ZXIoKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0UHJvbWlzZS5hbGwocHJvbWlzZUFsbFByZVBvc3RTdG9wRG9uZSkudGhlbigoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdHNlcnZpY2VTdG9wUmVzb2x2ZXIoKTtcblx0XHRcdFx0XHRcdFx0Ly8gc2V0IHJlYWR5IHN0YXRlIGZvciB0aGUgbmV4dCBjaXJjbGVcblx0XHRcdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0cG9sLnNldFN0YXRlUmVhZHkoc3J2Lm5hbWUpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRsb2dnZXIud3JpdGUoYFske3Rlcm0uZmMucmVkfUZBSUxFRCR7dGVybS5tYy5yZXNldEFsbH1dIHN0b3AgJHtzcnYubmFtZX0gLi4uYCk7XG5cdFx0XHRcdFx0XHRzZXJ2aWNlU3RvcFJlc29sdmVyKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoc2VydmljZU5hbWUgPT09ICctLWFsbCcpIHtcblx0XHRcdFx0Zm9yIChjb25zdCBzIG9mIHN0b3BwZWRTZXJ2aWNlcykge1xuXHRcdFx0XHRcdGxvZ2dlci53cml0ZShgWyR7dGVybS5mYy55ZWxsb3d9IFdBUk4gJHt0ZXJtLm1jLnJlc2V0QWxsfV0gJHtzLm5hbWV9IGlzIGFscmVhZHkgc3RvcHBlZCAuLi5gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0UHJvbWlzZS5hbGwocHJvbWlzZUFsbFNlcnZpY2UpLnRoZW4oKCkgPT4ge1xuXHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdGxldCBSVU5OSU5HID0gdHJ1ZTtcblx0cHJvY2Vzcy5vbihcIlNJR0lOVFwiLCBhc3luYyAoKSA9PiB7XG5cdFx0aWYgKFJVTk5JTkcpIHtcblx0XHRcdFJVTk5JTkcgPSBmYWxzZTtcblx0XHRcdGF3YWl0IGxvb2t1cCgpO1xuXHRcdFx0YXdhaXQgc3RvcChcIi0tYWxsXCIsIGxvZyk7XG5cdFx0XHRzZXJ2ZXJDbGVhbnVwKCk7XG5cdFx0fVxuXHR9KTtcblxuXHRzd2l0Y2ggKGFyZ3YuX1swXSkge1xuXHRcdGNhc2UgU2VydmVyQ29tbWFuZC5ib290OlxuXHRcdFx0YXdhaXQgbG9va3VwKCk7XG5cdFx0XHRpZiAocG9sLnJ1bm5pbmcpIHtcblx0XHRcdFx0bG9nLmxvZyhQT0xfREFFTU9OX1JVTk5JTkdfTVNHKTtcblx0XHRcdFx0cHJvY2Vzcy5leGl0KDEpO1xuXHRcdFx0fVxuXHRcdFx0YXdhaXQgc2VydmVyQ3JlYXRlKGFzeW5jIChtc2c6IG1pbmltaXN0LlBhcnNlZEFyZ3MsIHNvY2tldDogbmV0LlNvY2tldCkgPT4ge1xuXG5cdFx0XHRcdHN3aXRjaCAobXNnLl9bMF0pIHtcblx0XHRcdFx0XHRjYXNlIENsaWVudENvbW1hbmQuZGFlbW9uOlxuXHRcdFx0XHRcdFx0aWYgKCFtc2cuXy5sZW5ndGggfHwgKG1zZy5fLmxlbmd0aCA8IDIpKSB7XG5cdFx0XHRcdFx0XHRcdHNvY2tldC53cml0ZShQT1NTSUJMRV9PUFRJT05TX01TRyk7XG5cdFx0XHRcdFx0XHRcdHNvY2tldC5lbmQoKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHN3aXRjaCAobXNnLl9bMV0pIHtcblx0XHRcdFx0XHRcdFx0XHRjYXNlIFwic2h1dGRvd25cIjpcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGxvZ2dlcjogUE9MX0xPR0dFUiA9IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyOiAoKSA9PiB7IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHdhcm46ICgpID0+IHsgfSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0bG9nOiAoKSA9PiB7IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHdyaXRlOiAobXNnOiBzdHJpbmcpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRsb2cud3JpdGUobXNnKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzb2NrZXQud3JpdGUobXNnKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZW5kOiAoKSA9PiB7IH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdFx0XHRhd2FpdCBsb29rdXAoKTtcblx0XHRcdFx0XHRcdFx0XHRcdGF3YWl0IHN0b3AoXCItLWFsbFwiLCBsb2dnZXIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0c29ja2V0LmVuZCgpO1xuXHRcdFx0XHRcdFx0XHRcdFx0c2VydmVyQ2xlYW51cCgpO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgQ2xpZW50Q29tbWFuZC5zdG9wOlxuXHRcdFx0XHRcdFx0aWYgKCFtc2cuXy5sZW5ndGggfHwgKG1zZy5fLmxlbmd0aCA8IDIgJiYgIW1zZy5hbGwpKSB7XG5cdFx0XHRcdFx0XHRcdHNvY2tldC53cml0ZShQT1NTSUJMRV9PUFRJT05TX01TRyk7XG5cdFx0XHRcdFx0XHRcdHNvY2tldC5lbmQoKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGF3YWl0IGxvb2t1cCgpO1xuXHRcdFx0XHRcdFx0XHRhd2FpdCBzdG9wKG1zZy5fWzFdID8gbXNnLl9bMV0gOiBtc2cuYWxsID8gXCItLWFsbFwiIDogbnVsbCwgc29ja2V0LCBtc2cuZm9yY2UpO1xuXHRcdFx0XHRcdFx0XHRzb2NrZXQuZW5kKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIENsaWVudENvbW1hbmQuc3RhcnQ6XG5cdFx0XHRcdFx0XHRpZiAoIW1zZy5fLmxlbmd0aCB8fCAobXNnLl8ubGVuZ3RoIDwgMiAmJiAhbXNnLmFsbCkpIHtcblx0XHRcdFx0XHRcdFx0c29ja2V0LndyaXRlKFBPU1NJQkxFX09QVElPTlNfTVNHKTtcblx0XHRcdFx0XHRcdFx0c29ja2V0LmVuZCgpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0YXdhaXQgbG9va3VwKCk7XG5cdFx0XHRcdFx0XHRcdGF3YWl0IHN0YXJ0KG1zZy5fWzFdID8gbXNnLl9bMV0gOiBtc2cuYWxsID8gXCItLWFsbFwiIDogbnVsbCwgc29ja2V0KTtcblx0XHRcdFx0XHRcdFx0c29ja2V0LmVuZCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBDbGllbnRDb21tYW5kLnJlc3RhcnQ6XG5cdFx0XHRcdFx0XHRpZiAoIW1zZy5fLmxlbmd0aCB8fCAobXNnLl8ubGVuZ3RoIDwgMiAmJiAhbXNnLmFsbCkpIHtcblx0XHRcdFx0XHRcdFx0c29ja2V0LndyaXRlKFBPU1NJQkxFX09QVElPTlNfTVNHKTtcblx0XHRcdFx0XHRcdFx0c29ja2V0LmVuZCgpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0YXdhaXQgbG9va3VwKCk7XG5cdFx0XHRcdFx0XHRcdGF3YWl0IHN0b3AobXNnLl9bMV0gPyBtc2cuX1sxXSA6IG1zZy5hbGwgPyBcIi0tYWxsXCIgOiBudWxsLCBzb2NrZXQsIG1zZy5mb3JjZSk7XG5cdFx0XHRcdFx0XHRcdHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGF3YWl0IHN0YXJ0KG1zZy5fWzFdID8gbXNnLl9bMV0gOiBtc2cuYWxsID8gXCItLWFsbFwiIDogbnVsbCwgc29ja2V0KTtcblx0XHRcdFx0XHRcdFx0XHRzb2NrZXQuZW5kKCk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBDbGllbnRDb21tYW5kLnBzOlxuXHRcdFx0XHRcdFx0YXdhaXQgbG9va3VwKCk7XG5cdFx0XHRcdFx0XHRsZXQgc3J2TmFtZSA9IFwiXCI7XG5cdFx0XHRcdFx0XHRmb3IgKGNvbnN0IHNydiBvZiBwb2wuZ2V0QWxsUnVubmluZygpKSB7XG5cdFx0XHRcdFx0XHRcdGZvciAoY29uc3QgcHJvYyBvZiBzcnYucHJvY2Vzc2VzKSB7XG5cdFx0XHRcdFx0XHRcdFx0bGV0IGhlYWRNc2cgPSBUQVNLX0lOREVOVDtcblx0XHRcdFx0XHRcdFx0XHRpZiAoc3J2TmFtZSAhPT0gc3J2Lm5hbWUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHNydk5hbWUgPSBzcnYubmFtZTtcblx0XHRcdFx0XHRcdFx0XHRcdGhlYWRNc2cgPSBgWyR7dGVybS5mYy5ncmVlbn0gUlVOICR7dGVybS5tYy5yZXNldEFsbH1dIGA7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHNvY2tldC53cml0ZShgJHtoZWFkTXNnfSAgJHtzcnYubmFtZX0gc2VydmljZSB3aXRoIHByb2MvcGlkWyR7cHJvYy5wcm9jTmFtZX0vJHtwcm9jLnByb2NJZH1dIC4uLlxcbmApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAobXNnLmFsbCkge1xuXHRcdFx0XHRcdFx0XHRmb3IgKGNvbnN0IHMgb2YgcG9sLmdldEFsbFN0b3BwZWQoKSkge1xuXHRcdFx0XHRcdFx0XHRcdHNvY2tldC53cml0ZShgWyR7dGVybS5mYy55ZWxsb3d9IFNUT1AgJHt0ZXJtLm1jLnJlc2V0QWxsfV0gJHtzLm5hbWV9IHNlcnZpY2UgLi4uYCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHNvY2tldC5lbmQoKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdGF3YWl0IHN0YXJ0KFwiLS1hbGxcIiwgbG9nKTtcblx0XHRcdGlmIChwb2wuZ2V0TG9naW5TZXJ2aWNlKCkpIHtcblx0XHRcdFx0Y29uc3QgbG9nb3V0ID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdC8vIG9ubHkgc3RvcCBwcm9jZXNzIGlmIHRoZXJlIHdhcyBsb2dpblxuXHRcdFx0XHRcdGF3YWl0IGxvb2t1cCgpO1xuXHRcdFx0XHRcdGF3YWl0IHN0b3AoXCItLWFsbFwiLCBsb2cpO1xuXHRcdFx0XHRcdHNlcnZlckNsZWFudXAoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocG9sLmlzU3RhdGVBZnRlckRvd24ocG9sLmdldExvZ2luU2VydmljZSgpPy5uYW1lISkpXG5cdFx0XHRcdFx0YXdhaXQgbG9nb3V0KCk7XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdHByb2Nlc3MuZW52ID0ge1xuXHRcdFx0XHRcdFx0Li4uZW52cyxcblx0XHRcdFx0XHRcdFBPTDogYF9fUE9MX18ke3BvbC5nZXRMb2dpblNlcnZpY2UoKT8ubmFtZX1fXyR7cG9sLmdldE5hbm9TZWNUaW1lKCl9X19QT0xfX2Bcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdHBvbC5nZXRMb2dpblNlcnZpY2UoKT8uc2V0dXA/Lm9uTG9naW4/Lihwb2wuZ2V0TG9naW5TZXJ2aWNlKCk/LnNldHVwPy5zc09uTG9naW4hKS50aGVuKGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRcdGlmIChwb2wuZ2V0TG9naW5TZXJ2aWNlKCk/LmV4ZWMub25Mb2dpbikge1xuXHRcdFx0XHRcdFx0XHRwb2wuZ2V0TG9naW5TZXJ2aWNlKCk/LmV4ZWM/Lm9uTG9naW4/LnByb21pc2U/LnRoZW4oYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGF3YWl0IGxvZ291dCgpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGF3YWl0IGxvZ291dCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0aGVscCgpO1xuXHRcdFx0YnJlYWs7XG5cdH1cblxufVxuIiwiXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IG1pbmltaXN0IGZyb20gJ21pbmltaXN0JztcbmltcG9ydCBuZXQgZnJvbSAnbmV0JztcbmltcG9ydCB7IGxvZywgbXNnVG9Mb2cgfSBmcm9tICcuL2xvZ2dlcic7XG5cbmNvbnN0IGNvbm5lY3Rpb25zOiB7XG4gICAgW25hbWU6IHN0cmluZ106IG5ldC5Tb2NrZXRcblxufSA9IHt9O1xuY29uc3QgdG9Mb2cgPSAobXNnOiBzdHJpbmcpID0+IHsgbXNnVG9Mb2cobXNnLCAncG9sICAgJykgfVxudmFyIHNlcnZlcjogbmV0LlNlcnZlciwgY2xpZW50OiBuZXQuU29ja2V0O1xuXG4vLyBwcmV2ZW50IGR1cGxpY2F0ZSBleGl0IG1lc3NhZ2VzXG52YXIgU0hVVERPV04gPSBmYWxzZTtcblxuLy8gT3VyIHNvY2tldFxuY29uc3QgU09DS0VUX0ZJTEUgPSAnL3RtcC9wb2wuc29jayc7XG5cbmZ1bmN0aW9uIF9zZXJ2ZXJDcmVhdGUoc29ja2V0OiBzdHJpbmcsIG9uTXNnID0gYXN5bmMgKG1zZzogbWluaW1pc3QuUGFyc2VkQXJncywgc3RyZWFtOiBuZXQuU29ja2V0KSA9PiB7IH0pIHtcbiAgICB0b0xvZygnU29ja2V0IHNlcnZlcjogY3JlYXRpbmcnKTtcbiAgICBsZXQgc29jaztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSkgPT4ge1xuICAgICAgICBzZXJ2ZXIgPSBuZXQuY3JlYXRlU2VydmVyKGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgICAgICAgICAgIHRvTG9nKCdTb2NrZXQgc2VydmVyOiBjb25uZWN0aW9uIGFja25vd2xlZGdlZCcpO1xuICAgICAgICAgICAgLy8gU3RvcmUgYWxsIGNvbm5lY3Rpb25zIHNvIHdlIGNhbiB0ZXJtaW5hdGUgdGhlbSBpZiB0aGUgc2VydmVyIGNsb3Nlcy5cbiAgICAgICAgICAgIC8vIEFuIG9iamVjdCBpcyBiZXR0ZXIgdGhhbiBhbiBhcnJheSBmb3IgdGhlc2UuXG4gICAgICAgICAgICB2YXIgc2VsZiA9IChEYXRlLm5vdygpKS50b1N0cmluZygpO1xuICAgICAgICAgICAgY29ubmVjdGlvbnNbc2VsZl0gPSBzdHJlYW07XG4gICAgICAgICAgICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0b0xvZygnU29ja2V0IHNlcnZlcjogY2xpZW50IGRpc2Nvbm5lY3RlZCcpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25uZWN0aW9uc1tzZWxmXTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBNZXNzYWdlcyBhcmUgYnVmZmVycy4gdXNlIHRvU3RyaW5nXG4gICAgICAgICAgICBzdHJlYW0ub24oJ2RhdGEnLCBhc3luYyAobXNnOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBfbXNnOiBtaW5pbWlzdC5QYXJzZWRBcmdzID0gSlNPTi5wYXJzZShtc2cudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgb25Nc2coX21zZywgY29ubmVjdGlvbnNbc2VsZl0pO1xuICAgICAgICAgICAgICAgIC8vIHN0cmVhbS53cml0ZSgncXV4Jyk7IC8vIG5lZWQgdG8gYmUgY2FsbCBpbiBwbGFjZSwgY2FuIG5vdCByZWZlcmVuY2UgdG8gd3JpdGUgZnVuY3Rpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3RyZWFtLm9uKCdlcnJvcicsIGFzeW5jIChleGM6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25uZWN0aW9uc1tzZWxmXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KS5saXN0ZW4oc29ja2V0LCAoKT0+e1xuICAgICAgICAgICAgZnMuY2htb2RTeW5jKHNvY2tldCwgJzc3NycpO1xuICAgICAgICB9KS5vbignY29ubmVjdGlvbicsIGZ1bmN0aW9uIChfc29ja2V0KSB7XG4gICAgICAgICAgICB0b0xvZygnU29ja2V0IHNlcnZlcjogY2xpZW50IGNvbm5lY3RlZCcpO1xuICAgICAgICAgICAgc29jayA9IF9zb2NrZXQ7XG4gICAgICAgICAgICAvLyBfc29ja2V0LndyaXRlKCdfX2Jvb3AnKTsvLyBzZW5kIHRvIGNsaWVudCBpbW1lZGlhdGVseSBhZnRlciBjb25uZWN0XG4gICAgICAgIH0pO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBjb25zdCBzZXJ2ZXJDbGVhbnVwID0gKCkgPT4ge1xuICAgIGlmICghU0hVVERPV04gJiYgc2VydmVyKSB7XG4gICAgICAgIFNIVVRET1dOID0gdHJ1ZTtcbiAgICAgICAgdG9Mb2coXCJTb2NrZXQgc2VydmVyOiB0ZXJtaW5hdGluZ1wiKTtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKGNvbm5lY3Rpb25zKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCBjbGllbnRzID0gT2JqZWN0LmtleXMoY29ubmVjdGlvbnMpO1xuICAgICAgICAgICAgd2hpbGUgKGNsaWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNsaWVudCA9IGNsaWVudHMucG9wKCkgYXMgc3RyaW5nO1xuICAgICAgICAgICAgICAgIC8vY29ubmVjdGlvbnNbY2xpZW50XS53cml0ZSgnX19kaXNjb25uZWN0Jyk7IC8vIHNlbmQgdG8gY2xpZW50IGltbWVkaWF0ZWx5IGJlZm9yZSBkaXNjb25uZWN0XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbnNbY2xpZW50XS5lbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZXJ2ZXIuY2xvc2UoKTtcbiAgICB9XG59XG5leHBvcnQgY29uc3Qgc2VydmVyQ3JlYXRlID0gYXN5bmMgKG9uTXNnID0gYXN5bmMgKG1zZzogbWluaW1pc3QuUGFyc2VkQXJncywgc3RyZWFtOiBuZXQuU29ja2V0KSA9PiB7IH0pID0+IHtcbiAgICAvLyBjaGVjayBmb3IgZmFpbGVkIGNsZWFudXBcbiAgICB0b0xvZygnU29ja2V0IHNlcnZlcjogY2hlY2tpbmcgZm9yIGxlZnRvdmVyIHNvY2tldCcpO1xuXG4gICAgaWYgKGZzLmV4aXN0c1N5bmMoU09DS0VUX0ZJTEUpKSB7XG4gICAgICAgIHRvTG9nKCdTb2NrZXQgc2VydmVyOiByZW1vdmluZyBsZWZ0b3ZlciBzb2NrZXQuJyk7XG4gICAgICAgIGZzLnVubGlua1N5bmMoU09DS0VUX0ZJTEUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRvTG9nKCdTb2NrZXQgc2VydmVyOiBubyBsZWZ0b3ZlciBzb2NrZXQgZm91bmQuJyk7XG4gICAgfVxuICAgIC8vIGNsb3NlIGFsbCBjb25uZWN0aW9ucyB3aGVuIHRoZSB1c2VyIGRvZXMgQ1RSTC1DXG4gICAgcHJvY2Vzcy5vbignZXhpdCcsIHNlcnZlckNsZWFudXApO1xuICAgIHJldHVybiBfc2VydmVyQ3JlYXRlKFNPQ0tFVF9GSUxFLCBvbk1zZyk7XG59XG5cblxuZXhwb3J0IGNvbnN0IGNsaWVudENsZWFudXAgPSAoKSA9PiB7XG4gICAgaWYgKCFTSFVURE9XTiAmJiBjbGllbnQpIHtcbiAgICAgICAgU0hVVERPV04gPSB0cnVlO1xuICAgICAgICAvLyBsb2cubG9nKFwiU29ja2V0IGNsaWVudDogVGVybWluYXRpbmcuXCIpO1xuICAgICAgICBjbGllbnQuZW5kKCk7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgY2xpZW50Q3JlYXRlID0gKCkgPT4ge1xuICAgIC8vIENvbm5lY3QgdG8gc2VydmVyLlxuICAgIC8vIGxvZy5sb2coXCJTb2NrZXQgY2xpZW50OiBjb25uZWN0aW5nIHRvIHNlcnZlclwiKTtcbiAgICBwcm9jZXNzLm9uKCdleGl0JywgY2xpZW50Q2xlYW51cCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPG5ldC5Tb2NrZXQ+KChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGNsaWVudCA9IG5ldC5jcmVhdGVDb25uZWN0aW9uKFNPQ0tFVF9GSUxFKVxuICAgICAgICAgICAgLm9uKCdjb25uZWN0JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGxvZy5sb2coXCJTb2NrZXQgY2xpZW50OiBjb25uZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShjbGllbnQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC8vIE1lc3NhZ2VzIGFyZSBidWZmZXJzLiB1c2UgdG9TdHJpbmdcbiAgICAgICAgICAgIC5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhOiBCdWZmZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhU3RyID0gZGF0YS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGxvZy5sb2coZGF0YVN0cik7XG4gICAgICAgICAgICAgICAgLy8gaWYgKGRhdGEgPT09ICdfX2Jvb3AnKSB7XG4gICAgICAgICAgICAgICAgLy8gICAgIGNsaWVudC53cml0ZSgnX19zbm9vdGJvb3BlZCcpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignZXJyb3InLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGxvZy5sb2coJ3BvbCBkYWVtb24gbm90IHJ1bm5pbmcuIHJ1biBgcG9sIGJvb3RgIGZpcnN0IScsIGRhdGEpOyBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgICAgICB9KS5vbignY2xvc2UnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIGxvZy5sb2coJ1NlcnZlciBjbG9zZWQuJyk7IHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH0pO1xuXG59IiwiaW1wb3J0IHsgc3Bhd24sIHNwYXduU3luYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuXG5cbmV4cG9ydCBjb25zdCBjbGlTcGxpdEJ5TGluZVN5bmMgPSBmdW5jdGlvbiAoLi4uYXJnczogYW55W10pIHtcbiAgICBjb25zdCBfY21kID0gWy4uLmFyZ3VtZW50c107XG5cbiAgICBjb25zdCBzcGF3bkNtZCA9IHNwYXduU3luYyhfY21kLnNoaWZ0KCksIFsuLi5fY21kXSk7XG4gICAgY29uc3QgX2xpbmVzID0gc3Bhd25DbWQuc3Rkb3V0LnRvU3RyaW5nKCkuc3BsaXQoJ1xcbicpLmZpbHRlcihsID0+IGwpO1xuXG4gICAgcmV0dXJuIHsgbzogX2xpbmVzLCBjOiBzcGF3bkNtZC5zdGF0dXMgfVxufTtcblxuZXhwb3J0IGNvbnN0IGNsaVNwbGl0QnlMaW5lID0gZnVuY3Rpb24gKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgY29uc3QgX2NtZCA9IFsuLi5hcmd1bWVudHNdO1xuXG4gICAgY29uc3Qgc3Bhd25DbWQgPSBzcGF3bihfY21kLnNoaWZ0KCksIFsuLi5fY21kXSk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHsgbzogc3RyaW5nW10sIGM6IG51bWJlciB9PihyZXMgPT4ge1xuICAgICAgICBsZXQgX291dCA9ICcnO1xuICAgICAgICBzcGF3bkNtZC5zdGRvdXQub24oJ2RhdGEnLCBkYXRhID0+IHtcbiAgICAgICAgICAgIF9vdXQgKz0gZGF0YTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNwYXduQ21kLnN0ZGVyci5vbignZGF0YScsIGRhdGEgPT4ge1xuICAgICAgICAgICAgX291dCArPSBkYXRhO1xuICAgICAgICB9KTtcbiAgICAgICAgc3Bhd25DbWQub24oJ2Nsb3NlJywgKGM6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgX2xpbmVzID0gX291dC5zcGxpdCgnXFxuJykuZmlsdGVyKGwgPT4gbCk7XG4gICAgICAgICAgICByZXMoeyBvOiBfbGluZXMsIGMgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcbiIsIi8vIHRlcm1pbmFsIGRlZmluaXRpb25cbmNvbnN0IHQgPSB7XG5cbiAgICAvLyB0ZXJtaW5hbCBzdGRvdXRcbiAgICBzdGRvdXQ6IHByb2Nlc3Muc3Rkb3V0LFxuXG4gICAgLyoqXG4gICAgICogcHJpbnQgZm9ybWF0XG4gICAgICovXG4gICAgcHJpbnQ6IGZ1bmN0aW9uIChzdHIgPSBcIlwiKSB7IHQuc3Rkb3V0LndyaXRlKHN0cik7IHJldHVybiB0OyB9LFxuXG4gICAgYm9sZDogZnVuY3Rpb24gKHN0cjogc3RyaW5nLCBjb2RlID0gXCJcIikgeyByZXR1cm4gdC5wcmludCh0Lm1jLmJvbGQgKyBjb2RlICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgaXRhbGljOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcsIGNvZGUgPSBcIlwiKSB7IHJldHVybiB0LnByaW50KHQubWMuaXRhbGljICsgY29kZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIHVuZGVybGluZTogZnVuY3Rpb24gKHN0cjogc3RyaW5nLCBjb2RlID0gXCJcIikgeyByZXR1cm4gdC5wcmludCh0Lm1jLnVuZGVybGluZSArIGNvZGUgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBpbnZlcnNlOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcsIGNvZGUgPSBcIlwiKSB7IHJldHVybiB0LnByaW50KHQubWMuaW52ZXJzZSArIGNvZGUgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBzdHJpa2U6IGZ1bmN0aW9uIChzdHI6IHN0cmluZywgY29kZSA9IFwiXCIpIHsgcmV0dXJuIHQucHJpbnQodC5tYy5zdHJpa2UgKyBjb2RlICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG5cblxuICAgIGRlZmF1bHRDb2xvcjogZnVuY3Rpb24gKHN0cjogc3RyaW5nKSB7IHJldHVybiB0LnByaW50KHQuZmMuZGVmYXVsdENvbG9yICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgYmxhY2s6IGZ1bmN0aW9uIChzdHI6IHN0cmluZykgeyByZXR1cm4gdC5wcmludCh0LmZjLmJsYWNrICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgcmVkOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpIHsgcmV0dXJuIHQucHJpbnQodC5mYy5yZWQgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBncmVlbjogZnVuY3Rpb24gKHN0cjogc3RyaW5nKSB7IHJldHVybiB0LnByaW50KHQuZmMuZ3JlZW4gKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICB5ZWxsb3c6IGZ1bmN0aW9uIChzdHI6IHN0cmluZykgeyByZXR1cm4gdC5wcmludCh0LmZjLnllbGxvdyArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJsdWU6IGZ1bmN0aW9uIChzdHI6IHN0cmluZykgeyByZXR1cm4gdC5wcmludCh0LmZjLmJsdWUgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBtYWdlbnRhOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpIHsgcmV0dXJuIHQucHJpbnQodC5mYy5tYWdlbnRhICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgY3lhbjogZnVuY3Rpb24gKHN0cjogc3RyaW5nKSB7IHJldHVybiB0LnByaW50KHQuZmMuY3lhbiArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIHdoaXRlOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpIHsgcmV0dXJuIHQucHJpbnQodC5mYy53aGl0ZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJyaWdodEJsYWNrOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpIHsgcmV0dXJuIHQucHJpbnQodC5mYy5icmlnaHRCbGFjayArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJyaWdodFJlZDogZnVuY3Rpb24gKHN0cjogc3RyaW5nKSB7IHJldHVybiB0LnByaW50KHQuZmMuYnJpZ2h0UmVkICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgYnJpZ2h0R3JlZW46IGZ1bmN0aW9uIChzdHI6IHN0cmluZykgeyByZXR1cm4gdC5wcmludCh0LmZjLmJyaWdodEdyZWVuICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgYnJpZ2h0WWVsbG93OiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpIHsgcmV0dXJuIHQucHJpbnQodC5mYy5icmlnaHRZZWxsb3cgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBicmlnaHRCbHVlOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpIHsgcmV0dXJuIHQucHJpbnQodC5mYy5icmlnaHRCbHVlICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgYnJpZ2h0TWFnZW50YTogZnVuY3Rpb24gKHN0cjogc3RyaW5nKSB7IHJldHVybiB0LnByaW50KHQuZmMuYnJpZ2h0TWFnZW50YSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJyaWdodEN5YW46IGZ1bmN0aW9uIChzdHI6IHN0cmluZykgeyByZXR1cm4gdC5wcmludCh0LmZjLmJyaWdodEN5YW4gKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBicmlnaHRXaGl0ZTogZnVuY3Rpb24gKHN0cjogc3RyaW5nKSB7IHJldHVybiB0LnByaW50KHQuZmMuYnJpZ2h0V2hpdGUgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBjdXN0b21Db2xvcjogZnVuY3Rpb24gKGNvZGVOdW1iZXI6IG51bWJlciwgc3RyOiBzdHJpbmcpIHsgY29uc3QgY29kZSA9IGlzTmFOKGNvZGVOdW1iZXIpID8gY29kZU51bWJlciA6IGBcXHgxYlszODs1OyR7Y29kZU51bWJlcn1tYDsgcmV0dXJuIHQucHJpbnQoY29kZSArIHN0ciArIHQubWMucmVzZXRBbGwpIH0sXG5cbiAgICBiZ0RlZmF1bHRDb2xvcjogZnVuY3Rpb24gKHN0cjogc3RyaW5nLCBmY0NvZGUgPSBcIlwiKSB7IHJldHVybiB0LnByaW50KHQuZmMuYnJpZ2h0V2hpdGUgKyBmY0NvZGUgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBiZ0JsYWNrOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcsIGZjQ29kZSA9IFwiXCIpIHsgcmV0dXJuIHQucHJpbnQodC5iYy5ibGFjayArIGZjQ29kZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJnUmVkOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcsIGZjQ29kZSA9IFwiXCIpIHsgcmV0dXJuIHQucHJpbnQodC5iYy5yZWQgKyBmY0NvZGUgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBiZ0dyZWVuOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcsIGZjQ29kZSA9IFwiXCIpIHsgcmV0dXJuIHQucHJpbnQodC5iYy5ncmVlbiArIGZjQ29kZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJnWWVsbG93OiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcsIGZjQ29kZSA9IFwiXCIpIHsgcmV0dXJuIHQucHJpbnQodC5iYy55ZWxsb3cgKyBmY0NvZGUgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBiZ0JsdWU6IGZ1bmN0aW9uIChzdHI6IHN0cmluZywgZmNDb2RlID0gXCJcIikgeyByZXR1cm4gdC5wcmludCh0LmJjLmJsdWUgKyBmY0NvZGUgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBiZ01hZ2VudGE6IGZ1bmN0aW9uIChzdHI6IHN0cmluZywgZmNDb2RlID0gXCJcIikgeyByZXR1cm4gdC5wcmludCh0LmJjLm1hZ2VudGEgKyBmY0NvZGUgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBiZ0N5YW46IGZ1bmN0aW9uIChzdHI6IHN0cmluZywgZmNDb2RlID0gXCJcIikgeyByZXR1cm4gdC5wcmludCh0LmJjLmN5YW4gKyBmY0NvZGUgKyBzdHIgKyB0Lm1jLnJlc2V0QWxsKTsgfSxcbiAgICBiZ1doaXRlOiBmdW5jdGlvbiAoc3RyOiBzdHJpbmcsIGZjQ29kZSA9IFwiXCIpIHsgcmV0dXJuIHQucHJpbnQodC5iYy53aGl0ZSArIGZjQ29kZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJnQnJpZ2h0QmxhY2s6IGZ1bmN0aW9uIChzdHI6IHN0cmluZywgZmNDb2RlID0gXCJcIikgeyByZXR1cm4gdC5wcmludCh0LmJjLmJyaWdodEJsYWNrICsgZmNDb2RlICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgYmdCcmlnaHRSZWQ6IGZ1bmN0aW9uIChzdHI6IHN0cmluZywgZmNDb2RlID0gXCJcIikgeyByZXR1cm4gdC5wcmludCh0LmJjLmJyaWdodFJlZCArIGZjQ29kZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJnQnJpZ2h0R3JlZW46IGZ1bmN0aW9uIChzdHI6IHN0cmluZywgZmNDb2RlID0gXCJcIikgeyByZXR1cm4gdC5wcmludCh0LmJjLmJyaWdodEdyZWVuICsgZmNDb2RlICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgYmdCcmlnaHRZZWxsb3c6IGZ1bmN0aW9uIChzdHI6IHN0cmluZywgZmNDb2RlID0gXCJcIikgeyByZXR1cm4gdC5wcmludCh0LmJjLmJyaWdodFllbGxvdyArIGZjQ29kZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJnQnJpZ2h0Qmx1ZTogZnVuY3Rpb24gKHN0cjogc3RyaW5nLCBmY0NvZGUgPSBcIlwiKSB7IHJldHVybiB0LnByaW50KHQuYmMuYnJpZ2h0Qmx1ZSArIGZjQ29kZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJnQnJpZ2h0TWFnZW50YTogZnVuY3Rpb24gKHN0cjogc3RyaW5nLCBmY0NvZGUgPSBcIlwiKSB7IHJldHVybiB0LnByaW50KHQuYmMuYnJpZ2h0TWFnZW50YSArIGZjQ29kZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJnQnJpZ2h0Q3lhbjogZnVuY3Rpb24gKHN0cjogc3RyaW5nLCBmY0NvZGUgPSBcIlwiKSB7IHJldHVybiB0LnByaW50KHQuYmMuYnJpZ2h0Q3lhbiArIGZjQ29kZSArIHN0ciArIHQubWMucmVzZXRBbGwpOyB9LFxuICAgIGJnQnJpZ2h0V2hpdGU6IGZ1bmN0aW9uIChzdHI6IHN0cmluZywgZmNDb2RlID0gXCJcIikgeyByZXR1cm4gdC5wcmludCh0LmJjLmJyaWdodFdoaXRlICsgZmNDb2RlICsgc3RyICsgdC5tYy5yZXNldEFsbCk7IH0sXG4gICAgY3VzdG9tQmdDb2xvcjogZnVuY3Rpb24gKGNvZGVOdW1iZXI6IG51bWJlciwgc3RyOiBzdHJpbmcsIGZjQ29kZSA9IFwiXCIpIHtcbiAgICAgICAgY29uc3QgY29kZSA9IGlzTmFOKGNvZGVOdW1iZXIpID8gKGNvZGVOdW1iZXIpLnRvU3RyaW5nKCkgOiBgXFx4MWJbNDg7NTske2NvZGVOdW1iZXJ9bWA7XG4gICAgICAgIGNvbnN0IGZDb2RlID0gaXNOYU4oY29kZU51bWJlcikgPyAoY29kZU51bWJlcikudG9TdHJpbmcoKSA6IGBcXHgxYlszODs1OyR7Y29kZU51bWJlcn1tYDtcbiAgICAgICAgcmV0dXJuIHQucHJpbnQoY29kZSArIGZDb2RlICsgc3RyICsgdC5tYy5yZXNldEFsbCk7XG4gICAgfSxcblxuICAgIC8vIG1vZGlmaWVyIGNvZGVzXG4gICAgbWM6IHtcbiAgICAgICAgcmVzZXRBbGw6ICdcXHgxYlswbVxceDFiWzM5bVxceDFiWzQ5bScsXG4gICAgICAgIGNsZWFyTGluZUN1cnNvclJpZ2h0OiBgXFx4MWJbS2AsXG4gICAgICAgIGNsZWFyTGluZTogYFxceDFiWzJLYCxcbiAgICAgICAgc3R5bGVSZXNldDogJ1xceDFiWzBtJyxcbiAgICAgICAgYm9sZDogJ1xceDFiWzFtJyxcbiAgICAgICAgaXRhbGljOiAnXFx4MWJbM20nLFxuICAgICAgICB1bmRlcmxpbmU6ICdcXHgxYls0bScsXG4gICAgICAgIGludmVyc2U6ICdcXHgxYls3bScsXG4gICAgICAgIHN0cmlrZTogJ1xceDFiWzltJyxcbiAgICAgICAgY3Vyc29ySGlkZTogYFxceDFiWz8yNWxgLFxuICAgICAgICBjdXJzb3JTaG93OiBgXFx4MWJbPzI1aGAsXG4gICAgfSxcblxuICAgIC8vIEZvcmVncm91bmQgY29sb3JcbiAgICBmYzoge1xuICAgICAgICBkZWZhdWx0Q29sb3I6ICdcXHgxYlszOW0nLFxuICAgICAgICBibGFjazogJ1xceDFiWzMwbScsXG4gICAgICAgIHJlZDogJ1xceDFiWzMxbScsXG4gICAgICAgIGdyZWVuOiAnXFx4MWJbMzJtJyxcbiAgICAgICAgeWVsbG93OiAnXFx4MWJbMzNtJyxcbiAgICAgICAgYmx1ZTogJ1xceDFiWzM0bScsXG4gICAgICAgIG1hZ2VudGE6ICdcXHgxYlszNW0nLFxuICAgICAgICBjeWFuOiAnXFx4MWJbMzZtJyxcbiAgICAgICAgd2hpdGU6ICdcXHgxYlszN20nLFxuICAgICAgICBicmlnaHRCbGFjazogJ1xceDFiWzkwbScsXG4gICAgICAgIGJyaWdodFJlZDogJ1xceDFiWzkxbScsXG4gICAgICAgIGJyaWdodEdyZWVuOiAnXFx4MWJbOTJtJyxcbiAgICAgICAgYnJpZ2h0WWVsbG93OiAnXFx4MWJbOTNtJyxcbiAgICAgICAgYnJpZ2h0Qmx1ZTogJ1xceDFiWzk0bScsXG4gICAgICAgIGJyaWdodE1hZ2VudGE6ICdcXHgxYls5NW0nLFxuICAgICAgICBicmlnaHRDeWFuOiAnXFx4MWJbOTZtJyxcbiAgICAgICAgYnJpZ2h0V2hpdGU6ICdcXHgxYls5N20nLFxuICAgICAgICBjdXN0b21Db2xvcjogZnVuY3Rpb24gKGNvZGU6IG51bWJlcikgeyByZXR1cm4gYFxceDFiWzM4OzU7JHtjb2RlfW1gOyB9LFxuICAgIH0sXG5cbiAgICAvLyBCYWNrZ3JvdW5kIGNvbG9yXG4gICAgYmM6IHtcbiAgICAgICAgZGVmYXVsdENvbG9yOiAnXFx4MWJbNDltJyxcbiAgICAgICAgYmxhY2s6ICdcXHgxYls0MG0nLFxuICAgICAgICByZWQ6ICdcXHgxYls0MW0nLFxuICAgICAgICBncmVlbjogJ1xceDFiWzQybScsXG4gICAgICAgIHllbGxvdzogJ1xceDFiWzQzbScsXG4gICAgICAgIGJsdWU6ICdcXHgxYls0NG0nLFxuICAgICAgICBtYWdlbnRhOiAnXFx4MWJbNDVtJyxcbiAgICAgICAgY3lhbjogJ1xceDFiWzQ2bScsXG4gICAgICAgIHdoaXRlOiAnXFx4MWJbNDdtJyxcbiAgICAgICAgYnJpZ2h0QmxhY2s6ICdcXHgxYlsxMDBtJyxcbiAgICAgICAgYnJpZ2h0UmVkOiAnXFx4MWJbMTAxbScsXG4gICAgICAgIGJyaWdodEdyZWVuOiAnXFx4MWJbMTAybScsXG4gICAgICAgIGJyaWdodFllbGxvdzogJ1xceDFiWzEwM20nLFxuICAgICAgICBicmlnaHRCbHVlOiAnXFx4MWJbMTA0bScsXG4gICAgICAgIGJyaWdodE1hZ2VudGE6ICdcXHgxYlsxMDVtJyxcbiAgICAgICAgYnJpZ2h0Q3lhbjogJ1xceDFiWzEwNm0nLFxuICAgICAgICBicmlnaHRXaGl0ZTogJ1xceDFiWzEwN20nLFxuICAgICAgICBjdXN0b21CZ0NvbG9yOiBmdW5jdGlvbiAoY29kZTogbnVtYmVyKSB7IHJldHVybiBgXFx4MWJbNDg7NTske2NvZGV9bWA7IH0sXG4gICAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHRlcm0gPSB0O1xuIiwiaW1wb3J0IHsgdGVybSB9IGZyb20gJy4vdGVybSc7XG5cbmNvbnN0IFVTQUdFID0ge1xuICAgIG5hbWU6ICdOQU1FXFxuJyxcbiAgICB1c2FnZTogJ1VTQUdFXFxuJyxcbiAgICBvcHRpb25zOiAnT1BUSU9OU1xcbicsXG4gICAgY29tbWFuZHM6ICdDT01NQU5EU1xcbicsXG4gICAgaW5kZW50OiAnICAgICcsXG4gICAgdHlwZUluZGVudDogJyAgICcsXG4gICAgb3B0aW9uSW5kZW50OiA0LFxuICAgIG1heFN3aXRjaExlbmd0aDogMjUsXG4gICAgaGVhZGVyOiAnXFxuJyxcbn1cblxuY29uc3QgX2dldCA9IChwcm9wID0gJycpID0+IHtcbiAgICByZXR1cm4gcHJvcCAhPT0gdW5kZWZpbmVkICYmIHByb3AubGVuZ3RoID8gcHJvcCA6IHVuZGVmaW5lZDtcbn1cblxuY29uc3QgX3ByaW50VGl0bGVzID0gKHRpdGxlOiBzdHJpbmcsIGluZm86IEFycmF5PGFueT4gPSBbXSwgYm9sZD86IGJvb2xlYW4pID0+IHtcbiAgICBpZiAoaW5mby5sZW5ndGggJiYgX2dldChpbmZvWzBdLm5hbWUpKSB7XG4gICAgICAgIHRlcm0ucHJpbnQodGVybS5tYy5ib2xkICsgVVNBR0UuaGVhZGVyICsgdGl0bGUpO1xuXG4gICAgICAgIGluZm8uZm9yRWFjaChpID0+IHtcbiAgICAgICAgICAgIHRlcm0ucHJpbnQodGVybS5tYy5yZXNldEFsbCk7XG5cbiAgICAgICAgICAgIGlmIChib2xkKSB0ZXJtLnByaW50KHRlcm0uZmMuYnJpZ2h0V2hpdGUgKyB0ZXJtLm1jLmJvbGQpO1xuICAgICAgICAgICAgdGVybS5wcmludChgJHtVU0FHRS5pbmRlbnQgKyBpLm5hbWV9YCk7XG4gICAgICAgICAgICBjb25zdCBkZXNjID0gX2dldChpLmRlc2MpO1xuICAgICAgICAgICAgaWYgKGRlc2MpIHtcbiAgICAgICAgICAgICAgICB0ZXJtLnByaW50KHRlcm0ubWMucmVzZXRBbGwpLnByaW50KGBcXG5gKTtcbiAgICAgICAgICAgICAgICB0ZXJtLnByaW50KGAke1VTQUdFLmluZGVudH0ke1VTQUdFLmluZGVudH0ke2Rlc2N9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXJtLnByaW50KHRlcm0ubWMucmVzZXRBbGwpLnByaW50KGBcXG5gKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG4vLyB0eXBlOiBbYm9vbGVhbnxzdHJpbmd8bnVtYmVyXVxuZXhwb3J0IGNvbnN0IHByaW50VXNhZ2UgPSAodSA9IHtcbiAgICBuYW1lOiAnJywgdXNhZ2U6IFt7IG5hbWU6ICcnLCBkZXNjOiAnJyB9XSwgb3B0aW9uczogW3sgc3dpdGNoOiAnJywgZGVzYzogJycsIHR5cGU6ICcnIH1dLFxuICAgIGNvbW1hbmRzOiBbeyBzd2l0Y2g6ICcnLCBkZXNjOiAnJyB9XSxcbiAgICBjb3B5cmlnaHQ6ICdjb3B5cmlnaHRAMjAyMCcsIHZlcnNpb246ICcwLjAuMSdcbn0pID0+IHtcbiAgICBfcHJpbnRUaXRsZXMoVVNBR0UubmFtZSwgW3sgbmFtZTogdS5uYW1lIH1dKTtcbiAgICBfcHJpbnRUaXRsZXMoVVNBR0UudXNhZ2UsIHUudXNhZ2UsIHRydWUpO1xuICAgIGlmICh1Lm9wdGlvbnMgJiYgdS5vcHRpb25zLmxlbmd0aCkge1xuICAgICAgICBsZXQgb3B0aW9uVGl0bGVQcmludGVkID0gZmFsc2U7XG4gICAgICAgIHUub3B0aW9ucy5mb3JFYWNoKG8gPT4ge1xuICAgICAgICAgICAgaWYgKG8uc3dpdGNoLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9uVGl0bGVQcmludGVkKSB7IG9wdGlvblRpdGxlUHJpbnRlZCA9IHRydWU7IHRlcm0ucHJpbnQodGVybS5tYy5ib2xkICsgVVNBR0UuaGVhZGVyICsgVVNBR0Uub3B0aW9ucyArIHRlcm0ubWMucmVzZXRBbGwpOyB9XG4gICAgICAgICAgICAgICAgdGVybS5wcmludChgJHt0ZXJtLmZjLmJyaWdodFdoaXRlICsgdGVybS5tYy5ib2xkfSR7VVNBR0UuaW5kZW50ICsgby5zd2l0Y2h9XFxuYCk7XG4gICAgICAgICAgICAgICAgdGVybS5wcmludChgJHt0ZXJtLm1jLnJlc2V0QWxsfSR7VVNBR0UuaW5kZW50fSR7VVNBR0UuaW5kZW50fSR7by5kZXNjfWApO1xuICAgICAgICAgICAgICAgIGlmIChvLnR5cGUpIHRlcm0ucHJpbnQoYCR7dGVybS5mYy5jeWFufSBbJHtvLnR5cGV9XWApO1xuICAgICAgICAgICAgICAgIHRlcm0ucHJpbnQoYFxcbmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHUuY29tbWFuZHMgJiYgdS5jb21tYW5kcy5sZW5ndGgpIHtcbiAgICAgICAgbGV0IG9wdGlvblRpdGxlUHJpbnRlZCA9IGZhbHNlO1xuICAgICAgICB1LmNvbW1hbmRzLmZvckVhY2gobyA9PiB7XG4gICAgICAgICAgICBpZiAoby5zd2l0Y2gubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25UaXRsZVByaW50ZWQpIHsgb3B0aW9uVGl0bGVQcmludGVkID0gdHJ1ZTsgdGVybS5wcmludCh0ZXJtLm1jLmJvbGQgKyBVU0FHRS5oZWFkZXIgKyBVU0FHRS5jb21tYW5kcyArIHRlcm0ubWMucmVzZXRBbGwpOyB9XG4gICAgICAgICAgICAgICAgdGVybS5wcmludChgJHt0ZXJtLmZjLmJyaWdodFdoaXRlICsgdGVybS5tYy5ib2xkfSR7VVNBR0UuaW5kZW50ICsgby5zd2l0Y2h9XFxuYCk7XG4gICAgICAgICAgICAgICAgdGVybS5wcmludChgJHt0ZXJtLm1jLnJlc2V0QWxsfSR7VVNBR0UuaW5kZW50fSR7VVNBR0UuaW5kZW50fSR7by5kZXNjfWApO1xuICAgICAgICAgICAgICAgIHRlcm0ucHJpbnQoYFxcbmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdGVybS5wcmludChVU0FHRS5oZWFkZXIpO1xuICAgIGlmICgodS52ZXJzaW9uICYmIHUudmVyc2lvbi5sZW5ndGgpIHx8ICh1LmNvcHlyaWdodCAmJiB1LmNvcHlyaWdodC5sZW5ndGgpKSB0ZXJtLnByaW50KCc9PSAnKTtcbiAgICBpZiAodS52ZXJzaW9uICYmIHUudmVyc2lvbi5sZW5ndGgpIHRlcm0ucHJpbnQoYHYke3UudmVyc2lvbn1gKTtcbiAgICBpZiAodS5jb3B5cmlnaHQgJiYgdS5jb3B5cmlnaHQubGVuZ3RoKSB7XG4gICAgICAgIGlmICh1LnZlcnNpb24gJiYgdS52ZXJzaW9uLmxlbmd0aCkgdGVybS5wcmludChgIC0gYCk7XG4gICAgICAgIHRlcm0ucHJpbnQodS5jb3B5cmlnaHQpO1xuICAgIH07XG4gICAgaWYgKCh1LnZlcnNpb24gJiYgdS52ZXJzaW9uLmxlbmd0aCkgfHwgKHUuY29weXJpZ2h0ICYmIHUuY29weXJpZ2h0Lmxlbmd0aCkpIHRlcm0ucHJpbnQoJyA9PVxcblxcbicpO1xufSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNoaWxkX3Byb2Nlc3NcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibmV0XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm9zXCIpOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNzU3KTtcbiJdLCJuYW1lcyI6WyJpc051bWJlciIsIngiLCJ0ZXN0IiwiaXNDb25zdHJ1Y3Rvck9yUHJvdG8iLCJvYmoiLCJrZXkiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXJncyIsIm9wdHMiLCJmbGFncyIsImJvb2xzIiwic3RyaW5ncyIsInVua25vd25GbiIsInVua25vd24iLCJib29sZWFuIiwiYWxsQm9vbHMiLCJjb25jYXQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiZm9yRWFjaCIsImFsaWFzZXMiLCJhbGlhc0lzQm9vbGVhbiIsInNvbWUiLCJPYmplY3QiLCJrZXlzIiwiYWxpYXMiLCJ5Iiwic3RyaW5nIiwiayIsImRlZmF1bHRzIiwiZGVmYXVsdCIsImFyZ3YiLCJfIiwic2V0S2V5IiwidmFsdWUiLCJvIiwiaSIsImxlbmd0aCIsInVuZGVmaW5lZCIsInByb3RvdHlwZSIsIk51bWJlciIsIlN0cmluZyIsIkFycmF5IiwibGFzdEtleSIsImlzQXJyYXkiLCJwdXNoIiwic2V0QXJnIiwidmFsIiwiYXJnIiwiYXJnRGVmaW5lZCIsInNwbGl0Iiwibm90RmxhZ3MiLCJpbmRleE9mIiwic2xpY2UiLCJuZXh0IiwibSIsIm1hdGNoIiwibGV0dGVycyIsImJyb2tlbiIsImoiLCJzdG9wRWFybHkiLCJhcHBseSIsInByb2Nlc3MiLCJoZWxwIiwicHJpbnRVc2FnZSIsIm5hbWUiLCJ1c2FnZSIsImRlc2MiLCJvcHRpb25zIiwic3dpdGNoIiwidHlwZSIsImNvbW1hbmRzIiwidmVyc2lvbiIsImNvcHlyaWdodCIsImV4aXQiLCJoIiwiaXNDbGllbnRDb21tYW5kIiwicG9sQ2xpZW50IiwiaXNTZXJ2ZXJDb21tYW5kIiwicG9sU2VydmVyIiwicG9sIiwiY29uc3RydWN0b3IiLCJTRVJWSUNFX1NUQVRFIiwiUkVBRFkiLCJzdGF0ZSIsIlVQIiwiRE9XTiIsIlNUT1AiLCJDTElfUFJFX0lOVEVSVkFMIiwiQ0xJX0lOVEVSVkFMIiwicnVubmluZyIsInNydiIsImxvZ2luU2VydmljZSIsImluaXQiLCJzZXJ2aWNlTmFtZSIsInBhdGgiLCJ0aGlzIiwicHJvY2Vzc2VzIiwiaW50ZXJ2YWwiLCJiZWZvcmVfb25TdGFydCIsImFmdGVyX29uU3RhcnQiLCJiZWZvcmVfb25TdG9wIiwiYWZ0ZXJfb25TdG9wIiwiY2xpIiwiYWZ0ZXJfb25Mb2dpbiIsImJlZm9yZV9vbkxvZ2luIiwiZXhlYyIsIm9uU3RhcnQiLCJvbkxvZ2luIiwic3RhcnRSdW5DaGVja2VyIiwicHJlUG9zdFN0YXRlIiwibXNnIiwibG9nZ2VyIiwicmVzb2x2ZXIiLCJydW5TdGF0ZSIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJzdGFydFJlc29sdmVyIiwicnVuQ2hlY2tlciIsInNldEludGVydmFsIiwid3JpdGUiLCJjbGVhckludGVydmFsIiwidGVybSIsImZjIiwiZ3JlZW4iLCJtYyIsInJlc2V0QWxsIiwic2V0VGltZW91dCIsInN0b3BSdW5DaGVja2VyIiwic3RhZ2UiLCJzZXRSdW5uaW5nIiwiYWRkUHJvY2VzcyIsInByb2NJZCIsInByb2NOYW1lIiwiYWRkQ2xpIiwiZnVuY05hbWUiLCJ0aW1lc3RhbXAiLCJzcGF3biIsImlzU3RhdGVTdG9wIiwiYWRkRXhlYyIsIm1zZ1RvTG9nIiwiZGVsQ2xpIiwiZGVsRXhlYyIsInNldFNldHVwIiwic2V0dXAiLCJzZXRMb2dpblNlcnZpY2UiLCJnZXRMb2dpblNlcnZpY2UiLCJzdGF0ZUluaXQiLCJnZXQiLCJpc1N0YXRlQWZ0ZXJEb3duIiwic2V0U3RhdGVSZWFkeSIsInNldFN0YXRlRG93biIsInNldFN0YXRlU3RvcCIsImdldEFsbFJ1bm5pbmciLCJnZXRTZXJ2aWNlcyIsInMiLCJnZXRBbGxTdG9wcGVkIiwidmFsdWVzIiwic29ydCIsImEiLCJiIiwidG9VcHBlckNhc2UiLCJnZXROYW5vU2VjVGltZSIsImhyVGltZSIsImhydGltZSIsImV4aXN0c1N5bmMiLCJMT0dfRklMRV9QQVRIIiwiYWNjZXNzU3luYyIsIkxPR19GSUxFX1JPT1QiLCJjb25zdGFudHMiLCJSX09LIiwiV19PSyIsIlhfT0siLCJlcnJvciIsImxvZyIsInJlZCIsImNsaVNwbGl0QnlMaW5lU3luYyIsInBvbFBsdWdpblZlcnNpb24iLCJlbnYiLCJaU0giLCJlbmRzV2l0aCIsInpzaENvbXBsZXRpb25Jbml0IiwiY2xpR2VuZXJhdG9yIiwiY29udHJvbGxlciIsImJpbmRPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdsb2JhbFRoaXMiLCJzZXJ2aWNlIiwiX19wcm9wX18iLCJub0VyciIsInNwbGl0QnlMaW5lIiwic3BsaXRBbGwiLCJnaWQiLCJ1aWQiLCJ3ZCIsImN3ZCIsImVvbCIsImRvIiwiY2xpRG8iLCJhcmd1bWVudHMiLCJ0b0xvZyIsInN0ciIsImJpbmQiLCJleGVjR2VuZXJhdG9yIiwiaXQiLCJleGVjRG8iLCJjbWQiLCJwcm9nIiwic2hpZnQiLCJwYXJhbXMiLCJFcnJvciIsInN0YWNrIiwiUE9MX0NMX0VOViIsIlByb21pc2UiLCJyZXNvbHZlIiwiYyIsInNwYXduQ21kIiwic3RkaW8iLCJwcm9taXNlIiwicmVzIiwic3Rkb3V0Iiwib24iLCJkYXRhIiwidG9TdHJpbmciLCJzdGRlcnIiLCJsaW5lcyIsIl9vdXQiLCJfbGluZXMiLCJsIiwiX3NldHVwIiwidHJpbSIsInJlcGxhY2UiLCJzc09uU3RhcnQiLCJzc09uU3RvcCIsInNzT25Mb2dpbiIsImxvZ19maWxlIiwiVEFTS19JTkRFTlQiLCJsb2dGaWxlSW5pdCIsImNyZWF0ZVdyaXRlU3RyZWFtIiwibWVzc2FnZSIsImxldmVsIiwidGltZSIsIkRhdGUiLCJJU09TdHJpbmdzIiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbnNvbGUiLCJ3YXJuIiwiZXJyIiwiZW5kIiwibG9nRmlsZSIsImdsb2JhbCIsInR6byIsImdldFRpbWV6b25lT2Zmc2V0IiwicGFkIiwibnVtIiwiem9uZSIsIk1hdGgiLCJmbG9vciIsImFicyIsInNldFRpbWUiLCJnZXRUaW1lIiwidG9JU09TdHJpbmciLCJDbGllbnRDb21tYW5kIiwienNoQ29tcGxldGlvbkluaXRFeGVjdXRlZCIsInBvbFBsdWdpbkZvbGRlciIsIl9fZGlybmFtZSIsImNvbXBsZXRpb24iLCJwcyIsImRhZW1vbiIsInN0b3AiLCJzdGFydCIsInJlc3RhcnQiLCJjbGllbnRDcmVhdGUiLCJQT1NTSUJMRV9PUFRJT05TX01TRyIsIlBPTF9DT05GSUdfRk9MREVSIiwiaG9tZWRpciIsImVudnMiLCJTZXJ2ZXJDb21tYW5kIiwiVFoiLCJyZWFkRmlsZVN5bmMiLCJsb29rdXAiLCJfcnMiLCJjbGlTcGxpdEJ5TGluZSIsIl9sb2dpblNlcnZpY2UiLCJtYXAiLCJmIiwiX3BvbERhZW1vblJ1bm5pbmdDaGVjayIsInIiLCJwb3AiLCJfcnVubmluZ19lbnZzIiwiZSIsImVudkZpbGUiLCJmaWxlQ29udGVudCIsInByb2NJbmZvIiwic3J2SW5mbyIsImR5bmFtaWNSZXF1aXJlIiwicHJvbWlzZUFsbFNlcnZpY2UiLCJzZXJ2aWNlU3RhcnRSZXNvbHZlciIsInllbGxvdyIsIlBPTCIsInRoZW4iLCJhbGwiLCJmb3JjZSIsInN0b3BwZWRTZXJ2aWNlcyIsInNlcnZpY2VTdG9wUmVzb2x2ZXIiLCJwcmVTdG9wUmVzb2x2ZXIiLCJwb3N0U3RvcFJlc29sdmVyIiwicHJvbWlzZUFsbFByZVBvc3RTdG9wRG9uZSIsIl9zdG9wIiwicGVuZGluZ1Byb21pc2VzIiwicCIsImhlYWRNc2ciLCJraWxsIiwib25TdG9wIiwic3RvcEFsbCIsIlJVTk5JTkciLCJzZXJ2ZXJDbGVhbnVwIiwiYm9vdCIsInNlcnZlckNyZWF0ZSIsInNvY2tldCIsInNydk5hbWUiLCJwcm9jIiwibG9nb3V0IiwiY29ubmVjdGlvbnMiLCJzZXJ2ZXIiLCJjbGllbnQiLCJTSFVURE9XTiIsIlNPQ0tFVF9GSUxFIiwiY2xpZW50cyIsImNsb3NlIiwib25Nc2ciLCJzdHJlYW0iLCJ1bmxpbmtTeW5jIiwic29jayIsImNyZWF0ZVNlcnZlciIsInNlbGYiLCJub3ciLCJfbXNnIiwicGFyc2UiLCJleGMiLCJsaXN0ZW4iLCJjaG1vZFN5bmMiLCJfc29ja2V0IiwiX3NlcnZlckNyZWF0ZSIsImNsaWVudENsZWFudXAiLCJjcmVhdGVDb25uZWN0aW9uIiwiZGF0YVN0ciIsIl9jbWQiLCJzcGF3blN5bmMiLCJzdGF0dXMiLCJ0IiwicHJpbnQiLCJib2xkIiwiY29kZSIsIml0YWxpYyIsInVuZGVybGluZSIsImludmVyc2UiLCJzdHJpa2UiLCJkZWZhdWx0Q29sb3IiLCJibGFjayIsImJsdWUiLCJtYWdlbnRhIiwiY3lhbiIsIndoaXRlIiwiYnJpZ2h0QmxhY2siLCJicmlnaHRSZWQiLCJicmlnaHRHcmVlbiIsImJyaWdodFllbGxvdyIsImJyaWdodEJsdWUiLCJicmlnaHRNYWdlbnRhIiwiYnJpZ2h0Q3lhbiIsImJyaWdodFdoaXRlIiwiY3VzdG9tQ29sb3IiLCJjb2RlTnVtYmVyIiwiaXNOYU4iLCJiZ0RlZmF1bHRDb2xvciIsImZjQ29kZSIsImJnQmxhY2siLCJiYyIsImJnUmVkIiwiYmdHcmVlbiIsImJnWWVsbG93IiwiYmdCbHVlIiwiYmdNYWdlbnRhIiwiYmdDeWFuIiwiYmdXaGl0ZSIsImJnQnJpZ2h0QmxhY2siLCJiZ0JyaWdodFJlZCIsImJnQnJpZ2h0R3JlZW4iLCJiZ0JyaWdodFllbGxvdyIsImJnQnJpZ2h0Qmx1ZSIsImJnQnJpZ2h0TWFnZW50YSIsImJnQnJpZ2h0Q3lhbiIsImJnQnJpZ2h0V2hpdGUiLCJjdXN0b21CZ0NvbG9yIiwiZkNvZGUiLCJjbGVhckxpbmVDdXJzb3JSaWdodCIsImNsZWFyTGluZSIsInN0eWxlUmVzZXQiLCJjdXJzb3JIaWRlIiwiY3Vyc29yU2hvdyIsIlVTQUdFIiwiX2dldCIsInByb3AiLCJfcHJpbnRUaXRsZXMiLCJ0aXRsZSIsImluZm8iLCJ1Iiwib3B0aW9uVGl0bGVQcmludGVkIiwicmVxdWlyZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==